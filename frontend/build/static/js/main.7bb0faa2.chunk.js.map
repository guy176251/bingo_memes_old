{"version":3,"sources":["views/homeview.tsx","components/pagination.tsx","debug.tsx","api/backend.ts","components/snippets.tsx","context.tsx","components/cardinfo.tsx","components/loading.tsx","components/cardlistview.tsx","views/catviewnew.tsx","api/render.tsx","components/cardlist.tsx","views/userview.tsx","components/navbar.tsx","views/cardview.tsx","views/loginview.tsx","views/signupview.tsx","views/searchview.tsx","views/cardcreateview.tsx","components/searchbar.tsx","index.tsx"],"names":["HomeView","className","getDefaultSort","params","get","orderingParams","new","popular","hot","getRange","start","end","Array","fill","map","_","i","Pagination","pageSize","itemCount","label","top","buttonShape","pageCount","Math","ceil","loc","useLocation","paginationUrl","pathname","urlParams","URLSearchParams","search","currentSort","pageNum","parseInt","delete","urlParamsString","toString","PageItem","button","index","color","innerButton","set","to","sortDropdown","Dropdown","Toggle","id","Menu","ItemText","Divider","Object","keys","option","Item","disabled","as","Link","PageButtons","rowSize","paginationItems","currentPage","delta","range","round","pages","min","withDots","value","pair","length","concat","pagination","forEach","thing","push","slice","item","rPad","disp","endIndex","toApiQuery","location","query","entries","key","debugLog","props","console","log","cookies","Cookies","defaultOptions","credentials","defaultHeaders","apiGetPostPut","url","a","data","put","BACKEND","options","method","headers","body","JSON","stringify","apiResp","apiDelete","fetch","resp","respData","json","ok","api","login","logout","editCard","cardId","cardData","deleteCard","createUser","userData","createVote","voteData","createCard","getSession","getCard","getUser","userId","getCategory","categoryName","getCardList","getTopThreeCards","name","getTopThreeCategories","Header","card","children","infoPadding","max","gridPadding","headerItem","centeredItems","InfoHeader","subject","info","tidbit","edgePadding","paddingIndexes","tileIndex","padding","pad","includes","padIndex","indexOf","splice","join","parseDate","s","Date","parse","toLocaleString","UserAuthContext","createContext","minute","hour","day","month","times","year","dateStr","isoString","now","date","diff","getTime","str","time","floor","sendVote","up","VoteButtons","user","useContext","inactiveColor","upColor","downColor","u","d","t","upvoted","voteAdjust","useState","setUp","down","setDown","scoreColor","setScoreColor","changeVoteState","activeColor","state","setState","currentUpColor","currentDownColor","voteScore","loggedIn","Boolean","Col","xs","icon","faArrowUp","voteAction","score","faArrowDown","VoteButtonSingle","onClick","style","cursor","CardInfo","link","history","useHistory","showModal","setModal","toggleModal","userLink","author","categoryLink","category","cardLinkUrl","CardLink","CardDetails","created_at","CardControls","Row","faEdit","faTrash","DeleteModal","Modal","show","dialogAs","Dialog","centered","closeButton","Body","Footer","go","Loading","message","Spinner","animation","role","stateReducer","action","type","done","payload","CardListView","apiCall","cardQuery","header","useReducer","itemData","dispatch","useEffect","ItemHeader","MainLayout","cards","PaginationThing","count","page_size","results","CategoryHeader","Helmet","content","CategoryView","useParams","ApiRender","loadingMessage","component","setResp","APIRENDER","RespStatus","detail","Component","PageContent","CardLayout","CardList","UserHeader","UserView","scrollToY","y","window","scrollTo","behavior","scrollToTop","scrollToBottom","document","scrollHeight","NavBarUnit","spacer","buttons","navItem","text","onclick","Nav","Navbar","fixed","undefined","Container","faQuestion","faHandPointDown","faHandPointUp","things","AppNavBar","solutionIndexes","edge","vert","n","horiz","diag1","diag2","tileHover","tile","setCard","navigator","maxTouchPoints","tiles","hovered","tileClick","setSolution","clicked","newSolution","some","line","every","filter","checkForBingo","colorTheTile","clickedColor","hoverColor","passedCard","cardInfo","tileFields","field","startsWith","Reflect","deleteProperty","tileSearchQuery","setTileSearchQuery","solution","topToggled","setTopToggled","inputRef","useRef","solved","hideTop","current","focus","faSearch","faExpandAlt","filteredTiles","toLowerCase","md","lg","InputGroup","Form","Control","placeholder","onChange","e","target","onFocus","ref","Append","Button","variant","faTimes","onMouseEnter","onMouseLeave","href","resetBingo","CardView","stringField","Yup","default","required","LoginSchema","shape","username","password","LoginForm","valid","setLoginState","apiLogin","apiLogout","setSubmitting","handleSubmit","values","resetForm","FormView","validationSchema","initialValues","onSubmit","isSubmitting","LoginView","SignupView","SignupSchema","confirmPassword","when","is","val","then","oneOf","email","signupFields","SignupForm","createdSuccess","setCreatedSuccess","submitDone","setDone","submitUser","setErrors","apiErr","fromEntries","SignupFormLayout","fieldLabel","fieldName","fieldType","SignupSuccess","validateOnBlur","validateOnChange","getDefault","SearchView","searchQuery","encodeURIComponent","SEARCHVIEW","formFields","categorySchema","matches","excludeEmptyString","cardSchemaShape","cardSchema","FormRowIndicator","meta","touched","error","DropdownContainer","forwardRef","FormHelperContext","setFieldValue","CategorySearchBar","initState","showDropdown","loading","errors","categories","CATEGORYSEARCHBAR","setTimeout","queryRef","getCategories","categoryValue","showQueryButton","LoadingIndicator","ClearButton","QueryButton","DropdownItems","eventKey","CategoryErrors","err","SuccessIndicator","onToggle","onSelect","errs","validateSync","FormRow","preventEnter","keyEvent","preventDefault","CardForm","onKeyDown","CardCreateEditLayout","success","cardName","defaultValues","submitCard","formValues","v","CARDCREATE","formVerb","formVerbCap","charAt","toUpperCase","Provider","CardCreateView","SearchBar","resultMapper","SEARCHBAR","getResults","searchResults","SearchBarLabel","Icon","LoginDropdown","setDropdown","toggleDropdown","UserItems","faCog","faUserCircle","align","TopNavBar","showSearch","setSearch","TOPNAV","faPen","searchbar","result","faTh","faPencilAlt","sticky","App","setUser","exact","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7bb0faa2.chunk.js","sourcesContent":["const HomeView = () => (\n  <div className=\"jumbotron bg-white\">\n    <h1 className=\"display-4\">\n      Welcome to SITENAME\n    </h1>\n    <p className=\"lead\">\n      A place to create and share bingo meme templates\n    </p>\n    <hr className=\"my-4\" />\n    \n    <blockquote className=\"blockquote text-right mt-5\">\n      <p className=\"mb-0\">\n        Wow, I've never seen such a revolutionary bingo layout before! My grandparents are going to love this feature!\n      </p>\n      <footer className=\"blockquote-footer\">Totally real person</footer>\n    </blockquote>\n    \n    <blockquote className=\"blockquote text-right mt-5\">\n      <p className=\"mb-0\">\n        Man, bingo was boring and clunky before I discovered this website. Now it isn't clunky anymore!\n      </p>\n      <footer className=\"blockquote-footer\">Mentally fading senior citizen</footer>\n    </blockquote>\n\n    <blockquote className=\"blockquote text-right mt-5\">\n      <p className=\"mb-0\">\n        Top text\n      </p>\n      <footer className=\"blockquote-footer\">Bottom text</footer>\n    </blockquote>\n  </div>\n);\n\nexport default HomeView;\n","import { ReactElement } from 'react';\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Location } from 'history';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nconst getDefaultSort = (params: URLSearchParams) => params.get('sort') || 'hot';\nconst orderingParams: { [s: string]: string } = {\n    new: '-created_at',\n    popular: '-best,-created_at',\n    hot: '-hot,-created_at',\n};\n\nconst getRange = (start: number, end: number) => {\n    return Array(end - start + 1)\n        .fill(0)\n        .map((_, i) => i + start);\n};\nconst pagination = (currentPage: number, pageCount: number) => {\n    let delta: number;\n    if (pageCount <= 7) {\n        // delta === 7: [1 2 3 4 5 6 7]\n        delta = 7;\n    } else {\n        // delta === 2: [1 ... 4 5 6 ... 10]\n        // delta === 4: [1 2 3 4 5 ... 10]\n        delta = currentPage > 4 && currentPage < pageCount - 3 ? 2 : 4;\n    }\n\n    const range = {\n        start: Math.round(currentPage - delta / 2),\n        end: Math.round(currentPage + delta / 2)\n    };\n\n    if (range.start - 1 === 1 || range.end + 1 === pageCount) {\n        range.start += 1;\n        range.end += 1;\n    }\n\n    let pages: any =\n        currentPage > delta\n            ? getRange(Math.min(range.start, pageCount - delta), Math.min(range.end, pageCount))\n            : getRange(1, Math.min(pageCount, delta + 1));\n\n    const withDots = (value: any, pair: any) => (pages.length + 1 !== pageCount ? pair : [value]);\n\n    if (pages[0] !== 1) {\n        pages = withDots(1, [1, 0]).concat(pages);\n    }\n\n    if (pages[pages.length - 1] < pageCount) {\n        pages = pages.concat(withDots(pageCount, [0, pageCount]));\n    }\n\n    return pages;\n}\n\ninterface PaginationProps {\n    itemCount: number;\n    pageSize: number;\n    label: string;\n    top?: boolean;\n}\n\nconst Pagination = ({ pageSize, itemCount, label, top = false }: PaginationProps) => {\n    const buttonShape = 'w-100 rounded p-2 text-center';\n    const pageCount = Math.ceil(itemCount / pageSize);\n\n    const loc = useLocation();\n    const paginationUrl = loc.pathname;\n    const urlParams = new URLSearchParams(loc.search);\n    const currentSort = getDefaultSort(urlParams);\n    const pageNum = parseInt(urlParams.get('page') || '1');\n    urlParams.delete('page');\n    const urlParamsString = urlParams.toString();\n\n    const PageItem = ({ index = 0 }: { index?: number }) => {\n        const color = \n            index === pageNum\n                ? 'bg-sdark-orange text-white'\n                : 'sdark-fg';\n\n        const innerButton =\n            <div className={`${buttonShape} ${color} ${(index ? 'page-btn' : '')}`}>\n                {index ? index : '...'}\n            </div>;\n\n        let button: ReactElement;\n\n        if (index && index !== pageNum) {\n            let params = new URLSearchParams(urlParamsString);\n            params.set('page', `${index}`);\n            button =\n                <Link to={`${paginationUrl}?${params.toString()}`}>\n                    {innerButton}\n                </Link>;\n        } else {\n            button = innerButton;\n        }\n\n        return button;\n    }\n\n    const sortDropdown = (\n        <Dropdown>\n            <Dropdown.Toggle id='sort-dropdown' className={`sdark-fg border-0 p-0 w-100 ${buttonShape}`}>\n                sort: {currentSort}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className='w-100 slight-bg'>\n                <Dropdown.ItemText>Sort by</Dropdown.ItemText>\n                <Dropdown.Divider/>\n                {Object.keys(orderingParams).map(option => {\n                    urlParams.set('sort', option);\n                    return (\n                        option === currentSort\n                            ? <Dropdown.Item disabled>\n                                  {option}\n                              </Dropdown.Item>\n\n                            : <Dropdown.Item\n                                  as={Link}\n                                  to={`${paginationUrl}?${urlParams.toString()}`}\n                              >\n                                  {option}\n                              </Dropdown.Item>\n                    )})}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n\n    \n    const PageButtons = ({ rowSize }: { rowSize: number }) => {\n        let paginationItems: (number | null)[] = pagination(pageNum, pageCount);\n\n        if (paginationItems.length < rowSize)\n            Array(rowSize - paginationItems.length).fill(null)\n                .forEach(thing => paginationItems.push(thing));\n\n        paginationItems.push(paginationItems.slice(-1)[0]);\n        \n        return (\n            <div className={`row row-cols-${rowSize}`}>\n                {paginationItems.map((item, index) => {\n                    let rPad = 'pr-2';\n                    let disp = '';\n                    let endIndex = rowSize - 1;\n\n                    if (index > endIndex) {\n                        disp = 'd-none d-lg-block';\n                    }\n                    else if (index === endIndex) {\n                        disp = 'd-lg-none';\n                        rPad = '';\n                    }\n\n                    return (\n                        <div className={`col p-0 ${disp}`}>\n                            <div className={rPad}>\n                                {\n                                    item !== null &&\n                                        <PageItem index={item}/>\n                                }\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        ); \n    }\n\n    return (\n        <div className=\"row\">\n\n            {\n                top &&\n                    <>\n                        <div className=\"col-12 d-lg-none\">\n                            <div className=\"row\">\n                                <div className=\"col-6 p-0\">\n                                    <div className='pr-1'>\n                                        <div className={`sdark-fg ${buttonShape}`}>\n                                            {itemCount} {label}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"pl-1 col-6 p-0\">\n                                    {sortDropdown}\n                                </div>\n                            </div>\n                        </div>\n                \n                        <div className=\"col-12 d-lg-none p-0\">\n                            <hr className=\"sdark-spacer my-2\" />\n                        </div>\n                    </>\n            }\n            \n            <div className=\"col-12 col-lg-6\">\n                <PageButtons rowSize={7}/>\n            </div>\n\n            <div className=\"d-none d-lg-block col-3\">\n            </div>\n            \n            <div className=\"d-none d-lg-block col-3\">\n                {\n                    top &&                 \n                        <div className=\"row\">\n                            <div className=\"col-6 p-0\">\n                                <div className='pl-2 pr-1'>\n                                    <div className={`sdark-fg ${buttonShape}`}>\n                                        {itemCount} {label}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"pl-1 col-6 p-0\">\n                                {sortDropdown}\n                            </div>\n                        </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Pagination;\n\nexport const toApiQuery = (location: Location, query: object = {}) => {\n    let urlParams = new URLSearchParams(location.search);\n    urlParams.set('ordering', orderingParams[getDefaultSort(urlParams)]);\n    urlParams.delete('sort');\n\n    Object.entries(query)\n          .forEach(([ key, value ]) =>\n               urlParams.set(key, value));\n    \n    return urlParams.toString();\n};\n","const DEBUG = true;\nconst debugLog = (props: any) => {\n    DEBUG && console.log(props);\n}\n\nexport default debugLog;\n","import Cookies from 'universal-cookie';\nimport { Location } from 'history';\n\nimport { toApiQuery } from '../components/pagination';\nimport { User, BingoCard, Category } from '../types';\nimport debugLog from '../debug';\n\n// here for pasting purposes\n// import api from '../api/backend';\n\nconst cookies = new Cookies();\nconst baseUrl = '/api';\nconst defaultOptions = { credentials: 'same-origin' };\nconst defaultHeaders = () => ({\n    'X-CSRFToken' : cookies.get('csrftoken'),\n});\n\nexport interface ApiResponse<T = any> {\n    data: T | null;\n    ok: boolean;\n}\n\nconst apiGetPostPut = async <T = any>(url: string, data: object = {}, put: boolean = false): Promise<ApiResponse<T>> => {\n    debugLog({ BACKEND: 1, url, data });\n    let options: any = { ...defaultOptions, method: 'GET' };\n\n    if (Object.keys(data).length > 0) {\n        options = {\n            ...options,\n            method: put ? 'PUT' : 'POST',\n            headers: {\n                ...defaultHeaders(),\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        }\n    } \n\n    return await apiResp<T>(url, options);\n};\n\nconst apiDelete = async <T = any>(url: string): Promise<ApiResponse<T>> => {\n    return await apiResp<T>(url, { ...defaultOptions, method: 'DELETE', headers: {...defaultHeaders()} });\n}\n\nconst apiResp = async <T = any>(url: string, options: any): Promise<ApiResponse<T>> => {\n    let resp = await fetch(`${baseUrl}${url}`, options);\n    let respData: T | null = null;\n\n    try { respData = await resp.json() }\n    catch {}\n\n    return {\n        data: respData,\n        ok: resp.ok,\n    };\n}\n\ninterface VoteData {\n    card: { id: number };\n    up: boolean;\n}\n\ninterface UserData {\n    username: string;\n    password: string;\n    email: string;\n}\n\ninterface LoginData {\n    user?: User;\n    valid: boolean;\n}\n\nconst api = {\n    login(credentials: object) {\n        return apiGetPostPut<LoginData>('/login/', credentials);\n    },\n    logout() {\n        return apiGetPostPut('/logout/');\n    },\n\n    // PUT\n    editCard(cardId: number, cardData: object) {\n        return apiGetPostPut(`/cards/${cardId}/`, cardData, true);\n    },\n\n    // DELETE\n    deleteCard(cardId: number) {\n        return apiDelete(`/cards/${cardId}/`);\n    },\n    \n    // POST\n    createUser(userData: UserData) {\n        return apiGetPostPut('/signup/', userData);\n    },\n    createVote(voteData: VoteData) {\n        return apiGetPostPut('/votes/', voteData);\n    },\n    createCard(cardData: object) {\n        return apiGetPostPut('/cards/', cardData);\n    },\n\n    // GET\n    getSession() {\n        return apiGetPostPut('/session/');\n    },\n    getCard(cardId: string) {\n        return apiGetPostPut(`/cards/${cardId}/`);\n    },\n    getUser(userId: string) {\n        return apiGetPostPut(`/users/${userId}/`);\n    },\n    getCategory(categoryName: string) {\n        return apiGetPostPut(`/categories/${categoryName}/`);\n    },\n    getCardList(location: Location, query: object = {}) {\n        return apiGetPostPut(`/cards/?${toApiQuery(location, query)}`);\n    },\n    getTopThreeCards(name: string) {\n        return apiGetPostPut<BingoCard[]>(`/bar/cards/?search=${name}`);\n    },\n    getTopThreeCategories(name: string) {\n        return apiGetPostPut<Category[]>(`/bar/categories/?search=${name}`);\n    },\n};\n\nexport default api;\n","import { ReactNode } from 'react';\n\ninterface HeaderProps {\n    card?: boolean;\n    children: ReactNode;\n}\n\nexport const Header = ({ card, children }: HeaderProps) => (\n    <div className=\"row\">\n        <div className=\"w-100\">\n            <div className=\"row\">\n                <div className=\"col-2 d-none d-lg-block\"/>\n                <div className=\"col-12 col-lg-8\">\n                    <div>\n                        {card\n                            ?\n                                <div className=\"py-4 text-center rounded sdark-fg m-2\">\n                                    {children}\n                                </div>\n                            :\n                                children}\n                    </div>\n                </div>\n                <div className=\"col-2 d-none d-lg-block\"/>\n            </div>\n        </div>\n    </div>\n);\n\ninterface InfoHeaderProps {\n    subject: string;\n    info: ReactNode[];\n}\n\nconst infoPadding = (index: number, max: number) => {\n    switch (index) {\n        case 0:\n            return `pb-${gridPadding}`;\n        case max:\n            return `pt-${gridPadding}`;\n        default:\n            return `py-${gridPadding}`;\n    }\n}\n\nconst gridPadding = 1;\nconst headerItem = 'rounded text-center sdark-fg p-3 w-100';\nconst centeredItems = 'h-100 d-flex align-items-center justify-content-center';\n\nexport const InfoHeader = ({ subject, info }: InfoHeaderProps) => (\n    <Header>\n\n        <div className=\"p-2\">\n            <div className=\"row\">\n                <div className={`col-8 pr-${gridPadding}`}>\n                    <div className={`${centeredItems} ${headerItem}`}>\n                        <h3>\n                            {subject}\n                        </h3>\n                    </div>\n                </div>\n                <div className={`col-4 pl-${gridPadding}`}>\n                    <div>\n                        <div className=\"col\">\n                            {\n                                info.map((tidbit, index) => (\n                                    <div className={`row ${infoPadding(index, info.length - 1)}`}>\n                                        <div className={`${headerItem} w-100`}>\n                                            {tidbit}\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"pt-2 px-2 d-none\">\n            <div className=\"row\">\n                <div className={`col pb-${gridPadding}`}>\n                    <div className={headerItem}>\n                        <div className=\"p-2\">\n                        <h2>\n                            {subject}\n                        </h2>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row row-cols-2\">\n                {\n                    info.map((tidbit, index) => (\n                        <div className={`col py-${gridPadding} ${(index % 2 === 0 ? 'pr' : 'pl')}-${gridPadding}`}>\n                            <div className={`${centeredItems} ${headerItem}`}>\n                                {tidbit}\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n      \n    </Header>\n);\n\nexport const edgePadding: string[] = (() => {\n    let paddingIndexes: { [s: string]: number[] } = {\n        'pt-1': [1, 2, 3, 4, 5],      // top\n        'pr-1': [5, 10, 15, 20, 25],  // right\n        'pl-1': [1, 6, 11, 16, 21],   // left\n        'pb-1': [21, 22, 23, 24, 25], // bottom\n    }\n\n    return Array(25)\n        .fill(0)\n        .map((_, tileIndex) => {\n            tileIndex++;\n            let padding = ['pt-1', 'pb-1', 'pl-1', 'pr-1'];\n\n            Object.entries(paddingIndexes).forEach(([ pad, indexes ]) => {\n                if (indexes.includes(tileIndex)) {\n                    let padIndex = padding.indexOf(pad);\n                    padding.splice(padIndex, 1);\n                }\n            });\n\n            return padding.join(' ');\n        })\n})();\n\nexport const parseDate = (s: string) => {\n    let date = new Date(Date.parse(s));\n    return date.toLocaleString();\n};\n","import { createContext } from 'react';\nimport { UserState } from './types';\n\nexport const UserAuthContext = createContext<UserState>(null);\n","import { useState, useContext } from 'react';\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\n//import Button from 'react-bootstrap/Button';\n\nimport { FontAwesomeIcon as FaIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faEdit, faArrowUp, faArrowDown, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nimport { BingoCard, UserState } from '../types'\nimport { UserAuthContext } from '../context';\nimport api from '../api/backend';\n\nconst minute = 1000 * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst month = day * 31;\nconst year = month * 12;\nconst times: { [s: string]: number } = {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n}\n\nconst dateStr = (isoString: string) => {\n    var now = new Date(Date.now());\n    var date = new Date(Date.parse(isoString));\n    var diff = now.getTime() - date.getTime();\n \n    for (const str in times) {\n        let time = times[str];\n        if (diff >= time) {\n            let value = Math.floor(diff / time);\n            value = time === minute ? value % 60 : value;\n            let s = value > 1 ? 's' : '';\n            return `${value} ${str}${s} ago`;\n        }\n    }\n\n    return 'just now';\n}\n\nconst sendVote = async (card: BingoCard, up: boolean) => {\n    await api.createVote({ card: { id: card.id }, up: up });\n}\n\ninterface VoteButtonsProps {\n    card: BingoCard;\n}\n\nconst VoteButtons = ({ card }: VoteButtonsProps) => {\n    const user = useContext(UserAuthContext);\n    const inactiveColor = 'sdark-fg';\n    const upColor = 'sdark-orange';\n    const downColor = 'sdark-violet';\n\n    var u = false;\n    var d = false;\n    var a = 0;\n    var t = `text-${inactiveColor}`;\n    if (card.upvoted !== null) {\n        a = card.upvoted ? -1 : 1;\n        if (card.upvoted) {\n            u = true;\n            t = `text-${upColor}`;\n        }\n        else {\n            d = true;\n            t = `text-${downColor}`;\n        }\n    }\n    \n    var voteAdjust = a;\n    const [up, setUp] = useState(u);\n    const [down, setDown] = useState(d);\n    const [scoreColor, setScoreColor] = useState(t);\n    \n    const changeVoteState = (\n        activeColor: string,\n        state: boolean,\n        setState: (b: boolean) => void\n    ) => {\n        \n        setUp(false);\n        setDown(false);\n        setState(!state);\n        setScoreColor('text-' + (!state ? activeColor : inactiveColor));\n    };\n\n    const upvoteClick = () => {\n        changeVoteState(upColor, up, setUp);\n        sendVote(card, true);\n    }\n    const downvoteClick = () => {\n        changeVoteState(downColor, down, setDown);\n        sendVote(card, false);\n    }\n\n    var currentUpColor = up ? upColor : inactiveColor;\n    var currentDownColor = down ? downColor : inactiveColor;\n\n    var voteScore = 0;\n    if (up && !down)\n        voteScore = 1;\n    else if (down && !up)\n        voteScore = -1;\n \n    voteScore += voteAdjust;\n    var loggedIn = Boolean(user);\n    // 🡅 🡇\n    return (\n        <Col xs={2} className='border-sdark-right text-center'>\n            <VoteButtonSingle\n                icon={faArrowUp}\n                color={currentUpColor}\n                loggedIn={loggedIn}\n                voteAction={upvoteClick}\n                user={user}\n            />\n            <div className={`my-1 ${scoreColor}`}>\n                <h5>{card.score + voteScore}</h5>\n            </div>\n            <VoteButtonSingle\n                icon={faArrowDown}\n                color={currentDownColor}\n                loggedIn={loggedIn}\n                voteAction={downvoteClick}\n                user={user}\n            />\n        </Col>\n    );\n}\n\ninterface VoteButtonSingleProps {\n    icon: IconDefinition;\n    color: string;\n    loggedIn: boolean;\n    voteAction: () => void;\n    user: UserState;\n}\n\nconst VoteButtonSingle = ({ icon, color, loggedIn, voteAction, user }: VoteButtonSingleProps) =>\n    <div\n        className={`text-${color} ${user ? 'vote-btn' : ''} p-1 rounded`}\n        onClick={loggedIn ? voteAction : () => {}}\n        style={loggedIn ? { cursor: 'pointer' } : {}}\n    >\n        <FaIcon icon={icon} />\n    </div>;\n\ninterface CardInfoProps {\n    card: BingoCard;\n    link?: boolean;\n}\n\nconst CardInfo = ({ card, link }: CardInfoProps) => {\n    const history = useHistory();\n    const [showModal, setModal] = useState(false);\n    const user = useContext(UserAuthContext);\n    const toggleModal = () => setModal(!showModal);\n    //const goToEdit = () => history.push({ pathname: `/cards/${card.id}/edit/`, state: { cardId: card.id } });\n\n    const userLink = <Link to={`/users/${card.author.id}/`}>{card.author.name}</Link>;\n    const categoryLink = <Link to={`/categories/${card.category.name}/`}>{card.category.name}</Link>;\n    const cardLinkUrl = `/cards/${card.id}/`;\n\n    //const cardLink = (\n    //    <Link to={{\n    //        pathname: cardLinkUrl,\n    //        state: {\n    //            card: card\n    //        },\n    //    }}>\n    //        <h5>\n    //            {card.name}\n    //        </h5>\n    //    </Link>\n    //);\n\n    const CardLink = () => (\n        link\n            ?\n            <Link to={cardLinkUrl}>\n                <h5>{card.name}</h5>\n            </Link>\n\n            :\n            <h5>{card.name}</h5>\n    );\n\n    const CardDetails = () => \n        <Col>\n            <CardLink/>\n            <p className='text-sdark-fg'>\n                submitted {dateStr(card.created_at)} by {userLink} to {categoryLink}\n            </p>\n        </Col>;\n        \n    const CardControls = () => <>{\n        user && card.author.id === user.id &&\n            <Col xs={1} className='border-sdark-left text-center'>\n                <Row className=\"d-flex justify-content-center align-items-center h-50\">\n                    <Link to={`/cards/${card.id}/edit/`}>\n                        <div className=\"text-sdark-red\">\n                            <FaIcon icon={faEdit}/>\n                        </div>\n                    </Link>\n                </Row>\n                <Row className=\"d-flex justify-content-center align-items-center h-50\">\n                    <div\n                        className=\"text-sdark-red\"\n                        style={{ cursor: 'pointer' }}\n                        onClick={toggleModal}\n                    >\n                        <FaIcon icon={faTrash}/>\n                    </div>\n                </Row>\n            </Col>\n    }</>;\n\n    const DeleteModal = () =>\n        <Modal\n            show={showModal}\n            dialogAs={props =>\n                <Modal.Dialog centered>\n                    <div {...props} className=\"modal-content rounded slight-bg\">\n                    </div>\n                </Modal.Dialog>\n            }\n        >\n            <Modal.Header closeButton>\n                Delete Bingo Card\n            </Modal.Header>\n            <Modal.Body>\n                Are you sure you want to delete bingo card \"{card.name}\"?\n            </Modal.Body>\n            <Modal.Footer>\n                <button\n                    className=\"btn btn-danger\"\n                    onClick={async () => {\n                        await api.deleteCard(card.id);\n                        history.go(0);\n                    }}\n                >\n                    Yes\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={toggleModal}\n                >\n                    No\n                </button>\n            </Modal.Footer>\n        </Modal>;\n    \n    return (\n        <div className=\"p-3 rounded sdark-fg\">\n            <Row>\n                <VoteButtons card={card}/>\n                <CardDetails/>\n                <CardControls/>\n                <DeleteModal/>\n            </Row>\n        </div>\n    );\n}\n\nexport default CardInfo;\n","import Spinner from 'react-bootstrap/Spinner';\nimport React from 'react';\n\ninterface LoadingProps {\n  message: string | React.ReactElement;\n}\n\nconst Loading = ({ message }: LoadingProps) => (\n  <div className='text-center'>\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n    <div className=\"mt-2\">\n      {\n        typeof message === 'string'\n          ? <h4>{message}</h4>\n          : message\n      }\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import { useReducer, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport api from '../api/backend';\nimport CardInfo from './cardinfo';\nimport Pagination from './pagination';\nimport { ApiResponse } from '../api/backend';\nimport Loading from '../components/loading';\nimport { BingoCard } from '../types';\n\ninterface CardResults {\n    count: number;\n    page_size: number;\n    results: BingoCard[];\n}\n\ntype ApiCaller = () => Promise<ApiResponse>;\n\ninterface CardListViewProps {\n    apiCall: ApiCaller;\n    cardQuery: any;\n    header: React.FC<{ data: any }>;\n}\n\ninterface State {\n    done: boolean;\n    ok: boolean;\n    itemData?: any;\n    cardData?: any;\n}\n\ntype Action = \n    | { type: 'failed' }\n    | { type: 'loading' }\n    | { type: 'success', payload: { cardData: BingoCard, itemData: any } };\n\nconst stateReducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case 'failed':\n            return {\n                ...state,\n                done: true,\n                ok: false,\n            };\n        case 'loading':\n            return {\n                ...state,\n                done: false,\n                ok: true,\n            };\n        case 'success':\n            return {\n                ...action.payload,\n                done: true,\n                ok: true,\n            };\n    }\n};\n\nconst CardListView = ({ apiCall, cardQuery, header }: CardListViewProps) => {\n    const location = useLocation();\n    const initState: State = { done: false, ok: true };\n    const [{ done, ok, itemData, cardData }, dispatch] = useReducer(stateReducer, initState);\n    \n    useEffect(() => {\n        (async () => {\n            dispatch({ type: 'loading' });\n\n            const { data: itemData, ok: itemOk } = await apiCall();\n            if (!itemOk) {\n                dispatch({ type: 'failed' });\n                return;\n            }\n            \n            const { data: cardData, ok: cardOk } = await api.getCardList(location, cardQuery);\n            if (!cardOk) {\n                dispatch({ type: 'failed' });\n                return;\n            }\n\n            dispatch({ type: 'success', payload: {itemData, cardData} });\n        })();\n    }, []);\n\n    const ItemHeader = header;\n    const MainLayout = ({ item, cards }: { item: any, cards: CardResults }) => {\n\n        const PaginationThing = ({ top }: { top?: boolean }) =>\n            <div className=\"p-2\">\n                <Pagination\n                    itemCount={cards.count}\n                    pageSize={cards.page_size}\n                    label='cards'\n                    top={top}\n                />\n            </div>;\n\n        return (\n            <>\n                <ItemHeader data={item}/>\n                <PaginationThing top />\n                <div className='row row-cols-1 row-cols-lg-2'>\n                    {cards.results.map(card => (\n                        <div className=\"col p-2\">\n                            <CardInfo card={card} link/>    \n                        </div>\n                    ))}\n                </div>\n                <PaginationThing />\n            </>\n        );\n    }\n        \n    return (\n        !done\n            ?\n                <Loading message='Getting bingo cards...'/>\n            :\n                (\n                ok && itemData && cardData\n                    ?\n                        <MainLayout item={itemData} cards={cardData}/>\n                    :\n                        <> Something went wrong...</>\n            )\n    );\n};\n\nexport default CardListView;\n","import { Link, useParams } from 'react-router-dom';\nimport { Helmet } from \"react-helmet\";\n\nimport api from '../api/backend';\nimport { Category } from '../types';\nimport { InfoHeader, parseDate } from '../components/snippets';\nimport CardListView from '../components/cardlistview';\n\nconst CategoryView = () => {\n    const { categoryName }: { categoryName: string } = useParams();\n\n    return (\n        <CardListView\n            apiCall={() => api.getCategory(categoryName)}\n            cardQuery={{ category: categoryName }}\n            header={CategoryHeader}\n            key={`${Date.now()}`}\n        />\n    );\n};\n\nconst CategoryHeader = ({ data }: { data: Category }) => \n    <>\n        <Helmet>\n            <title>{data.name}</title>\n            <meta\n              name=\"description\"\n                content={`Category: ${data.name}`}\n            />\n        </Helmet>\n        <InfoHeader\n            subject={`category: ${data.name}`}\n            info={[\n                <>author: <Link to={`/users/${data.author.id}/`}>{data.author.name}</Link></>,\n                `created at ${parseDate(data.created_at)}`,\n            ]}\n        />\n    </>;\n\nexport default CategoryView;\n","import { useEffect, useState } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport { ApiResponse } from './backend';\nimport debugLog from '../debug';\n\ninterface ComponentProps {\n    data: any;\n}\n\ninterface ApiRenderProps {\n    apiCall: () => Promise<ApiResponse>;\n    component: React.FunctionComponent<ComponentProps>;\n    loadingMessage?: string;\n    key: string;\n}\n\n\nconst ApiRender = ({ apiCall, loadingMessage, component }: ApiRenderProps) => {\n    const [{ data, ok }, setResp] = useState<ApiResponse>({ data: null, ok: true });\n\n    useEffect(() => {\n        (async () => {\n            debugLog({ APIRENDER: 'getting data', data, ok });\n            let respData = await apiCall();\n            setResp(respData);\n        })();\n    }, []);\n\n    const RespStatus = () => (\n         (data?.detail || !ok)\n            ?   <div className='text-sdark-red text-center my-4'>\n                    <h3>{`Error` + (data?.detail ? `: ${data.detail}` : '')}</h3>\n                </div>\n\n            :   <div className='text-center mt-4'>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                    {\n                        loadingMessage &&\n                            <div className=\"mt-2\">\n                                {loadingMessage}\n                            </div>\n                    }\n                </div>\n    );\n    \n    let Component = component;\n\n    const PageContent = () => (\n        data && (!data.detail && ok)\n            ? <Component data={data}/>\n            : <RespStatus/>\n    );\n \n    return  <PageContent/>;\n}\n\nexport default ApiRender;\n","import { useLocation } from 'react-router-dom';\n\nimport Pagination from './pagination';\nimport CardInfo from './cardinfo';\n\nimport { BingoCard } from '../types';\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\nimport { Header } from '../components/snippets';\n\ninterface CardListProps {\n    query: object;\n    key: string;\n}\n\nconst CardList = ({ query, key }: CardListProps) => {\n    let location = useLocation();\n\n    return (\n        <ApiRender\n            apiCall={() => api.getCardList(location, query)}\n            component={CardLayout}\n            key={key}\n        />\n    );\n}\n\ninterface CardResults {\n    count: number;\n    page_size: number;\n    results: BingoCard[];\n}\n\nconst CardLayout = ({ data }: { data: CardResults }) => {\n\n    const PaginationThing = ({ header }: { header?: boolean }) =>\n        <div className=\"p-2\">\n            <Pagination\n                itemCount={data.count}\n                pageSize={data.page_size}\n                label='cards'\n                top={header}\n            />\n        </div>;\n\n    return (\n        data.count === 0\n            ?\n                <Header card>\n                    <h3>No results found.</h3>\n                </Header>\n            :\n                <>\n                    <PaginationThing header />\n                    <div className='row row-cols-1 row-cols-lg-2'>\n                        {data.results.map(card => (\n                            <div className=\"col p-2\">\n                                <CardInfo card={card} link/>    \n                            </div>\n                        ))}\n                    </div>\n                    <PaginationThing />\n                </>\n    );\n};\n\nexport default CardList;\n","import { useParams } from 'react-router-dom';\nimport { Helmet } from \"react-helmet\";\n\n//import { UserAuthContext } from '../context';\nimport { User } from '../types';\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\nimport CardList from '../components/cardlist';\nimport { InfoHeader, parseDate } from '../components/snippets';\n\ninterface UserId { userId: string };\n\nconst UserView = () => {\n    //const user = useContext(UserAuthContext);\n    const { userId } = useParams<UserId>();\n\n    return (\n        <ApiRender\n            apiCall={() => api.getUser(userId)}\n            component={UserHeader}\n            key={userId}\n        />\n    );\n}\n\nconst UserHeader = ({ data }: { data: User }) => (\n    <>\n        <Helmet>\n            <title>Profile for {data.name}</title>\n        </Helmet>\n        <InfoHeader\n            subject={`user: ${data.name}`}\n            info={[\n                `score: ${data.score}`,\n                `created at ${parseDate(data.created_at)}`,\n            ]}\n        />\n        <CardList query={{ user: data.id }} key={`${data.id}`}/>\n    </>\n);\n\nexport default UserView;\n","import Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion, faHandPointDown, faHandPointUp, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nexport type AppNavBarButtons = Array<[IconDefinition, string, () => void | undefined]>;\n\ninterface AppNavBarProps {\n  id?: string;\n  spacer?: boolean;\n  buttons?: AppNavBarButtons;\n}\n\nconst scrollToY = (y: number) => window.scrollTo({ top: y, behavior: \"smooth\" });\nconst scrollToTop = () => scrollToY(0);\nconst scrollToBottom = () => scrollToY(document.body.scrollHeight);\n\nconst NavBarUnit = ({ spacer, buttons }: AppNavBarProps) =>  {\n  const navItem = (\n    icon: IconDefinition,\n    text: string,\n    onclick?: () => void,\n  ) => (\n    <Nav.Item onClick={onclick}>\n      <Nav.Link>\n        <FontAwesomeIcon className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'} icon={icon} />\n        <br/>\n        <small className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'}>{text}</small>\n      </Nav.Link>\n    </Nav.Item>\n  )\n\n  return (\n    <Navbar\n      fixed={spacer ? undefined : 'bottom'}\n      className={spacer ? 'sdark-spacer py-0' : 'sdark-fg shadow py-1'}\n    >\n      <Container>\n        <Nav fill className='w-100'>\n          {\n            spacer\n              ?  navItem(faQuestion, 'Bottom of page')\n              : [\n                  navItem(faHandPointDown, 'Bottom', scrollToBottom),\n                  navItem(faHandPointUp, 'Top', scrollToTop),\n                ]\n          }\n          {\n            buttons?.length && buttons.map(things => navItem(...things))\n          }\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport const AppNavBar = (props: AppNavBarProps) => (\n  <div id=\"navbars\" className='d-md-none'>\n    <NavBarUnit spacer/>\n    <NavBarUnit {...props}/>\n  </div>\n);\n","import { useState, useRef, ReactElement } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faExpandAlt, faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport { AppNavBar, AppNavBarButtons } from '../components/navbar';\nimport CardInfo from '../components/cardinfo';\nimport { edgePadding } from '../components/snippets';\nimport { BingoTile, BingoCard } from '../types';\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\n\n\n\n//=============================//\n// bingo card solution checker //\n//=============================//\n\nconst solutionIndexes = (() => {\n    let edge = Array(5).fill(0).map((_, i) => i);\n    let vert = edge.map(n => Array(5).fill(0).map((_, i) => i * 5 + n));\n    let horiz = edge.map(n => Array(5).fill(0).map((_, i) => i + 5 * n));\n    let diag1 = Array(5).fill(0).map((_, i) => i * 4 + 4);\n    let diag2 = Array(5).fill(0).map((_, i) => i * 6);\n    return [...vert, ...horiz, diag1, diag2];\n})();\n\ntype SolutionArray = BingoTile[];\n\nconst checkForBingo = (card: BingoCard): SolutionArray | undefined => {\n    if (solutionIndexes.some(line => line.every(index => card.tiles[index].clicked))) {\n        var solution = solutionIndexes.filter(line => line.every(index => card.tiles[index].clicked))[0];\n        return solution.map(index =>card.tiles[index]);\n    }\n}\n\n\n//==================//\n// cardview methods //\n//==================//\n\ntype CardSetter = (card: BingoCard) => void;\ntype SolutionSetter = (solution: SolutionArray) => void;\n\nconst tileHover = (\n    tile: BingoTile,\n    state: boolean,\n    card: BingoCard,\n    setCard: CardSetter\n) => {\n\n    if (!navigator.maxTouchPoints) {\n        const tiles = card.tiles;\n        const index = tiles.indexOf(tile);\n        tiles[index].hovered = state;\n        setCard({ ...card, tiles: tiles });\n    }\n};\n\nconst tileClick = (\n    tile: BingoTile,\n    card: BingoCard,\n    setCard: CardSetter,\n    setSolution: SolutionSetter\n) => {\n\n    const tiles = card.tiles;\n    const index = tiles.indexOf(tile);\n    tiles[index].clicked = !tiles[index].clicked; \n    setCard({ ...card, tiles: tiles });\n    \n    var newSolution = checkForBingo(card);\n    if (newSolution)\n        setSolution(newSolution);\n};\n\nconst resetBingo = (\n    card: BingoCard | null,\n    setCard: CardSetter,\n    setSolution: SolutionSetter\n) => {\n\n    if (card) {\n        const tiles = card.tiles.map(tile => {\n            tile.hovered = false;\n            tile.clicked = false;\n            return tile;\n        });\n        tiles[12].clicked = true;\n        setCard({ ...card, tiles: tiles })\n        setSolution([]);\n\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n};\n\nconst colorTheTile = (tile: BingoTile) => {\n    if (tile.clicked)\n        return clickedColor;\n    else if (tile.hovered)\n        return hoverColor;\n    else\n        return 'sdark-fg'\n}\n\n//====================//\n// cardview variables //\n//====================//\n\nconst clickedColor = 'bg-sdark-green text-white';\nconst hoverColor = 'bg-sdark-magenta text-white';\n\n//====================//\n// cardview component //\n//====================//\n\ninterface CardLayoutProps {\n    passedCard: BingoCard;\n    cardInfo: ReactElement;\n}\n\nconst CardLayout = ({ passedCard, cardInfo }: CardLayoutProps) => {\n    const [card, setCard] = useState(() => {\n        let tileFields = Object.entries(passedCard).filter(([ field, _ ]) => field.startsWith('tile_'));\n        let tiles = tileFields.map(([ _, text ], index) => ({\n            text: text,\n            hovered: false,\n            clicked: false,\n            id: index + 1\n        }));\n        tileFields.forEach(([field, _]) => Reflect.deleteProperty(passedCard, field));\n        tiles[12].clicked = true;\n        passedCard.tiles = tiles;\n        console.log('init card');\n        return passedCard;\n    });\n    const [tileSearchQuery, setTileSearchQuery] = useState('');\n    const [solution, setSolution] = useState<SolutionArray>([]);\n    const [topToggled, setTopToggled] = useState(true);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const solved = Boolean(solution.length);\n    \n    const changeSearch = (e : any) => setTileSearchQuery(e.target.value);\n    const resetSearch = () => {\n        setTileSearchQuery('');\n        setTopToggled(true);\n    }\n    const showTop = () => setTopToggled(true);\n    const hideTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n        });\n        setTopToggled(false);\n        inputRef.current && inputRef.current.focus(); \n    }\n    const buttons: AppNavBarButtons = [[faSearch, 'Search', hideTop]];\n    if (!topToggled)\n        buttons.push([faExpandAlt, 'Expand', showTop]);\n    \n    const filteredTiles = card.tiles.filter(tile => {\n        return tile.text.toLowerCase().includes(tileSearchQuery.toLowerCase());\n    });\n\n    console.log(`\\nLAYOUT:\\n\\n    card: ${card.name}\\n    query: ${tileSearchQuery}\\n    solution: ${solution}\\n    topToggled: ${topToggled}\\n`);\n\n    return (\n        <>\n            <Row className='pt-2'>\n                <Col id='info-and-indicators' xs={12} md={6} lg={5} className=\"px-2\">\n                    <div id='card-info' className={'pb-2 ' + (topToggled ? '' : 'd-none d-md-block')}>\n                        <div className=\"mb-2\">\n                            {cardInfo}\n                        </div>\n                        <Col id='indicators' className='text-center'>\n                            <Row className='row-cols-5'>\n                                {\n                                    card.tiles.map((tile, index) => (\n                                        <Col className={`p-0 ${edgePadding[index]}`}>\n                                            <Col className={`py-2 rounded ${colorTheTile(tile)}`}>\n                                                {tile.id}\n                                            </Col>\n                                        </Col>\n                                    ))\n                                }\n                            </Row>\n                        </Col>\n                    </div>\n                    <div id='search-bar' className='pb-2'>\n                        {\n                            !topToggled\n                                && <div className='d-md-none text-sdark-bg p-0 pb-1'>\n                                         <small>Card info hidden. Click on the expand button to show them.</small>\n                                     </div>\n                                 \n                        }\n                        <InputGroup>\n                            <Form.Control\n                                placeholder='Search bingo tiles'\n                                type='string'\n                                className='slight-bg'\n                                value={tileSearchQuery}\n                                style={{ cursor: 'pointer' }}\n                                onChange={changeSearch}\n                                onFocus={hideTop}\n                                ref={inputRef}\n                            />\n                            {\n                                tileSearchQuery\n                                    && \n                                        <InputGroup.Append>\n                                            <Button\n                                                variant='danger'\n                                                className='bg-sdark-red'\n                                                onClick={resetSearch}\n                                            >\n                                                <FontAwesomeIcon icon={faTimes} />\n                                            </Button>\n                                        </InputGroup.Append>\n                            }\n                        </InputGroup>\n                    </div>\n                </Col>\n                <Col id='tiles' xs={12} md={6} lg={7} className=\"px-2\">\n                    {\n                        tileSearchQuery\n                        && <div className={ 'text-sdark-bg text-center p-0 ' + (filteredTiles.length ? 'pb-3' : '') }>\n                                 {\n                                     filteredTiles.length\n                                         ? `${filteredTiles.length} result` + (filteredTiles.length > 1 ? 's' : '')\n                                         : 'No results'\n                                 }\n                             </div>\n                             \n                    }\n                    <Row className='row-cols-1 row-cols-md-1' >\n                        {\n                            filteredTiles.map(( tile, index ) => (\n                                <Col className={index === 0 ? 'pb-1' : 'py-1'}>\n                                    <Col\n                                        style={{ cursor: 'pointer' }}\n                                        className={`rounded h-100 py-2 ${colorTheTile(tile)}`}\n                                        onClick={() => tileClick(tile, card, setCard, setSolution)}\n                                        onMouseEnter={() => tileHover(tile, true, card, setCard)}\n                                        onMouseLeave={() => tileHover(tile, false, card, setCard)}\n                                    >\n                                        <Row>\n                                            <Col xs={2} lg={1}\n                                                className={\n                                                    'border' + (tile.hovered || tile.clicked ? '' : '-sdark') + '-right'\n                                                        + ' text-center'\n                                            }>\n                                                {tile.id}\n                                            </Col>\n                                            <Col>{tile.text}</Col>\n                                        </Row>\n                                    </Col>\n                                </Col>\n                             ))\n                         }\n                    </Row>\n                    <hr className=\"sdark-hr\" />\n                </Col>\n\n                <Modal\n                    show={solved}\n                    dialogAs={(props) => (\n                        <div className=\"modal-dialog modal-dialog-centered\">\n                            <div {...{...props, className: \"modal-content rounded sdark-bg\"}}>\n                            </div>\n                        </div>\n                    )}\n                >\n                    <Modal.Header>\n                        You got Bingo!\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"text-center mb-4 mt-3\">\n                            <h3>{card.name}</h3>\n                        </div>\n                        <Row className='row-cols-1 p-1'>\n                            {\n                                solution.map(tile => \n                                    <Col className='p-1'>\n                                        <Col className='rounded h-100 p-2 sdark-fg'>\n                                             <Row>\n                                                 <Col xs={2} md={1} className='border-sdark-right text-center'>\n                                                     {tile.id}\n                                                 </Col>\n                                                 <Col>{tile.text}</Col>\n                                             </Row>\n                                        </Col>\n                                    </Col>\n                                )\n                            }\n                        </Row>\n                        <div className=\"text-center mt-4 mb-3\">\n                            Link: <a href={window.location.href} className='sdark-bg'>{window.location.href}</a>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            variant=\"primary\"\n                            onClick={() => resetBingo(card, setCard, setSolution)}\n                        >\n                            Start Over\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Row>\n\n            <AppNavBar\n                id='card-navbar'\n                buttons={buttons}\n            />\n        </>\n    );\n}\n\ninterface CardIdParam {\n    cardId: string;\n}\n\nconst CardView = () => {\n    const { cardId }: CardIdParam = useParams();\n    return (\n        <ApiRender\n            key={cardId}\n            apiCall={() => api.getCard(cardId)}\n            loadingMessage={`Loading bingo card ${cardId}`}\n            component={({ data }) => \n                <CardLayout\n                    passedCard={data}\n                    cardInfo={<CardInfo card={data}/>}\n                />\n            }\n        />\n    );\n}\n    /*\n    const loc = useLocation();\n    const card = \n        loc.state\n            ? (loc.state as { card?: BingoCard }).card\n            : null;\n\n    return (\n        <>\n            {\n                card\n                    ? <CardLayout\n                            passedCard={card}\n                            cardInfo={<CardInfo card={card}/>}\n                        />\n\n                    : <ApiRender\n                            apiCall={() => api.getCard(cardId)}\n                            loadingMessage={`Loading bingo card ${cardId}`}\n                            component={({ data }) => (\n                                <CardLayout\n                                    passedCard={data}\n                                    cardInfo={<CardInfo card={data}/>}\n                                />\n                            )}\n                        />\n            }\n        </>\n    );\n}\n*/\n\nexport default CardView;\n","import { useState } from 'react';\n\nimport * as Yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage, FormikHelpers } from 'formik';\n\nimport { Link } from 'react-router-dom';\n\nimport Loading from '../components/loading';\nimport { User, UserState } from '../types';\nimport api from '../api/backend';\nimport { Header } from '../components/snippets';\n\ninterface LoginProps {\n    login: (u: User) => void;\n    logout: () => void;\n    user: UserState;\n}\n\nconst stringField = () =>\n    Yup.string()\n        .default('')\n        .required('Required');\n\nconst LoginSchema = Yup.object().shape({\n    username: stringField(),\n    password: stringField(),\n});\n\ninterface LoginState {\n    done: boolean;\n    ok: boolean;\n    valid: boolean;\n}\n\nconst LoginForm = ({ login, logout, user }: LoginProps) => {\n    const [{ done, valid, ok }, setLoginState] = useState<LoginState>({ valid: false, done: false, ok: true });\n\n    const apiLogin = async (credentials: object) => {\n        setLoginState({ done: false, valid, ok });\n\n        let resp = await api.login(credentials);\n        let thing = false;\n\n        if (resp.data) {\n            thing = resp.data.valid;\n            if (resp.data.user)\n                login(resp.data.user);\n        }\n\n        setLoginState({ done: true, valid: thing, ok: resp.ok });\n    };\n\n    const apiLogout = async (setSubmitting: (b: boolean) => void) => {\n        setSubmitting(true);\n        let resp = await api.logout();\n        if (resp.ok)\n            logout();\n        setSubmitting(false);\n    };\n\n    const handleSubmit = async (values: any, { resetForm }: FormikHelpers<any>) => {\n        await apiLogin(values);\n        resetForm();\n        return;\n    }\n   \n    const FormView = () =>                \n        <>\n            <div className=\"text-center\">\n                <h1>Login</h1>\n                {\n                    done && !ok && valid === false &&\n                        <div className=\"text-danger mt-4\">Invalid credentials</div>\n                }\n            </div>\n            <div className=\"mt-4\">\n                <Form>\n                    <div className='form-row'>\n                        <div className='form-group col'>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <label>Username</label>\n                                </div>\n                                <div className=\"col w-100 text-right\">\n                                    <ErrorMessage name='username' component='label' className='text-danger'/>\n                                </div>\n                            </div>\n                            <Field name='username' className='form-control'/>\n                        </div>\n                    </div>\n                    <div className='form-row'>\n                        <div className='form-group col'>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <label>Password</label>\n                                </div>\n                                <div className=\"col w-100 text-right\">\n                                    <ErrorMessage name='password' component='label' className='text-danger'/>\n                                </div>\n                            </div>\n                            <Field name='password' type='password' className='form-control'/>\n                        </div>\n                    </div>\n                    <button className='btn btn-primary' type='submit'>Login</button>\n                    <Link to='/signup/'>\n                        <button className='btn btn-warning ml-2'>Signup</button>\n                    </Link>\n                </Form>\n            </div>\n        </>;\n    \n    return (\n        <Formik\n            validationSchema={LoginSchema}\n            initialValues={LoginSchema.default('')}\n            onSubmit={handleSubmit}\n        >\n            {({ isSubmitting, setSubmitting }) => (\n                isSubmitting\n                    ? <Loading message={'Logging ' + (user ? 'out' : 'in') + '...'}/>\n                    : (\n                        user\n                            ?\n                                <Header card>\n                                    <div className=\"text-center\">\n                                        <h1>Logged in as {user.name}!</h1>\n                                        <button\n                                            className=\"btn btn-primary\"\n                                            onClick={() => apiLogout(setSubmitting)}\n                                        >\n                                            Logout\n                                        </button>\n                                    </div>\n                                </Header>\n                            :\n                                <FormView/>\n                    )\n            )}\n        </Formik>\n    );\n}\n\nconst LoginView = ({ user, login, logout }: LoginProps) =>\n    <div className=\"py-4\">\n        <div className=\"row\">\n            <div className=\"col-3 d-none d-lg-block\"></div>\n            <div className=\"col-12 col-lg-6\">\n                <LoginForm login={login} logout={logout} user={user}/>\n            </div>\n            <div className=\"col-3 d-none d-lg-block\"></div>\n        </div>\n    </div>;\n\nexport default LoginView;\n\n/*\n    //onClick={() => {\n    //    setFieldValue('username', 'placeholder bc validation');\n    //    setFieldValue('password', 'placeholder bc validation');\n    //}}\n    \n    const AlreadyLoggedin = () => <>{\n        user && \n            <div className=\"text-center\">\n                <h1>Logged in as {user.name}!</h1>\n                <button\n                    className=\"btn btn-primary\"\n                    type='submit'\n                    onClick={apiLogout}\n                >\n                    Logout\n                </button>\n            </div>\n    }</>;\n\n */\n","import { useState } from 'react';\nimport { FormikHelpers, Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport Loading from '../components/loading';\nimport api from '../api/backend';\n\nconst SignupView = () => (\n    <div className=\"py-4\">\n        <div className=\"row\">\n            <div className=\"col-3 d-none d-lg-block\"></div>\n            <div className=\"col-12 col-lg-6\">\n                <SignupForm/>\n            </div>\n            <div className=\"col-3 d-none d-lg-block\"></div>\n        </div>\n    </div>\n);\n\nexport default SignupView;\n\nconst stringField = () => Yup.string().default('').required('Required');\nconst SignupSchema = Yup.object().shape({\n    username: stringField()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!'),\n    password: stringField()\n        .min(10, 'Too Short!'),\n    confirmPassword: stringField()\n        .when('password', {\n            is: (val: string) => (val && val.length > 0 ? true : false),\n            then: Yup.string().oneOf(\n                [Yup.ref('password')],\n                'Needs to match password'\n            )\n        }),\n    email: stringField().email('Invalid email'),\n});\n\nconst signupFields: Array<[string, string, string]> = [\n// label               , name             , type\n    ['Username'        , 'username'       , 'text'],\n    ['Email'           , 'email'          , 'email'],\n    ['Password'        , 'password'       , 'password'],\n    ['Confirm Password', 'confirmPassword', 'password'],\n]\n\ntype APIResult = string[];\ninterface APIError {\n    email?: APIResult;\n    password?: APIResult;\n    username?: APIResult;\n}\n\nconst SignupForm = () => {\n    const [ createdSuccess, setCreatedSuccess ] = useState(false);\n    const [ submitDone, setDone ] = useState(false);\n\n    const submitUser = async (values: any, { resetForm, setErrors }: FormikHelpers<any>) => {\n        setDone(false);\n        let resp = await api.createUser({\n            username: values.username,\n            password: values.password,\n            email: values.email,\n        });\n\n        if (resp.data && !resp.ok) {\n            // \n            // backend validator sends errors in arrays\n            // since formik error message can only show one string, I'm opting to only show the first error string\n            // prob have to add a way to view multiple errors at some point\n            //\n            let apiErr: APIError = resp.data;\n            setErrors(Object.fromEntries(Object.entries(apiErr).map(([ field, err ]) => [field, err[0]])));\n        } else if (resp.ok) {\n            resetForm();\n            setCreatedSuccess(true);\n        }\n        setDone(true);\n        return;\n    }\n\n    const SignupFormLayout = ({ isSubmitting }: { isSubmitting: boolean }) => (\n        <>\n            <div className=\"text-center\">\n                <h1>Signup</h1>\n            </div>\n            {\n                !createdSuccess && submitDone\n                    ?\n                        <div className=\"text-danger text-center\">\n                            <h1>Whoops!</h1>\n                            <p>There was something wrong, please submit again.</p>\n                        </div>\n\n                    : null\n            }\n            <div className=\"mt-4\">\n                <Form>\n                    {\n                        signupFields.map(([ fieldLabel, fieldName, fieldType ]) => (\n                            <div className='form-row'>\n                                <div className='form-group col'>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <label>{fieldLabel}</label>\n                                        </div>\n                                        <div className=\"col w-100 text-right\">\n                                            <ErrorMessage name={fieldName} component='label' className='text-danger'/>\n                                        </div>\n                                    </div>\n                                    <Field name={fieldName} type={fieldType} className='form-control'/>\n                                </div>\n                            </div>\n                        ))\n                    }\n                    <button className='btn btn-primary' type='submit' disabled={isSubmitting}>Signup</button>\n                    <Link to='/login/'>\n                        <button className='btn btn-warning ml-2'>Back to Login</button>\n                    </Link>\n                </Form>\n            </div>\n        </>\n    );\n    \n    const SignupSuccess = () => (\n       <div className=\"text-center\">\n           <div className=\"mb-2\">\n               <h1>Account creation successful!</h1>\n           </div>\n           <Link to='/login/'>\n               <button className='btn btn-warning ml-2'>Back to Login</button>\n           </Link>\n       </div>\n    );\n\n    return (\n        <Formik\n            validateOnBlur={true}\n            validateOnChange={false}\n            validationSchema={SignupSchema}\n            initialValues={SignupSchema.getDefault()}\n            onSubmit={submitUser}\n        >\n            {({ isSubmitting }) => (\n                isSubmitting\n                    ? <Loading message='Creating new account...' />\n                    : (createdSuccess\n                        ? <SignupSuccess/>\n                        : <SignupFormLayout {...{isSubmitting}}/>)\n            )}\n        </Formik>\n    );\n}\n","import { useLocation } from 'react-router-dom';\n\nimport CardList from '../components/cardlist';\nimport { Header } from '../components/snippets';\nimport debugLog from '../debug';\n\n//const headerPadding = 'rounded text-center sdark-fg p-4';\n\nconst SearchView = () => {\n    const urlParams = new URLSearchParams(useLocation().search);\n    const searchQuery = urlParams.get('q') || '';\n    const cardQuery = { search: encodeURIComponent(searchQuery) };\n \n    debugLog({ SEARCHVIEW: 1, searchQuery });\n    return (\n        <>\n            <Header card>\n                <h3>\n                    Search results for \"{searchQuery}\"\n                </h3>\n            </Header>\n            <CardList query={cardQuery} key={searchQuery}/>\n        </>\n    );\n}\n\nexport default SearchView;\n","import { createContext, useContext, forwardRef, useState, useRef, useReducer } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FieldProps, FormikHelpers, Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport { edgePadding, Header } from '../components/snippets';\nimport Loading from '../components/loading';\nimport { BingoCard, SearchResults, Category } from '../types'\nimport api from '../api/backend';\nimport ApiRender from '../api/render';\n\n//const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n//const interleave = (arr: any, thing: any) => [].concat(...arr.map((n: any) => [n, thing])).slice(0, -1);\n\nconst DEBUG = true;\nconst debugLog = (props: any) => {\n    DEBUG && console.log(props);\n}\n\nconst tileFields = \n    Array(25)\n        .fill(null)\n        .map((_, index) => `tile_${index + 1}`);\n        \nconst formFields = [...tileFields, 'name', 'category'];\n\nconst stringField = (max: number) =>\n    Yup.string()\n        .default('')\n        .required('Cannot be blank.')\n        .max(max, `Cannot be longer than ${max} characters.`);\n\nconst categorySchema =\n    stringField(20)\n        .matches(\n            /^\\w+$/,\n            {\n                message: 'Can only contain letters, numbers and underscores.',\n                excludeEmptyString: true\n            }\n        );\n\nconst cardSchemaShape = Object.fromEntries(\n    ([] as any[]).concat(\n        tileFields.map(field => [field, stringField(200)]),\n        Object.entries({\n            name: stringField(50),\n            category: categorySchema,\n        })\n));\n\nconst cardSchema = Yup.object().shape(cardSchemaShape);\n\ninterface FormRowProps {\n    name: string;\n    label: string;\n    small?: boolean;\n    hidden?: boolean;\n}\n\nconst FormRowIndicator = ({ name, label }: FormRowProps) => (\n    <Field name={name}>\n        {({ meta }: FieldProps) => (\n            !meta.touched\n                ? <div className=\"rounded text-center py-2 sdark-fg\">{label}</div>\n                : <div className={`rounded text-center py-2 text-white bg-sdark-${meta.error ? 'red' : 'green'}`}>{label}</div>\n        )}\n    </Field>\n);\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => (\n    <div ref={ref}>\n        {children}\n    </div>\n));\n\ninterface FormHelperProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    values: { [x: string]: any; };\n}\n\nconst FormHelperContext = createContext<FormHelperProps>({ setFieldValue: () => {}, values: {} });\n\nconst CategorySearchBar = ({ card }: { card?: BingoCard }) => {\n    // 1. State Handling\n    // 2. Sub-Elements\n    // 3. Main Element\n\n    // ============================================================================\n    // ========================= 1. State Handling ================================\n    // ============================================================================\n    \n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown bc category create OR get\n    onToggle should toggle dropdown\n\n    */\n\n    type Action = \n        | { type: 'query',      payload: string }\n        | { type: 'dropdown',   payload: boolean }\n        | { type: 'menuSelect', payload: { query: string; errors: Array<string> } }\n        | { type: 'category',   payload: Category[] }\n        | { type: 'load',       payload: boolean };\n\n    type State = {\n        query: string;\n        errors: Array<string>;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        categories: Category[];\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ CATEGORYSEARCHBAR: 'input check', query, queryRef });\n            if (query && (query === queryRef.current)) {\n                debugLog('searching for categories...');\n                getCategories();\n            } \n        }, 500);\n    }\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ CATEGORYSEARCHBAR: 'reducer', state, action });\n        switch (action.type) {\n            case 'query':\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                    errors: action.payload.length > 0 ? state.errors : [],\n                };\n            case 'dropdown':\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case 'category':\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    categories: action.payload,\n                };\n            case 'menuSelect':\n                let categoryValue = action.payload.errors.length > 0 ? '' : action.payload.query;\n                setFieldValue('category', categoryValue);\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                    errors: action.payload.errors,\n                };\n            case 'load':\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const { setFieldValue, values } = useContext(FormHelperContext);\n    const categoryName: string = values.category;\n    const initState: State = {\n        query: categoryName,\n        showDropdown: false,\n        loading: false,\n        disabled: Boolean(categoryName.length > 0),\n        errors: [],\n        categories: [],\n    };\n\n    const [{ disabled, errors, query, showDropdown, loading, categories }, dispatch] = useReducer(stateReducer, initState);\n    const valid =  errors.length === 0;\n    const showQueryButton = disabled && valid;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({ CATEGORYSEARCHBAR: 'states', query, disabled, errors, categoryName });\n    \n    const getCategories = async () => {\n        dispatch({ type: 'load', payload: true });\n        let { data, ok } = await api.getTopThreeCategories(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: 'category', payload: data });\n        } else {\n            dispatch({ type: 'load', payload: false });\n        }\n    }\n\n    const handleSelect = (eventKey: string | null) => {\n        let errs: Array<string> = [];\n\n        switch (eventKey) {\n            case null:\n                break;\n            case 'QUERY!':\n                try {\n                    categorySchema.validateSync(query);\n                } catch (err) {\n                    errs = err.errors;\n                }\n                dispatch({ type: 'menuSelect', payload: { query, errors: errs } });\n                break;\n            default:\n                dispatch({ type: 'menuSelect', payload: { query: eventKey, errors: errs } });\n        }\n    }\n\n    // ============================================================================\n    // ========================= 2. Sub-Elements ==================================\n    // ============================================================================\n    \n    const LoadingIndicator = () => <>{\n        loading &&\n            <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                    <div className=\"pl-2\">\n                        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </span>\n            </div>\n    }</>;\n\n    const ClearButton = () => <>{\n        !showQueryButton && query.length > 0 &&\n            <div\n                className=\"input-group-append\"\n                style={{ cursor: 'pointer' }}\n                onClick={() => dispatch({ type: 'query', payload: '' })}\n            >\n                <span className=\"input-group-text clear\">\n                    <FontAwesomeIcon icon={faTimes}/>\n                </span>\n            </div>\n    }</>;\n\n    const QueryButton = () => <>{\n        showQueryButton &&\n            <div className=\"input-group-append\">\n                <span className=\"input-group-text clear p-1\">\n                    <div className=\"p-2 rounded text-white bg-sdark-violet align-items-center justify-content-center\">\n                        <Row>\n                            <Col className={card ? '' : 'pr-2'}>\n                                {query}\n                            </Col>\n                            {\n                                !card &&\n                                    <Col className='pl-2'>\n                                        <div\n                                            style={{ cursor: 'pointer' }}\n                                            onClick={() => dispatch({ type: 'menuSelect', payload: { query: '', errors: [] } })}\n                                        >\n                                            <small>\n                                                <FontAwesomeIcon icon={faTimes}/>\n                                            </small>\n                                        </div>\n                                    </Col>\n                            }\n                        </Row>\n                    </div>\n                </span>\n            </div>\n    }</>;\n    \n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className='border-slight-top'/>\n            {\n                categories.length > 0\n                    ?\n                        categories.map(category => (\n                            <Dropdown.Item className='slight-bg' eventKey={category.name}>\n                                {category.name}\n                            </Dropdown.Item>\n                        ))\n\n                    :  \n                        <Dropdown.Item className='slight-bg' eventKey='QUERY!'>\n                            Create new category: {query}\n                        </Dropdown.Item>\n            }\n        </>\n    );\n    \n    const CategoryErrors = () => <>{\n         errors.length > 0 && query.length > 0 &&\n            errors.map(err => (\n                <div className=\"text-sdark-red\"><\n                    small>{err}</small>\n                </div>\n            ))\n    }</>;\n\n    const SuccessIndicator = () =>\n        <div className=\"input-group-prepend\">\n            <span\n                className={`input-group-text ${disabled ? (valid  ? 'success' : 'error') : ''}`}\n            >\n                Category\n            </span>\n        </div>;\n    \n    // ============================================================================\n    // ========================= 3. Main Element ==================================\n    // ============================================================================\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: 'dropdown', payload: !showDropdown })}\n            onSelect={handleSelect}\n        >\n            <div className=\"input-group slight-bg rounded\">\n                <SuccessIndicator/>\n                <QueryButton/>\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? '' : 'Search'}\n                    value={showQueryButton ? '' : query}\n                    onChange={e => dispatch({ type: 'query', payload: e.target.value })}\n                />\n                <ClearButton/>\n                <LoadingIndicator/>\n            </div>\n\n            <div>\n                <CategoryErrors/>\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id='create-category'/>\n            <Dropdown.Menu className='w-100 slight-bg mt-1 px-2'>\n                <DropdownItems/>\n            </Dropdown.Menu>\n        </Dropdown>\n\n    );\n};\n\nconst FormRow = ({ name, label }: FormRowProps) => \n    <Field name={name}>\n        {({ field, meta }: FieldProps) => (\n            <>\n                <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                        <span className={`input-group-text ${meta.touched ? (meta.error ? 'error' : 'success') : ''}`}>\n                            {label}\n                        </span>\n                    </div>\n                    <input type='text' className='form-control' placeholder='Empty' {...field}/>\n                </div>\n                {\n                    meta.touched && meta.error && \n                        <div className=\"text-sdark-red\">\n                            <small>{meta.error}</small>\n                        </div>\n                }\n            </>\n        )}\n    </Field>;\n    \nconst preventEnter = (keyEvent: React.KeyboardEvent<HTMLFormElement>) => {\n    if (keyEvent.key === 'Enter') {\n        keyEvent.preventDefault();\n    }\n}\n    \nconst CardForm = ({ isSubmitting, card }: { isSubmitting: boolean, card?: BingoCard }) =>\n    <Form onKeyDown={preventEnter}>\n        <Header card>\n            <h2>{card ? `Editing \"${card.name}\"` : 'Create New Card'}</h2>\n        </Header>\n        <Row>\n\n            <Col xs={12} lg={5}>\n                <div className=\"p-2\">\n                    <Col className='pb-2 px-0'>\n                        <Row className=\"pb-2 px-0\">\n                            <FormRow name='name' label='Name'/>\n                        </Row>\n                        <Row>\n                            <Col className=\"w-100 px-0\">\n                                <CategorySearchBar card={card}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Row className=\"row-cols-5 pt-2\">\n                        {tileFields.map((field, index) => (\n                            <div className={edgePadding[index]}>\n                                <FormRowIndicator name={field} label={`${index + 1}`}/>\n                            </div>\n                        ))}\n                    </Row>\n                </div>\n            </Col>\n\n            <Col xs={12} lg={7} className='p-0'>\n                <div className=\"p-2\">\n                    {tileFields.map((field, index) => (\n                        <div className={index !== 24 ? 'pb-2' : ''}>\n                            <FormRow name={field} label={`Tile ${index + 1}`}/>\n                        </div>\n                    ))}\n                </div>\n            </Col>\n\n            <Col xs={12}>\n            </Col>\n        </Row>\n        <button\n            className='btn btn-primary'\n            type='submit'\n            disabled={isSubmitting}\n        >\n            Submit\n        </button>\n    </Form>;\n\nconst CardCreateEditLayout = ({ card }: { card?: BingoCard }) => {\n    const [{success, cardName}, setState] = useState<{success?: boolean, cardName?: string}>({});\n    const history = useHistory();\n \n    type ObjectArray<T = any> = {[s: string]: T};\n\n    const defaultValues = (\n        card\n            ? \n                {\n                    ...Object.fromEntries(\n                        formFields.map(field => [ field, (card as ObjectArray)[field] ])\n                    ),\n                    category: card.category.name,\n                }\n\n            : cardSchema.getDefault()\n    );\n    \n    const submitCard = async (values: any, { setErrors, resetForm }: FormikHelpers<any>) => {\n        let formValues = { ...values, category: {name: values.category} };\n        let apiCall = (v: any) => api.createCard(v);\n\n        if (card) {\n            apiCall = (v: any) => api.editCard(card.id, v);\n\n            // only sends changed fields in json\n            // can't change category in edit mode\n            formValues =\n                Object.fromEntries(\n                    Object.entries(formValues)\n                          .filter(([key, value]) =>\n                                  key !== 'category' &&\n                                  value !== (defaultValues as ObjectArray)[key]));\n        }\n        \n        let { data, ok } = await apiCall(formValues);\n\n        if (!ok && data) {\n            setErrors(\n                Object.fromEntries(\n                    Object.entries(data as ObjectArray<string[]>)\n                          .map(([ field, err ]) => [field, err[0]])));\n        } else if (ok && !card) {\n            resetForm();\n        } \n\n        debugLog({ CARDCREATE: 'submitted card', data, ok });\n        setState({ success: ok, cardName: formValues.name });\n        return;\n    };\n\n    debugLog({ CARDCREATE: 'layout render' });\n\n    const formVerb = card ? 'edit' : 'creat';\n    const formVerbCap = formVerb.charAt(0).toUpperCase() + formVerb.slice(1);\n\n    return (\n        success\n            ?\n                <Header card>\n                    <h2 className='mb-4'>\n                        Successfully {formVerb}ed bingo card!\n                    </h2>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => history.go(-1)}\n                    >\n                        Go Back\n                    </button>\n                </Header>\n            :\n                <div className=\"px-2\">\n                    <Formik\n                        validationSchema={cardSchema}\n                        initialValues={defaultValues}\n                        onSubmit={submitCard}\n                    >\n                        {({ isSubmitting, setFieldValue, values }) => \n                            <FormHelperContext.Provider value={{ setFieldValue, values }}>\n                                {isSubmitting\n                                    ? <Loading message={`${formVerbCap}ing new bingo card...`}/>\n                                    : <CardForm {...{isSubmitting, card}}/>}\n                            </FormHelperContext.Provider>}\n                    </Formik>\n                </div>\n    );\n};\n\nconst CardCreateView = () => {\n    const { cardId }: { cardId?: string } = useParams();\n\n    return (\n        cardId\n            ?\n                <ApiRender\n                    apiCall={() => api.getCard(`${cardId}`)}\n                    component={({ data }) => <CardCreateEditLayout card={data}/>}\n                    key={cardId}\n                />\n            :\n                <CardCreateEditLayout/>\n    );\n}\n\nexport default CardCreateView;\n","import { ReactElement, useReducer, useRef, forwardRef } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownItem from 'react-bootstrap/DropdownItem';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { ApiResponse } from '../api/backend';\nimport debugLog from '../debug';\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => (\n    <div ref={ref}>\n        {children}\n    </div>\n));\n\ninterface SearchBarProps {\n    label: string;\n    apiCall: (query: string) => Promise<ApiResponse<any[]>>;\n    //resultMapper: (result: any) => ReactElement<DropdownItem>;\n    resultMapper: (result: any[], query: string) => ReactElement<DropdownItem>[];\n}\n\nconst SearchBar = ({ label, apiCall, resultMapper }: SearchBarProps) => {\n    // 1. StateHandling\n    // 2. SubElements\n    // 3. MainElement\n\n    // ============================================================================\n    // ========================= 1. StateHandling ================================\n    // ============================================================================\n    \n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown after api call\n    onToggle should obv toggle dropdown\n\n    */\n\n    type Action = \n        | { type: 'query',      payload: string }\n        | { type: 'dropdown',   payload: boolean }\n        | { type: 'menuSelect', payload: { query: string } }\n        | { type: 'results',    payload: any[] }\n        | { type: 'load',       payload: boolean };\n\n    type State = {\n        query: string;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        searchResults: any[];\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ SEARCHBAR: 'input check', label, query, queryRef });\n            if (query && (query === queryRef.current)) {\n                debugLog('searching for searchResults...');\n                getResults();\n            } \n        }, 500);\n    }\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ SEARCHBAR: 'reducer', label, state, action });\n        switch (action.type) {\n            case 'query':\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                };\n            case 'dropdown':\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case 'results':\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    searchResults: action.payload,\n                };\n            case 'menuSelect':\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                };\n            case 'load':\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const initState: State = {\n        query: '',\n        showDropdown: false,\n        loading: false,\n        disabled: false,\n        searchResults: [],\n    };\n\n    const [{ disabled, query, showDropdown, loading, searchResults }, dispatch] = useReducer(stateReducer, initState);\n    const showQueryButton = disabled;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({ SEARCHBAR: 'states', label, query, disabled });\n    \n    const getResults = async () => {\n        dispatch({ type: 'load', payload: true });\n        let { data, ok } = await apiCall(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: 'results', payload: data });\n        } else {\n            dispatch({ type: 'load', payload: false });\n        }\n    }\n\n    // ============================================================================\n    // ========================= 2. SubElements ==================================\n    // ============================================================================\n    \n    const LoadingIndicator = () => <>{\n        loading &&\n            <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                    <div className=\"pl-2\">\n                        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </span>\n            </div>\n    }</>;\n\n    const ClearButton = () => <>{\n        !showQueryButton && query.length > 0 &&\n            <div\n                className=\"input-group-append\"\n                style={{ cursor: 'pointer' }}\n                onClick={() => dispatch({ type: 'query', payload: '' })}\n            >\n                <span className=\"input-group-text clear\">\n                    <FontAwesomeIcon icon={faTimes}/>\n                </span>\n            </div>\n    }</>;\n\n    /*\n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className='border-slight-top'/>\n            {searchResults.length > 0\n                ?\n                    searchResults.map(resultMapper)\n\n                :  \n                    <Dropdown.Item className='slight-bg' disabled>\n                        No results found\n                    </Dropdown.Item>}\n        </>\n    );\n     */\n    \n    const DropdownItems = () => <>{resultMapper(searchResults, query)}</>;\n    \n    const SearchBarLabel = () =>\n        <div className=\"input-group-prepend\">\n            <span className='input-group-text'>\n                {label}\n            </span>\n        </div>;\n    \n    // ============================================================================\n    // ========================= 3. MainElement ==================================\n    // ============================================================================\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: 'dropdown', payload: !showDropdown })}\n            onSelect={() => dispatch({ type: 'query', payload: '' })}\n        >\n            <div className=\"input-group slight-bg rounded\">\n                <SearchBarLabel/>\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? '' : 'Search'}\n                    value={showQueryButton ? '' : query}\n                    onChange={e => dispatch({ type: 'query', payload: e.target.value })}\n                />\n                <ClearButton/>\n                <LoadingIndicator/>\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id={`search-bar-${label}`}/>\n            <Dropdown.Menu className='w-100 slight-bg mt-1 px-2'>\n                <DropdownItems/>\n            </Dropdown.Menu>\n        </Dropdown>\n\n    );\n};\n\nexport default SearchBar;\n","import { useState, useEffect, useContext } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\n//import Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport { Link, BrowserRouter as Router, Switch, Route, useHistory, useParams } from 'react-router-dom';\n\nimport { FontAwesomeIcon as FaIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTh, faPen, faCog, faUserCircle, faTimes, faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport HomeView from './views/homeview';\nimport CategoryView from './views/catviewnew';\nimport UserView from './views/userview';\nimport CardView from './views/cardview';\nimport LoginView from './views/loginview';\nimport SignupView from './views/signupview';\nimport SearchView from './views/searchview';\nimport CardCreateView from './views/cardcreateview';\nimport api from './api/backend';\nimport { UserAuthContext } from './context';\nimport { User, UserState, BingoCard } from './types';\nimport SearchBar from './components/searchbar';\n\nimport './solarized.css';\n\nconst DropdownContainer = ({ children }: any, ref: any) => (\n    <div ref={ref}>\n        {children}\n    </div>\n);\n\nconst SearchBarr = () => {\n    const [ searchInput, setSearchInput ] = useState('');\n    const [ showDropdown, setShowDropdown ] = useState(false);\n    const [ searchRoute, setSearchRoute ] = useState('');\n    const hist = useHistory();\n\n    useEffect(() => {\n        if (searchRoute) {\n            hist.push(searchRoute);\n            setSearchRoute('');\n        }\n    }, [hist, searchRoute]);\n \n    const toggleDropdown = (state: boolean = false) => {\n        if (searchInput.length > 0 && !showDropdown)\n            return true;\n        return state;\n    };\n\n    const searchLog = (label: string) => {\n        let spacer = '\\n        ';\n        console.log(`${label}:${spacer}${\n            Object.entries({\n                searchInput: searchInput,\n                searchRoute: searchRoute,\n                showDropdown: showDropdown,\n            }).map(([ text, value ]) => (\n                `${text}: \"${value}\"`\n            )).join(spacer)\n        }`);\n    }\n\n    searchLog('SEARCHBAR DRAW');\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => {\n                searchLog('SEARCHBAR ONTOGGLE');\n                setShowDropdown(toggleDropdown());\n            }}\n            onSelect={(eventKey) => {\n                if (eventKey) {\n                    setSearchInput('');\n                    setShowDropdown(false);\n                    setSearchRoute(`${eventKey}${encodeURIComponent(searchInput)}`);\n                    console.log(`SEARCHROUTE: ${searchRoute}`);\n                }\n            }}\n        >\n            <Dropdown.Toggle as={DropdownContainer} id='search-bar'>\n                <div className=\"input-group\">\n                    <div\n                        className=\"input-group-prepend\"\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <span className=\"input-group-text\">\n                            <FaIcon icon={faSearch}/>\n                        </span>\n                    </div>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search\"\n                        value={searchInput}\n                        onChange={e => {\n                            let inputText = e.target.value;\n                            let showDropdown = false;\n                            \n                            if (inputText.length > 0) {\n                                showDropdown = true;\n                            }\n\n                            setSearchInput(inputText);\n                            setShowDropdown(showDropdown);\n                        }}\n                    />\n                </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className='w-100 mt-2 slight-bg'>\n                {Object.entries({ 'cards': '/search?q=' }).map(([ label, url ]) => (\n                    <Dropdown.Item className='slight-bg' eventKey={url}>\n                        Search for \"{label}\": {searchInput}\n                    </Dropdown.Item>\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nconst Icon = ({ icon }: { icon: any }) => (\n    <h4 className='m-0'>\n        <FaIcon icon={icon}/>\n    </h4>\n);\n\nconst LoginDropdown = () => {\n    const user = useContext(UserAuthContext);\n    const [showDropdown, setDropdown] = useState(false);\n    const toggleDropdown = () => setDropdown(!showDropdown);\n\n    const apiLogout = async () => {\n        let resp = await api.logout();\n    };\n\n    const UserItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                {user ? user.name : 'Not Logged In'}\n            </Dropdown.Item>\n            <Dropdown.Divider/>\n            {\n                user\n                    ?   \n                    <Dropdown.Item\n                        as={Link}\n                        to={{ pathname: `/users/${user.id}/`, state: { userId: user.id } }}\n                    >\n                        <FaIcon icon={faCog}/> Profile\n                    </Dropdown.Item>\n\n                    :\n                    <Dropdown.Item className='slight-bg' as={Link} to='/login/'>Login</Dropdown.Item>\n            }\n        </>\n\n    );\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={toggleDropdown}\n        >\n            <div\n                onClick={toggleDropdown}\n                style={{ cursor: 'pointer' }}\n                className='hover-white'\n            >\n                <Icon icon={faUserCircle}/>\n            </div>\n            <Dropdown.Toggle as={DropdownContainer} id='login-dropdown'/>\n            <Dropdown.Menu align='right' className='slight-bg'>\n                <UserItems/>   \n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nconst TopNavBar = () => {\n    const [showSearch, setSearch] = useState(false);\n    const user = useContext(UserAuthContext);\n    const params = useParams<{ categoryName?: string }>();\n    const { categoryName = '' } = params;\n    console.log({ TOPNAV: 'render', categoryName, params });\n\n    const UserItems = () => <>\n        {\n            user &&\n                <Nav.Item className='pr-3'>\n                    <Nav.Link\n                        as={Link}\n                        to={{\n                            pathname: '/create/',\n                            state: { categoryName },\n                        }}\n                    >\n                        <Icon icon={faPen}/>\n                    </Nav.Link>\n                </Nav.Item>\n        }\n        <Nav.Item>\n            <LoginDropdown/>\n        </Nav.Item>\n    </>;\n    \n    const searchbar = \n        <SearchBar\n            label='Search'\n            apiCall={(query) => api.getTopThreeCards(query)}\n            resultMapper={(result: BingoCard[], query: string) => (\n                result.length > 0\n                    ?\n                        [...result.map(card => \n                            <Dropdown.Item as={Link} to={`/cards/${card.id}/`}>\n                                <FaIcon icon={faTh}/> <FaIcon icon={faPencilAlt}/> {card.name}\n                            </Dropdown.Item>),\n\n                        <Dropdown.Item as={Link} to={`/search/?q=${query}`}>\n                            <FaIcon icon={faSearch}/> Search bingo cards for \"{query}\"\n                        </Dropdown.Item>]\n                    :  \n                        [<Dropdown.Item className='slight-bg' disabled>\n                            No results found\n                        </Dropdown.Item>]\n            )}\n        />;\n    \n    return (\n        <>\n            <Navbar id='desktop-topnav' className='shadow sdark-fg d-none d-lg-block' variant='dark' sticky='top'>\n                <Container>\n                    <Col xs={3}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to='/categories/TrashTaste1/'>TrashTaste1</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6} className='w-100'>\n                        <div className=\"align-items-center justify-content-center\">\n                            {searchbar}\n                        </div>\n                    </Col>\n                    <Col xs={3}>\n                        <Nav className='align-items-center justify-content-end'>\n                            <UserItems/>\n                        </Nav>\n                    </Col>\n                </Container>\n            </Navbar>\n\n            <Navbar id='mobile-topnav' className='shadow sdark-fg d-lg-none' variant='dark' sticky='top'>\n                <Container id='topnav-buttons' className={'w-100 ' + (!showSearch ? '' : 'd-none')}>\n                    <Col xs={6}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to='/categories/TrashTaste1/'>TrashTaste1</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <Nav className='align-items-center justify-content-end'>\n                            <Nav.Item onClick={() => setSearch(true)} className='pr-3'>\n                                <Nav.Link>\n                                    <Icon icon={faSearch}/>\n                                </Nav.Link>\n                            </Nav.Item>\n                            <UserItems/>\n                        </Nav>\n                    </Col>\n                </Container>\n                <Container id=\"topnav-search\" className={'py-1 ' + (showSearch ? '' : 'd-none')}>\n                    <Col xs={1} className='px-2'>\n                        <div onClick={() => setSearch(false)} style={{ cursor: 'pointer' }}>\n                            <Icon icon={faTimes}/>\n                        </div>\n                    </Col>\n                    <Col xs={11} className='px-2'>\n                        {searchbar}\n                    </Col>\n                </Container>\n            </Navbar>\n        </>\n    );\n}\n\nconst App = () => {\n    const [user, setUser] = useState<UserState>(null);\n    const login = (u: User) => setUser(u);\n    const logout = () => setUser(null);\n    //const loc = useLocation();\n \n    useEffect(() => {\n        (async () => {\n            let { data, ok } = await api.getSession();\n            if (ok && data && data.user) {\n                setUser(data.user);\n            }\n        })();\n    }, []);\n    \n    return (\n        <div className='sdark-bg'>\n            <Router>\n                \n                <UserAuthContext.Provider value={user}>\n                    <TopNavBar/>\n                </UserAuthContext.Provider>\n                \n                <Container>\n                    <div className=\"py-2\">\n                        <Switch>\n                            <Route exact path='/'>\n                                <HomeView/>\n                            </Route>\n                            <Route exact path='/signup/'>\n                                <SignupView/>\n                            </Route>\n                            <Route exact path='/login/'>\n                                <LoginView\n                                    login={login}\n                                    logout={logout}\n                                    user={user}\n                                />\n                            </Route>\n                            <UserAuthContext.Provider value={user}>\n                                <Route exact path='/search/'>\n                                    <SearchView/>\n                                </Route>\n                                <Route path='/categories/:categoryName/'>\n                                    <CategoryView/>\n                                </Route>\n                                <Route path='/users/:userId/'>\n                                    <UserView/>\n                                </Route>\n                                <Route exact path='/cards/:cardId/edit/'>\n                                    <CardCreateView/>\n                                </Route>\n                                <Route exact path='/cards/:cardId/'>\n                                    <CardView/>\n                                </Route>\n                                <Route path='/create/'>\n                                    <CardCreateView/>\n                                </Route>\n                                <Route path='/profile/'>\n                                    <UserView/>\n                                </Route>\n                            </UserAuthContext.Provider>\n                            <Route>\n                                <h2 className=\"text-sdark-red text-center\">Page Not Found.</h2>\n                            </Route>\n                        </Switch>\n                    </div>\n                </Container>\n            </Router>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}