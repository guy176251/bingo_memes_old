{"version":3,"sources":["views/homeview.tsx","debug.tsx","api/render.tsx","components/pagination.tsx","api/backend.ts","context.tsx","components/cardinfo.tsx","components/snippets.tsx","components/cardlist.tsx","views/categoryview.tsx","views/userview.tsx","components/navbar.tsx","views/cardview.tsx","components/loading.tsx","views/loginview.tsx","views/signupview.tsx","views/searchview.tsx","views/cardcreateview.tsx","components/searchbar.tsx","index.tsx"],"names":["HomeView","className","debugLog","props","console","log","ApiRender","apiCall","loadingMessage","component","useState","data","ok","setResp","useEffect","a","APIRENDER","respData","RespStatus","detail","Spinner","animation","role","Component","PageContent","getDefaultSort","params","get","getRange","start","end","Array","fill","map","_","i","Pagination","pageSize","itemCount","label","header","buttonShape","pageCount","Math","ceil","loc","useLocation","paginationUrl","pathname","urlParams","URLSearchParams","search","currentSort","pageNum","parseInt","delete","urlParamsString","toString","PageItem","button","index","color","innerButton","set","to","sortDropdown","Dropdown","Toggle","id","Menu","ItemText","Divider","option","Item","disabled","as","Link","PageButtons","rowSize","paginationItems","currentPage","delta","range","round","pages","min","withDots","value","pair","length","concat","pagination","forEach","thing","push","slice","item","rPad","disp","endIndex","toApiQuery","location","query","orderingParams","new","popular","hot","Object","entries","key","cookies","Cookies","defaultOptions","credentials","defaultHeaders","apiGetPostPut","url","put","BACKEND","options","method","keys","headers","body","JSON","stringify","apiResp","apiDelete","fetch","resp","json","api","login","logout","editCard","cardId","cardData","deleteCard","createUser","userData","createVote","voteData","createCard","getSession","getCard","getUser","userId","getCategory","categoryName","getCardList","getTopThreeCategories","name","UserAuthContext","createContext","minute","hour","day","month","times","year","dateStr","isoString","now","Date","date","parse","diff","getTime","str","time","floor","s","sendVote","card","up","VoteButtons","user","useContext","inactiveColor","upColor","downColor","u","d","t","upvoted","voteAdjust","setUp","down","setDown","scoreColor","setScoreColor","changeVoteState","activeColor","state","setState","currentUpColor","currentDownColor","voteScore","loggedIn","Boolean","Col","xs","icon","faArrowUp","voteAction","score","faArrowDown","VoteButtonSingle","onClick","style","cursor","CardInfo","link","history","useHistory","showModal","setModal","toggleModal","userLink","author","categoryLink","category","cardLinkUrl","CardLink","CardDetails","created_at","CardControls","Row","faEdit","faTrash","DeleteModal","Modal","show","dialogAs","Dialog","centered","Header","closeButton","Body","Footer","go","children","infoPadding","max","gridPadding","headerItem","centeredItems","InfoHeader","subject","info","tidbit","edgePadding","paddingIndexes","tileIndex","padding","pad","includes","padIndex","indexOf","splice","join","parseDate","toLocaleString","CardLayout","PaginationThing","count","page_size","results","CardList","CategoryHeader","CategoryView","useParams","UserHeader","UserView","scrollToY","y","window","scrollTo","top","behavior","scrollToTop","scrollToBottom","document","scrollHeight","NavBarUnit","spacer","buttons","navItem","text","onclick","Nav","Navbar","fixed","undefined","Container","faQuestion","faHandPointDown","faHandPointUp","things","AppNavBar","solutionIndexes","edge","vert","n","horiz","diag1","diag2","tileHover","tile","setCard","navigator","maxTouchPoints","tiles","hovered","tileClick","setSolution","clicked","newSolution","some","line","every","filter","checkForBingo","colorTheTile","clickedColor","hoverColor","passedCard","cardInfo","tileFields","field","startsWith","Reflect","deleteProperty","tileSearchQuery","setTileSearchQuery","solution","topToggled","setTopToggled","inputRef","useRef","solved","hideTop","current","focus","faSearch","faExpandAlt","filteredTiles","toLowerCase","md","lg","InputGroup","Form","Control","placeholder","type","onChange","e","target","onFocus","ref","Append","Button","variant","faTimes","onMouseEnter","onMouseLeave","href","resetBingo","CardView","Loading","message","LoginView","LoginSchema","Yup","shape","username","required","password","LoginForm","statusCode","apiLogin","apiLogout","handleSubmit","values","resetForm","validationSchema","initialValues","default","onSubmit","isSubmitting","setFieldValue","SignupView","stringField","SignupSchema","confirmPassword","when","is","val","then","oneOf","email","signupFields","SignupForm","createdSuccess","setCreatedSuccess","submitDone","setDone","submitUser","setErrors","apiErr","fromEntries","SignupFormLayout","fieldLabel","fieldName","fieldType","SignupSuccess","validateOnBlur","validateOnChange","getDefault","SearchView","searchQuery","cardQuery","encodeURIComponent","SEARCHVIEW","formFields","categorySchema","matches","excludeEmptyString","cardSchemaShape","cardSchema","FormRowIndicator","meta","touched","error","DropdownContainer","forwardRef","FormHelperContext","CategorySearchBar","initState","showDropdown","loading","errors","categories","useReducer","action","CATEGORYSEARCHBAR","setTimeout","queryRef","getCategories","payload","categoryValue","dispatch","valid","showQueryButton","LoadingIndicator","ClearButton","QueryButton","DropdownItems","eventKey","CategoryErrors","err","SuccessIndicator","onToggle","onSelect","errs","validateSync","FormRow","preventEnter","keyEvent","preventDefault","CardForm","onKeyDown","CardCreateEditLayout","success","cardName","defaultValues","submitCard","formValues","v","CARDCREATE","formVerb","formVerbCap","charAt","toUpperCase","Provider","CardCreateView","SearchBar","resultMapper","SEARCHBAR","getResults","searchResults","SearchBarLabel","Icon","LoginDropdown","setDropdown","toggleDropdown","UserItems","faCog","faUserCircle","align","TopNavBar","showSearch","setSearch","TOPNAV","faPen","searchbar","result","sticky","App","setUser","exact","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6886cc51.chunk.js","sourcesContent":["const HomeView = () => (\n  <div className=\"jumbotron bg-white\">\n    <h1 className=\"display-4\">\n      Welcome to SITENAME\n    </h1>\n    <p className=\"lead\">\n      A place to create and share bingo meme templates\n    </p>\n    <hr className=\"my-4\" />\n    \n    <blockquote className=\"blockquote text-right mt-5\">\n      <p className=\"mb-0\">\n        Wow, I've never seen such a revolutionary bingo layout before! My grandparents are going to love this feature!\n      </p>\n      <footer className=\"blockquote-footer\">Totally real person</footer>\n    </blockquote>\n    \n    <blockquote className=\"blockquote text-right mt-5\">\n      <p className=\"mb-0\">\n        Man, bingo was boring and clunky before I discovered this website. Now it isn't clunky anymore!\n      </p>\n      <footer className=\"blockquote-footer\">Mentally fading senior citizen</footer>\n    </blockquote>\n\n    <blockquote className=\"blockquote text-right mt-5\">\n      <p className=\"mb-0\">\n        Top text\n      </p>\n      <footer className=\"blockquote-footer\">Bottom text</footer>\n    </blockquote>\n  </div>\n);\n\nexport default HomeView;\n","const DEBUG = true;\nconst debugLog = (props: any) => {\n    DEBUG && console.log(props);\n}\n\nexport default debugLog;\n","import { useEffect, useState } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport { ApiResponse } from './backend';\nimport debugLog from '../debug';\n\ninterface ComponentProps {\n    data: any;\n}\n\ninterface ApiRenderProps {\n    apiCall: () => Promise<ApiResponse>;\n    component: React.FunctionComponent<ComponentProps>;\n    loadingMessage?: string;\n}\n\n\nconst ApiRender = ({ apiCall, loadingMessage, component }: ApiRenderProps) => {\n    const [{ data, ok }, setResp] = useState<ApiResponse>({ data: null, ok: true });\n\n    useEffect(() => {\n        (async () => {\n            debugLog({ APIRENDER: 'getting data', data, ok });\n            let respData = await apiCall();\n            setResp(respData);\n        })();\n    }, []);\n\n    const RespStatus = () => (\n         (data?.detail || !ok)\n            ?   <div className='text-sdark-red text-center my-4'>\n                    <h3>{`Error` + (data?.detail ? `: ${data.detail}` : '')}</h3>\n                </div>\n\n            :   <div className='text-center mt-4'>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                    {\n                        loadingMessage &&\n                            <div className=\"mt-2\">\n                                {loadingMessage}\n                            </div>\n                    }\n                </div>\n    );\n    \n    let Component = component;\n\n    const PageContent = () => (\n        data && (!data.detail && ok)\n            ? <Component data={data}/>\n            : <RespStatus/>\n    );\n \n    return  <PageContent/>;\n}\n\nexport default ApiRender;\n","import { ReactElement } from 'react';\nimport { Link, useLocation } from \"react-router-dom\";\nimport { Location } from 'history';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nconst getDefaultSort = (params: URLSearchParams) => params.get('sort') || 'hot';\nconst getRange = (start: number, end: number) => {\n    return Array(end - start + 1)\n        .fill(0)\n        .map((_, i) => i + start);\n};\nconst pagination = (currentPage: number, pageCount: number) => {\n    let delta: number;\n    if (pageCount <= 7) {\n        // delta === 7: [1 2 3 4 5 6 7]\n        delta = 7;\n    } else {\n        // delta === 2: [1 ... 4 5 6 ... 10]\n        // delta === 4: [1 2 3 4 5 ... 10]\n        delta = currentPage > 4 && currentPage < pageCount - 3 ? 2 : 4;\n    }\n\n    const range = {\n        start: Math.round(currentPage - delta / 2),\n        end: Math.round(currentPage + delta / 2)\n    };\n\n    if (range.start - 1 === 1 || range.end + 1 === pageCount) {\n        range.start += 1;\n        range.end += 1;\n    }\n\n    let pages: any =\n        currentPage > delta\n            ? getRange(Math.min(range.start, pageCount - delta), Math.min(range.end, pageCount))\n            : getRange(1, Math.min(pageCount, delta + 1));\n\n    const withDots = (value: any, pair: any) => (pages.length + 1 !== pageCount ? pair : [value]);\n\n    if (pages[0] !== 1) {\n        pages = withDots(1, [1, 0]).concat(pages);\n    }\n\n    if (pages[pages.length - 1] < pageCount) {\n        pages = pages.concat(withDots(pageCount, [0, pageCount]));\n    }\n\n    return pages;\n}\n\ninterface PaginationProps {\n    itemCount: number;\n    pageSize: number;\n    label: string;\n    header?: boolean;\n}\n\nconst Pagination = ({ pageSize, itemCount, label, header = false }: PaginationProps) => {\n    const buttonShape = 'w-100 rounded p-2 text-center';\n    const pageCount = Math.ceil(itemCount / pageSize);\n\n    const loc = useLocation();\n    const paginationUrl = loc.pathname;\n    const urlParams = new URLSearchParams(loc.search);\n    const currentSort = getDefaultSort(urlParams);\n    const pageNum = parseInt(urlParams.get('page') || '1');\n    urlParams.delete('page');\n    const urlParamsString = urlParams.toString();\n\n    const PageItem = ({ index = 0 }: { index?: number }) => {\n        const color = \n            index === pageNum\n                ? 'bg-sdark-orange text-white'\n                : 'sdark-fg';\n\n        const innerButton =\n            <div className={`${buttonShape} ${color} ${(index ? 'page-btn' : '')}`}>\n                {index ? index : '...'}\n            </div>;\n\n        let button: ReactElement;\n\n        if (index && index !== pageNum) {\n            let params = new URLSearchParams(urlParamsString);\n            params.set('page', `${index}`);\n            button =\n                <Link to={`${paginationUrl}?${params.toString()}`}>\n                    {innerButton}\n                </Link>;\n        } else {\n            button = innerButton;\n        }\n\n        return button;\n    }\n\n    const sortDropdown = (\n        <Dropdown>\n            <Dropdown.Toggle id='sort-dropdown' className={`sdark-fg border-0 p-0 w-100 ${buttonShape}`}>\n                sort: {currentSort}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className='w-100 slight-bg'>\n                <Dropdown.ItemText>Sort by</Dropdown.ItemText>\n                <Dropdown.Divider/>\n                {['new', 'popular', 'hot'].map((option) => {\n                    urlParams.set('sort', option);\n                    return (\n                        option === currentSort\n                            ? <Dropdown.Item disabled>\n                                  {option}\n                              </Dropdown.Item>\n\n                            : <Dropdown.Item\n                                  as={Link}\n                                  to={`${paginationUrl}?${urlParams.toString()}`}\n                              >\n                                  {option}\n                              </Dropdown.Item>\n                    )})}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n\n    \n    const PageButtons = ({ rowSize }: { rowSize: number }) => {\n        let paginationItems: (number | null)[] = pagination(pageNum, pageCount);\n\n        if (paginationItems.length < rowSize)\n            Array(rowSize - paginationItems.length).fill(null)\n                .forEach(thing => paginationItems.push(thing));\n\n        paginationItems.push(paginationItems.slice(-1)[0]);\n        \n        return (\n            <div className={`row row-cols-${rowSize}`}>\n                {paginationItems.map((item, index) => {\n                    let rPad = 'pr-2';\n                    let disp = '';\n                    let endIndex = rowSize - 1;\n\n                    if (index > endIndex) {\n                        disp = 'd-none d-lg-block';\n                    }\n                    else if (index === endIndex) {\n                        disp = 'd-lg-none';\n                        rPad = '';\n                    }\n\n                    return (\n                        <div className={`col p-0 ${disp}`}>\n                            <div className={rPad}>\n                                {\n                                    item !== null &&\n                                        <PageItem index={item}/>\n                                }\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        ); \n    }\n\n    return (\n        <div className=\"row\">\n\n            {\n                header &&\n                    <>\n                        <div className=\"col-12 d-lg-none\">\n                            <div className=\"row\">\n                                <div className=\"col-6 p-0\">\n                                    <div className='pr-1'>\n                                        <div className={`sdark-fg ${buttonShape}`}>\n                                            {itemCount} {label}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"pl-1 col-6 p-0\">\n                                    {sortDropdown}\n                                </div>\n                            </div>\n                        </div>\n                \n                        <div className=\"col-12 d-lg-none p-0\">\n                            <hr className=\"sdark-spacer my-2\" />\n                        </div>\n                    </>\n            }\n            \n            <div className=\"col-12 col-lg-6\">\n                <PageButtons rowSize={7}/>\n            </div>\n\n            <div className=\"d-none d-lg-block col-3\">\n            </div>\n            \n            <div className=\"d-none d-lg-block col-3\">\n                {\n                    header &&                 \n                        <div className=\"row\">\n                            <div className=\"col-6 p-0\">\n                                <div className='pl-2 pr-1'>\n                                    <div className={`sdark-fg ${buttonShape}`}>\n                                        {itemCount} {label}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"pl-1 col-6 p-0\">\n                                {sortDropdown}\n                            </div>\n                        </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Pagination;\n\nexport const toApiQuery = (location: Location, query: object = {}) => {\n    let urlParams = new URLSearchParams(location.search);\n    let orderingParams: { [s: string]: string } = {\n        new: '-created_at',\n        popular: '-best,-created_at',\n        hot: '-hot,-created_at',\n    };\n\n    urlParams.set('ordering', orderingParams[getDefaultSort(urlParams)]);\n    urlParams.delete('sort');\n\n    Object.entries(query).forEach(([ key, value ]) => urlParams.set(key, value));\n    \n    return urlParams.toString();\n};\n","import Cookies from 'universal-cookie';\nimport { Location } from 'history';\n\nimport { toApiQuery } from '../components/pagination';\nimport { SearchResults, Category } from '../types';\nimport debugLog from '../debug';\n\n// here for pasting purposes\n// import api from '../api/backend';\n\nconst cookies = new Cookies();\nconst baseUrl = '/api';\nconst defaultOptions = { credentials: 'same-origin' };\nconst defaultHeaders = () => ({\n    'X-CSRFToken' : cookies.get('csrftoken'),\n});\n\nexport interface ApiResponse<T = any> {\n    data: T | null;\n    ok: boolean;\n}\n\nconst apiGetPostPut = async <T = any>(url: string, data: object = {}, put: boolean = false): Promise<ApiResponse<T>> => {\n    debugLog({ BACKEND: 1, url, data });\n    let options: any = { ...defaultOptions, method: 'GET' };\n\n    if (Object.keys(data).length > 0) {\n        options = {\n            ...options,\n            method: put ? 'PUT' : 'POST',\n            headers: {\n                ...defaultHeaders(),\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data),\n        }\n    } \n\n    return await apiResp<T>(url, options);\n};\n\nconst apiDelete = async <T = any>(url: string): Promise<ApiResponse<T>> => {\n    return await apiResp<T>(url, { ...defaultOptions, method: 'DELETE', headers: {...defaultHeaders()} });\n}\n\nconst apiResp = async <T = any>(url: string, options: any): Promise<ApiResponse<T>> => {\n    let resp = await fetch(`${baseUrl}${url}`, options);\n    let respData: T | null = null;\n\n    try { respData = await resp.json() }\n    catch {}\n\n    return {\n        data: respData,\n        ok: resp.ok,\n    };\n}\n\ninterface VoteData {\n    card: { id: number };\n    up: boolean;\n}\n\ninterface UserData {\n    username: string;\n    password: string;\n    email: string;\n}\n\nconst api = {\n    login(credentials: object) {\n        return apiGetPostPut('/login/', credentials);\n    },\n    logout() {\n        return apiGetPostPut('/logout/');\n    },\n\n    // PUT\n    editCard(cardId: number, cardData: object) {\n        return apiGetPostPut(`/cards/${cardId}/`, cardData, true);\n    },\n\n    // DELETE\n    deleteCard(cardId: number) {\n        return apiDelete(`/cards/${cardId}/`);\n    },\n    \n    // POST\n    createUser(userData: UserData) {\n        return apiGetPostPut('/signup/', userData);\n    },\n    createVote(voteData: VoteData) {\n        return apiGetPostPut('/votes/', voteData);\n    },\n    createCard(cardData: object) {\n        return apiGetPostPut('/cards/', cardData);\n    },\n\n    // GET\n    getSession() {\n        return apiGetPostPut('/session/');\n    },\n    getCard(cardId: string) {\n        return apiGetPostPut(`/cards/${cardId}/`);\n    },\n    getUser(userId: string) {\n        return apiGetPostPut(`/users/${userId}/`);\n    },\n    getCategory(categoryName: string) {\n        return apiGetPostPut(`/categories/${categoryName}/`);\n    },\n    getCardList(location: Location, query: object = {}) {\n        return apiGetPostPut(`/cards/?${toApiQuery(location, query)}`);\n    },\n    getTopThreeCategories(name: string) {\n        return apiGetPostPut<SearchResults<Category>>(`/categories?search=${name}`);\n    },\n};\n\nexport default api;\n","import { createContext } from 'react';\nimport { UserState } from './types';\n\nexport const UserAuthContext = createContext<UserState>(null);\n","import { useState, useContext } from 'react';\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\n//import Button from 'react-bootstrap/Button';\n\nimport { FontAwesomeIcon as FaIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faEdit, faArrowUp, faArrowDown, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nimport { BingoCard, UserState } from '../types'\nimport { UserAuthContext } from '../context';\nimport api from '../api/backend';\n\nconst minute = 1000 * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst month = day * 31;\nconst year = month * 12;\nconst times: { [s: string]: number } = {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n}\n\nconst dateStr = (isoString: string) => {\n    var now = new Date(Date.now());\n    var date = new Date(Date.parse(isoString));\n    var diff = now.getTime() - date.getTime();\n \n    for (const str in times) {\n        let time = times[str];\n        if (diff >= time) {\n            let value = Math.floor(diff / time);\n            value = time === minute ? value % 60 : value;\n            let s = value > 1 ? 's' : '';\n            return `${value} ${str}${s} ago`;\n        }\n    }\n\n    return 'just now';\n}\n\nconst sendVote = async (card: BingoCard, up: boolean) => {\n    await api.createVote({ card: { id: card.id }, up: up });\n}\n\ninterface VoteButtonsProps {\n    card: BingoCard;\n}\n\nconst VoteButtons = ({ card }: VoteButtonsProps) => {\n    const user = useContext(UserAuthContext);\n    const inactiveColor = 'sdark-fg';\n    const upColor = 'sdark-orange';\n    const downColor = 'sdark-violet';\n\n    var u = false;\n    var d = false;\n    var a = 0;\n    var t = `text-${inactiveColor}`;\n    if (card.upvoted !== null) {\n        a = card.upvoted ? -1 : 1;\n        if (card.upvoted) {\n            u = true;\n            t = `text-${upColor}`;\n        }\n        else {\n            d = true;\n            t = `text-${downColor}`;\n        }\n    }\n    \n    var voteAdjust = a;\n    const [up, setUp] = useState(u);\n    const [down, setDown] = useState(d);\n    const [scoreColor, setScoreColor] = useState(t);\n    \n    const changeVoteState = (\n        activeColor: string,\n        state: boolean,\n        setState: (b: boolean) => void\n    ) => {\n        \n        setUp(false);\n        setDown(false);\n        setState(!state);\n        setScoreColor('text-' + (!state ? activeColor : inactiveColor));\n    };\n\n    const upvoteClick = () => {\n        changeVoteState(upColor, up, setUp);\n        sendVote(card, true);\n    }\n    const downvoteClick = () => {\n        changeVoteState(downColor, down, setDown);\n        sendVote(card, false);\n    }\n\n    var currentUpColor = up ? upColor : inactiveColor;\n    var currentDownColor = down ? downColor : inactiveColor;\n\n    var voteScore = 0;\n    if (up && !down)\n        voteScore = 1;\n    else if (down && !up)\n        voteScore = -1;\n \n    voteScore += voteAdjust;\n    var loggedIn = Boolean(user);\n    // 🡅 🡇\n    return (\n        <Col xs={2} className='border-sdark-right text-center'>\n            <VoteButtonSingle\n                icon={faArrowUp}\n                color={currentUpColor}\n                loggedIn={loggedIn}\n                voteAction={upvoteClick}\n                user={user}\n            />\n            <div className={`my-1 ${scoreColor}`}>\n                <h5>{card.score + voteScore}</h5>\n            </div>\n            <VoteButtonSingle\n                icon={faArrowDown}\n                color={currentDownColor}\n                loggedIn={loggedIn}\n                voteAction={downvoteClick}\n                user={user}\n            />\n        </Col>\n    );\n}\n\ninterface VoteButtonSingleProps {\n    icon: IconDefinition;\n    color: string;\n    loggedIn: boolean;\n    voteAction: () => void;\n    user: UserState;\n}\n\nconst VoteButtonSingle = ({ icon, color, loggedIn, voteAction, user }: VoteButtonSingleProps) =>\n    <div\n        className={`text-${color} ${user ? 'vote-btn' : ''} p-1 rounded`}\n        onClick={loggedIn ? voteAction : () => {}}\n        style={loggedIn ? { cursor: 'pointer' } : {}}\n    >\n        <FaIcon icon={icon} />\n    </div>;\n\ninterface CardInfoProps {\n    card: BingoCard;\n    link?: boolean;\n}\n\nconst CardInfo = ({ card, link }: CardInfoProps) => {\n    const history = useHistory();\n    const [showModal, setModal] = useState(false);\n    const user = useContext(UserAuthContext);\n    const toggleModal = () => setModal(!showModal);\n    //const goToEdit = () => history.push({ pathname: `/cards/${card.id}/edit/`, state: { cardId: card.id } });\n\n    const userLink = <Link to={`/users/${card.author.id}/`}>{card.author.name}</Link>;\n    const categoryLink = <Link to={`/categories/${card.category.name}/`}>{card.category.name}</Link>;\n    const cardLinkUrl = `/cards/${card.id}/`;\n\n    //const cardLink = (\n    //    <Link to={{\n    //        pathname: cardLinkUrl,\n    //        state: {\n    //            card: card\n    //        },\n    //    }}>\n    //        <h5>\n    //            {card.name}\n    //        </h5>\n    //    </Link>\n    //);\n\n    const CardLink = () => (\n        link\n            ?\n            <Link to={cardLinkUrl}>\n                <h5>{card.name}</h5>\n            </Link>\n\n            :\n            <h5>{card.name}</h5>\n    );\n\n    const CardDetails = () => \n        <Col>\n            <CardLink/>\n            <p className='text-sdark-fg'>\n                submitted {dateStr(card.created_at)} by {userLink} to {categoryLink}\n            </p>\n        </Col>;\n        \n    const CardControls = () => <>{\n        user && card.author.id === user.id &&\n            <Col xs={1} className='border-sdark-left text-center'>\n                <Row className=\"d-flex justify-content-center align-items-center h-50\">\n                    <Link to={`/cards/${card.id}/edit/`}>\n                        <div className=\"text-sdark-red\">\n                            <FaIcon icon={faEdit}/>\n                        </div>\n                    </Link>\n                </Row>\n                <Row className=\"d-flex justify-content-center align-items-center h-50\">\n                    <div\n                        className=\"text-sdark-red\"\n                        style={{ cursor: 'pointer' }}\n                        onClick={toggleModal}\n                    >\n                        <FaIcon icon={faTrash}/>\n                    </div>\n                </Row>\n            </Col>\n    }</>;\n\n    const DeleteModal = () =>\n        <Modal\n            show={showModal}\n            dialogAs={props =>\n                <Modal.Dialog centered>\n                    <div {...props} className=\"modal-content rounded slight-bg\">\n                    </div>\n                </Modal.Dialog>\n            }\n        >\n            <Modal.Header closeButton>\n                Delete Bingo Card\n            </Modal.Header>\n            <Modal.Body>\n                Are you sure you want to delete bingo card \"{card.name}\"?\n            </Modal.Body>\n            <Modal.Footer>\n                <button\n                    className=\"btn btn-danger\"\n                    onClick={async () => {\n                        await api.deleteCard(card.id);\n                        history.go(0);\n                    }}\n                >\n                    Yes\n                </button>\n                <button\n                    className=\"btn btn-primary\"\n                    onClick={toggleModal}\n                >\n                    No\n                </button>\n            </Modal.Footer>\n        </Modal>;\n    \n    return (\n        <div className=\"p-3 rounded sdark-fg\">\n            <Row>\n                <VoteButtons card={card}/>\n                <CardDetails/>\n                <CardControls/>\n                <DeleteModal/>\n            </Row>\n        </div>\n    );\n}\n\nexport default CardInfo;\n","import { ReactNode } from 'react';\n\ninterface HeaderProps {\n    card?: boolean;\n    children: ReactNode;\n}\n\nexport const Header = ({ card, children }: HeaderProps) => (\n    <div className=\"row\">\n        <div className=\"w-100\">\n            <div className=\"row\">\n                <div className=\"col-2 d-none d-lg-block\"/>\n                <div className=\"col-12 col-lg-8\">\n                    <div>\n                        {card\n                            ?\n                                <div className=\"py-4 text-center rounded sdark-fg m-2\">\n                                    {children}\n                                </div>\n                            :\n                                children}\n                    </div>\n                </div>\n                <div className=\"col-2 d-none d-lg-block\"/>\n            </div>\n        </div>\n    </div>\n);\n\ninterface InfoHeaderProps {\n    subject: string;\n    info: ReactNode[];\n}\n\nconst infoPadding = (index: number, max: number) => {\n    switch (index) {\n        case 0:\n            return `pb-${gridPadding}`;\n        case max:\n            return `pt-${gridPadding}`;\n        default:\n            return `py-${gridPadding}`;\n    }\n}\n\nconst gridPadding = 1;\nconst headerItem = 'rounded text-center sdark-fg p-3 w-100';\nconst centeredItems = 'h-100 d-flex align-items-center justify-content-center';\n\nexport const InfoHeader = ({ subject, info }: InfoHeaderProps) => (\n    <Header>\n\n        <div className=\"p-2\">\n            <div className=\"row\">\n                <div className={`col-8 pr-${gridPadding}`}>\n                    <div className={`${centeredItems} ${headerItem}`}>\n                        <h3>\n                            {subject}\n                        </h3>\n                    </div>\n                </div>\n                <div className={`col-4 pl-${gridPadding}`}>\n                    <div>\n                        <div className=\"col\">\n                            {\n                                info.map((tidbit, index) => (\n                                    <div className={`row ${infoPadding(index, info.length - 1)}`}>\n                                        <div className={`${headerItem} w-100`}>\n                                            {tidbit}\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"pt-2 px-2 d-none\">\n            <div className=\"row\">\n                <div className={`col pb-${gridPadding}`}>\n                    <div className={headerItem}>\n                        <div className=\"p-2\">\n                        <h2>\n                            {subject}\n                        </h2>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row row-cols-2\">\n                {\n                    info.map((tidbit, index) => (\n                        <div className={`col py-${gridPadding} ${(index % 2 === 0 ? 'pr' : 'pl')}-${gridPadding}`}>\n                            <div className={`${centeredItems} ${headerItem}`}>\n                                {tidbit}\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        </div>\n      \n    </Header>\n);\n\nexport const edgePadding: string[] = (() => {\n    let paddingIndexes: { [s: string]: number[] } = {\n        'pt-1': [1, 2, 3, 4, 5],      // top\n        'pr-1': [5, 10, 15, 20, 25],  // right\n        'pl-1': [1, 6, 11, 16, 21],   // left\n        'pb-1': [21, 22, 23, 24, 25], // bottom\n    }\n\n    return Array(25)\n        .fill(0)\n        .map((_, tileIndex) => {\n            tileIndex++;\n            let padding = ['pt-1', 'pb-1', 'pl-1', 'pr-1'];\n\n            Object.entries(paddingIndexes).forEach(([ pad, indexes ]) => {\n                if (indexes.includes(tileIndex)) {\n                    let padIndex = padding.indexOf(pad);\n                    padding.splice(padIndex, 1);\n                }\n            });\n\n            return padding.join(' ');\n        })\n})();\n\nexport const parseDate = (s: string) => {\n    let date = new Date(Date.parse(s));\n    return date.toLocaleString();\n};\n","import { useLocation } from 'react-router-dom';\n\nimport Pagination from './pagination';\nimport CardInfo from './cardinfo';\n\nimport { BingoCard } from '../types';\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\nimport { Header } from '../components/snippets';\n\ninterface CardListProps {\n    query: object;\n}\n\nconst CardList = ({ query }: CardListProps) => {\n    let location = useLocation();\n\n    return (\n        <ApiRender\n            apiCall={() => api.getCardList(location, query)}\n            component={CardLayout}\n        />\n    );\n}\n\ninterface CardResults {\n    count: number;\n    page_size: number;\n    results: BingoCard[];\n}\n\nconst CardLayout = ({ data }: { data: CardResults }) => {\n\n    const PaginationThing = ({ header }: { header?: boolean }) =>\n        <div className=\"p-2\">\n            <Pagination\n                itemCount={data.count}\n                pageSize={data.page_size}\n                label='cards'\n                header={header}\n            />\n        </div>;\n\n    return (\n        data.count === 0\n            ?\n                <Header card>\n                    <h3>No results found.</h3>\n                </Header>\n            :\n                <>\n                    <PaginationThing header />\n                    <div className='row row-cols-1 row-cols-lg-2'>\n                        {data.results.map(card => (\n                            <div className=\"col p-2\">\n                                <CardInfo card={card} link/>    \n                            </div>\n                        ))}\n                    </div>\n                    <PaginationThing />\n                </>\n    );\n};\n\nexport default CardList;\n","import { Link, useParams } from 'react-router-dom';\n\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\nimport { Category } from '../types';\nimport CardList from '../components/cardlist';\nimport { InfoHeader, parseDate } from '../components/snippets';\n\nconst CategoryView = () => {\n    const { categoryName }: { categoryName: string } = useParams();\n\n    return (\n        <ApiRender\n            apiCall={() => api.getCategory(categoryName)}\n            component={CategoryHeader}\n            key={categoryName}\n        />\n    );\n}\n\nconst CategoryHeader = ({ data }: { data: Category }) => (\n    <>\n        <InfoHeader\n            subject={`category: ${data.name}`}\n            info={[\n                <>author: <Link to={`/users/${data.author.id}/`}>{data.author.name}</Link></>,\n                `created at ${parseDate(data.created_at)}`,\n            ]}\n        />\n        <CardList query={{ category: data.name }}/>\n    </>\n);\n\nexport default CategoryView;\n","import { useParams } from 'react-router-dom';\n\n//import { UserAuthContext } from '../context';\nimport { User } from '../types';\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\nimport CardList from '../components/cardlist';\nimport { InfoHeader, parseDate } from '../components/snippets';\n\ninterface UserId { userId: string };\n\nconst UserView = () => {\n    //const user = useContext(UserAuthContext);\n    const { userId } = useParams<UserId>();\n\n    return (\n        <ApiRender\n            apiCall={() => api.getUser(userId)}\n            component={UserHeader}\n            key={userId}\n        />\n    );\n}\n\nconst UserHeader = ({ data }: { data: User }) => (\n    <>\n        <InfoHeader\n            subject={`user: ${data.name}`}\n            info={[\n                `score: ${data.score}`,\n                `created at ${parseDate(data.created_at)}`,\n            ]}\n        />\n        <CardList query={{ user: data.id }}/>\n    </>\n);\n\nexport default UserView;\n","import Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion, faHandPointDown, faHandPointUp, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nexport type AppNavBarButtons = Array<[IconDefinition, string, () => void | undefined]>;\n\ninterface AppNavBarProps {\n  id?: string;\n  spacer?: boolean;\n  buttons?: AppNavBarButtons;\n}\n\nconst scrollToY = (y: number) => window.scrollTo({ top: y, behavior: \"smooth\" });\nconst scrollToTop = () => scrollToY(0);\nconst scrollToBottom = () => scrollToY(document.body.scrollHeight);\n\nconst NavBarUnit = ({ spacer, buttons }: AppNavBarProps) =>  {\n  const navItem = (\n    icon: IconDefinition,\n    text: string,\n    onclick?: () => void,\n  ) => (\n    <Nav.Item onClick={onclick}>\n      <Nav.Link>\n        <FontAwesomeIcon className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'} icon={icon} />\n        <br/>\n        <small className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'}>{text}</small>\n      </Nav.Link>\n    </Nav.Item>\n  )\n\n  return (\n    <Navbar\n      fixed={spacer ? undefined : 'bottom'}\n      className={spacer ? 'sdark-spacer py-0' : 'sdark-fg shadow py-1'}\n    >\n      <Container>\n        <Nav fill className='w-100'>\n          {\n            spacer\n              ?  navItem(faQuestion, 'Bottom of page')\n              : [\n                  navItem(faHandPointDown, 'Bottom', scrollToBottom),\n                  navItem(faHandPointUp, 'Top', scrollToTop),\n                ]\n          }\n          {\n            buttons?.length && buttons.map(things => navItem(...things))\n          }\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport const AppNavBar = (props: AppNavBarProps) => (\n  <div id=\"navbars\" className='d-md-none'>\n    <NavBarUnit spacer/>\n    <NavBarUnit {...props}/>\n  </div>\n);\n","import { useState, useRef, ReactElement } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faExpandAlt, faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport { AppNavBar, AppNavBarButtons } from '../components/navbar';\nimport CardInfo from '../components/cardinfo';\nimport { edgePadding } from '../components/snippets';\nimport { BingoTile, BingoCard } from '../types';\nimport ApiRender from '../api/render';\nimport api from '../api/backend';\n\n\n\n//=============================//\n// bingo card solution checker //\n//=============================//\n\nconst solutionIndexes = (() => {\n    let edge = Array(5).fill(0).map((_, i) => i);\n    let vert = edge.map(n => Array(5).fill(0).map((_, i) => i * 5 + n));\n    let horiz = edge.map(n => Array(5).fill(0).map((_, i) => i + 5 * n));\n    let diag1 = Array(5).fill(0).map((_, i) => i * 4 + 4);\n    let diag2 = Array(5).fill(0).map((_, i) => i * 6);\n    return [...vert, ...horiz, diag1, diag2];\n})();\n\ntype SolutionArray = BingoTile[];\n\nconst checkForBingo = (card: BingoCard): SolutionArray | undefined => {\n    if (solutionIndexes.some(line => line.every(index => card.tiles[index].clicked))) {\n        var solution = solutionIndexes.filter(line => line.every(index => card.tiles[index].clicked))[0];\n        return solution.map(index =>card.tiles[index]);\n    }\n}\n\n\n//==================//\n// cardview methods //\n//==================//\n\ntype CardSetter = (card: BingoCard) => void;\ntype SolutionSetter = (solution: SolutionArray) => void;\n\nconst tileHover = (\n    tile: BingoTile,\n    state: boolean,\n    card: BingoCard,\n    setCard: CardSetter\n) => {\n\n    if (!navigator.maxTouchPoints) {\n        const tiles = card.tiles;\n        const index = tiles.indexOf(tile);\n        tiles[index].hovered = state;\n        setCard({ ...card, tiles: tiles });\n    }\n};\n\nconst tileClick = (\n    tile: BingoTile,\n    card: BingoCard,\n    setCard: CardSetter,\n    setSolution: SolutionSetter\n) => {\n\n    const tiles = card.tiles;\n    const index = tiles.indexOf(tile);\n    tiles[index].clicked = !tiles[index].clicked; \n    setCard({ ...card, tiles: tiles });\n    \n    var newSolution = checkForBingo(card);\n    if (newSolution)\n        setSolution(newSolution);\n};\n\nconst resetBingo = (\n    card: BingoCard | null,\n    setCard: CardSetter,\n    setSolution: SolutionSetter\n) => {\n\n    if (card) {\n        const tiles = card.tiles.map(tile => {\n            tile.hovered = false;\n            tile.clicked = false;\n            return tile;\n        });\n        tiles[12].clicked = true;\n        setCard({ ...card, tiles: tiles })\n        setSolution([]);\n\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n};\n\nconst colorTheTile = (tile: BingoTile) => {\n    if (tile.clicked)\n        return clickedColor;\n    else if (tile.hovered)\n        return hoverColor;\n    else\n        return 'sdark-fg'\n}\n\n//====================//\n// cardview variables //\n//====================//\n\nconst clickedColor = 'bg-sdark-green text-white';\nconst hoverColor = 'bg-sdark-magenta text-white';\n\n//====================//\n// cardview component //\n//====================//\n\ninterface CardLayoutProps {\n    passedCard: BingoCard;\n    cardInfo: ReactElement;\n}\n\nconst CardLayout = ({ passedCard, cardInfo }: CardLayoutProps) => {\n    const [card, setCard] = useState(() => {\n        let tileFields = Object.entries(passedCard).filter(([ field, _ ]) => field.startsWith('tile_'));\n        let tiles = tileFields.map(([ _, text ], index) => ({\n            text: text,\n            hovered: false,\n            clicked: false,\n            id: index + 1\n        }));\n        tileFields.forEach(([field, _]) => Reflect.deleteProperty(passedCard, field));\n        tiles[12].clicked = true;\n        passedCard.tiles = tiles;\n        console.log('init card');\n        return passedCard;\n    });\n    const [tileSearchQuery, setTileSearchQuery] = useState('');\n    const [solution, setSolution] = useState<SolutionArray>([]);\n    const [topToggled, setTopToggled] = useState(true);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const solved = Boolean(solution.length);\n    \n    const changeSearch = (e : any) => setTileSearchQuery(e.target.value);\n    const resetSearch = () => {\n        setTileSearchQuery('');\n        setTopToggled(true);\n    }\n    const showTop = () => setTopToggled(true);\n    const hideTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n        });\n        setTopToggled(false);\n        inputRef.current && inputRef.current.focus(); \n    }\n    const buttons: AppNavBarButtons = [[faSearch, 'Search', hideTop]];\n    if (!topToggled)\n        buttons.push([faExpandAlt, 'Expand', showTop]);\n    \n    const filteredTiles = card.tiles.filter(tile => {\n        return tile.text.toLowerCase().includes(tileSearchQuery.toLowerCase());\n    });\n\n    console.log(`\\nLAYOUT:\\n\\n    card: ${card.name}\\n    query: ${tileSearchQuery}\\n    solution: ${solution}\\n    topToggled: ${topToggled}\\n`);\n\n    return (\n        <>\n            <Row className='pt-2'>\n                <Col id='info-and-indicators' xs={12} md={6} lg={5} className=\"px-2\">\n                    <div id='card-info' className={'pb-2 ' + (topToggled ? '' : 'd-none d-md-block')}>\n                        <div className=\"mb-2\">\n                            {cardInfo}\n                        </div>\n                        <Col id='indicators' className='text-center'>\n                            <Row className='row-cols-5'>\n                                {\n                                    card.tiles.map((tile, index) => (\n                                        <Col className={`p-0 ${edgePadding[index]}`}>\n                                            <Col className={`py-2 rounded ${colorTheTile(tile)}`}>\n                                                {tile.id}\n                                            </Col>\n                                        </Col>\n                                    ))\n                                }\n                            </Row>\n                        </Col>\n                    </div>\n                    <div id='search-bar' className='pb-2'>\n                        {\n                            !topToggled\n                                && <div className='d-md-none text-sdark-bg p-0 pb-1'>\n                                         <small>Card info hidden. Click on the expand button to show them.</small>\n                                     </div>\n                                 \n                        }\n                        <InputGroup>\n                            <Form.Control\n                                placeholder='Search bingo tiles'\n                                type='string'\n                                className='slight-bg'\n                                value={tileSearchQuery}\n                                style={{ cursor: 'pointer' }}\n                                onChange={changeSearch}\n                                onFocus={hideTop}\n                                ref={inputRef}\n                            />\n                            {\n                                tileSearchQuery\n                                    && \n                                        <InputGroup.Append>\n                                            <Button\n                                                variant='danger'\n                                                className='bg-sdark-red'\n                                                onClick={resetSearch}\n                                            >\n                                                <FontAwesomeIcon icon={faTimes} />\n                                            </Button>\n                                        </InputGroup.Append>\n                            }\n                        </InputGroup>\n                    </div>\n                </Col>\n                <Col id='tiles' xs={12} md={6} lg={7} className=\"px-2\">\n                    {\n                        tileSearchQuery\n                        && <div className={ 'text-sdark-bg text-center p-0 ' + (filteredTiles.length ? 'pb-3' : '') }>\n                                 {\n                                     filteredTiles.length\n                                         ? `${filteredTiles.length} result` + (filteredTiles.length > 1 ? 's' : '')\n                                         : 'No results'\n                                 }\n                             </div>\n                             \n                    }\n                    <Row className='row-cols-1 row-cols-md-1' >\n                        {\n                            filteredTiles.map(( tile, index ) => (\n                                <Col className={index === 0 ? 'pb-1' : 'py-1'}>\n                                    <Col\n                                        style={{ cursor: 'pointer' }}\n                                        className={`rounded h-100 py-2 ${colorTheTile(tile)}`}\n                                        onClick={() => tileClick(tile, card, setCard, setSolution)}\n                                        onMouseEnter={() => tileHover(tile, true, card, setCard)}\n                                        onMouseLeave={() => tileHover(tile, false, card, setCard)}\n                                    >\n                                        <Row>\n                                            <Col xs={2} lg={1}\n                                                className={\n                                                    'border' + (tile.hovered || tile.clicked ? '' : '-sdark') + '-right'\n                                                        + ' text-center'\n                                            }>\n                                                {tile.id}\n                                            </Col>\n                                            <Col>{tile.text}</Col>\n                                        </Row>\n                                    </Col>\n                                </Col>\n                             ))\n                         }\n                    </Row>\n                    <hr className=\"sdark-hr\" />\n                </Col>\n\n                <Modal\n                    show={solved}\n                    dialogAs={(props) => (\n                        <div className=\"modal-dialog modal-dialog-centered\">\n                            <div {...{...props, className: \"modal-content rounded sdark-bg\"}}>\n                            </div>\n                        </div>\n                    )}\n                >\n                    <Modal.Header>\n                        You got Bingo!\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div className=\"text-center mb-4 mt-3\">\n                            <h3>{card.name}</h3>\n                        </div>\n                        <Row className='row-cols-1 p-1'>\n                            {\n                                solution.map(tile => \n                                    <Col className='p-1'>\n                                        <Col className='rounded h-100 p-2 sdark-fg'>\n                                             <Row>\n                                                 <Col xs={2} md={1} className='border-sdark-right text-center'>\n                                                     {tile.id}\n                                                 </Col>\n                                                 <Col>{tile.text}</Col>\n                                             </Row>\n                                        </Col>\n                                    </Col>\n                                )\n                            }\n                        </Row>\n                        <div className=\"text-center mt-4 mb-3\">\n                            Link: <a href={window.location.href} className='sdark-bg'>{window.location.href}</a>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            variant=\"primary\"\n                            onClick={() => resetBingo(card, setCard, setSolution)}\n                        >\n                            Start Over\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Row>\n\n            <AppNavBar\n                id='card-navbar'\n                buttons={buttons}\n            />\n        </>\n    );\n}\n\ninterface CardIdParam {\n    cardId: string;\n}\n\nconst CardView = () => {\n    const { cardId }: CardIdParam = useParams();\n    return (\n        <ApiRender\n            apiCall={() => api.getCard(cardId)}\n            loadingMessage={`Loading bingo card ${cardId}`}\n            component={({ data }) => \n                <CardLayout\n                    passedCard={data}\n                    cardInfo={<CardInfo card={data}/>}\n                />\n            }\n        />\n    );\n}\n    /*\n    const loc = useLocation();\n    const card = \n        loc.state\n            ? (loc.state as { card?: BingoCard }).card\n            : null;\n\n    return (\n        <>\n            {\n                card\n                    ? <CardLayout\n                            passedCard={card}\n                            cardInfo={<CardInfo card={card}/>}\n                        />\n\n                    : <ApiRender\n                            apiCall={() => api.getCard(cardId)}\n                            loadingMessage={`Loading bingo card ${cardId}`}\n                            component={({ data }) => (\n                                <CardLayout\n                                    passedCard={data}\n                                    cardInfo={<CardInfo card={data}/>}\n                                />\n                            )}\n                        />\n            }\n        </>\n    );\n}\n*/\n\nexport default CardView;\n","import Spinner from 'react-bootstrap/Spinner';\nimport React from 'react';\n\ninterface LoadingProps {\n  message: string | React.ReactElement;\n}\n\nconst Loading = ({ message }: LoadingProps) => (\n  <div className='text-center'>\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n    <div className=\"mt-2\">\n      {\n        typeof message === 'string'\n          ? <h4>{message}</h4>\n          : message\n      }\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import { useState } from 'react';\n\nimport * as Yup from 'yup';\nimport { Formik, Form, Field, ErrorMessage, FormikHelpers } from 'formik';\n\nimport { Link } from 'react-router-dom';\n\nimport Loading from '../components/loading';\nimport { User, UserState } from '../types';\nimport api from '../api/backend';\n\ninterface LoginProps {\n    login: (u: User) => void;\n    logout: () => void;\n    user: UserState;\n}\n\nconst LoginView = ({ user, login, logout }: LoginProps) => {\n\n    return (\n        <div className=\"py-4\">\n            <div className=\"row\">\n                <div className=\"col-3 d-none d-lg-block\"></div>\n                <div className=\"col-12 col-lg-6\">\n                    <LoginForm login={login} logout={logout} user={user}/>\n                </div>\n                <div className=\"col-3 d-none d-lg-block\"></div>\n            </div>\n        </div>\n    );\n}\n\nexport default LoginView;\n\nconst LoginSchema = Yup.object().shape({\n    username: Yup.string().required('Required'),\n    password: Yup.string().required('Required'),\n});\n\nconst LoginForm = ({ login, logout, user }: LoginProps) => {\n    const [statusCode, setStatusCode] = useState(200);\n\n    const apiLogin = async (credentials: object) => {\n        let resp = await api.login(credentials);\n        if (resp.data && resp.data.user)\n            login(resp.data.user);\n    };\n\n    const apiLogout = async () => {\n        let resp = await api.logout();\n        if (resp.ok)\n            logout();\n    };\n\n    const handleSubmit = async (values: any, { resetForm }: FormikHelpers<any>) => {\n        if (user) await apiLogout();\n        else await apiLogin(values);\n\n        resetForm();\n        return;\n    }\n   \n    return (\n        <Formik\n            validationSchema={LoginSchema}\n            initialValues={LoginSchema.default('')}\n            onSubmit={handleSubmit}\n        >\n            {({ isSubmitting, setFieldValue }) => (\n                isSubmitting\n                    ? <Loading message={'Logging ' + (user ? 'out' : 'in') + '...'}/>\n                    : (\n                            user\n                                ? <div className=\"text-center\">\n                                        <h1>Logged in as {user.name}!</h1>\n                                        <Form>\n                                            <button\n                                                className=\"btn btn-primary\"\n                                                disabled={isSubmitting}\n                                                type='submit'\n                                                onClick={() => {\n                                                    setFieldValue('username', 'placeholder bc validation');\n                                                    setFieldValue('password', 'placeholder bc validation');\n                                                }}\n                                            >\n                                                Logout\n                                            </button>\n                                        </Form>\n                                    </div>\n\n                                : <>\n                                        <div className=\"text-center\">\n                                            <h1>Login</h1>\n                                            {\n                                                statusCode === 400\n                                                    &&    <div className=\"text-danger mt-4\">Invalid credentials</div>\n                                            }\n                                        </div>\n                                        <div className=\"mt-4\">\n                                            <Form>\n                                                <div className='form-row'>\n                                                    <div className='form-group col'>\n                                                        <div className=\"row\">\n                                                            <div className=\"col\">\n                                                                <label>Username</label>\n                                                            </div>\n                                                            <div className=\"col w-100 text-right\">\n                                                                <ErrorMessage name='username' component='label' className='text-danger'/>\n                                                            </div>\n                                                        </div>\n                                                        <Field name='username' className='form-control'/>\n                                                    </div>\n                                                </div>\n                                                <div className='form-row'>\n                                                    <div className='form-group col'>\n                                                        <div className=\"row\">\n                                                            <div className=\"col\">\n                                                                <label>Password</label>\n                                                            </div>\n                                                            <div className=\"col w-100 text-right\">\n                                                                <ErrorMessage name='password' component='label' className='text-danger'/>\n                                                            </div>\n                                                        </div>\n                                                        <Field name='password' type='password' className='form-control'/>\n                                                    </div>\n                                                </div>\n                                                <button className='btn btn-primary' type='submit' disabled={isSubmitting}>Login</button>\n                                                <Link to='/signup/'>\n                                                    <button className='btn btn-warning ml-2'>Signup</button>\n                                                </Link>\n                                            </Form>\n                                        </div>\n                                    </>\n                        )\n            )}\n        </Formik>\n    );\n}\n","import { useState } from 'react';\nimport { FormikHelpers, Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport Loading from '../components/loading';\nimport api from '../api/backend';\n\nconst SignupView = () => (\n    <div className=\"py-4\">\n        <div className=\"row\">\n            <div className=\"col-3 d-none d-lg-block\"></div>\n            <div className=\"col-12 col-lg-6\">\n                <SignupForm/>\n            </div>\n            <div className=\"col-3 d-none d-lg-block\"></div>\n        </div>\n    </div>\n);\n\nexport default SignupView;\n\nconst stringField = () => Yup.string().default('').required('Required');\nconst SignupSchema = Yup.object().shape({\n    username: stringField()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!'),\n    password: stringField()\n        .min(10, 'Too Short!'),\n    confirmPassword: stringField()\n        .when('password', {\n            is: (val: string) => (val && val.length > 0 ? true : false),\n            then: Yup.string().oneOf(\n                [Yup.ref('password')],\n                'Needs to match password'\n            )\n        }),\n    email: stringField().email('Invalid email'),\n});\n\nconst signupFields: Array<[string, string, string]> = [\n// label               , name             , type\n    ['Username'        , 'username'       , 'text'],\n    ['Email'           , 'email'          , 'email'],\n    ['Password'        , 'password'       , 'password'],\n    ['Confirm Password', 'confirmPassword', 'password'],\n]\n\ntype APIResult = string[];\ninterface APIError {\n    email?: APIResult;\n    password?: APIResult;\n    username?: APIResult;\n}\n\nconst SignupForm = () => {\n    const [ createdSuccess, setCreatedSuccess ] = useState(false);\n    const [ submitDone, setDone ] = useState(false);\n\n    const submitUser = async (values: any, { resetForm, setErrors }: FormikHelpers<any>) => {\n        setDone(false);\n        let resp = await api.createUser({\n            username: values.username,\n            password: values.password,\n            email: values.email,\n        });\n\n        if (resp.data && !resp.ok) {\n            // \n            // backend validator sends errors in arrays\n            // since formik error message can only show one string, I'm opting to only show the first error string\n            // prob have to add a way to view multiple errors at some point\n            //\n            let apiErr: APIError = resp.data;\n            setErrors(Object.fromEntries(Object.entries(apiErr).map(([ field, err ]) => [field, err[0]])));\n        } else if (resp.ok) {\n            resetForm();\n            setCreatedSuccess(true);\n        }\n        setDone(true);\n        return;\n    }\n\n    const SignupFormLayout = ({ isSubmitting }: { isSubmitting: boolean }) => (\n        <>\n            <div className=\"text-center\">\n                <h1>Signup</h1>\n            </div>\n            {\n                !createdSuccess && submitDone\n                    ?\n                        <div className=\"text-danger text-center\">\n                            <h1>Whoops!</h1>\n                            <p>There was something wrong, please submit again.</p>\n                        </div>\n\n                    : null\n            }\n            <div className=\"mt-4\">\n                <Form>\n                    {\n                        signupFields.map(([ fieldLabel, fieldName, fieldType ]) => (\n                            <div className='form-row'>\n                                <div className='form-group col'>\n                                    <div className=\"row\">\n                                        <div className=\"col\">\n                                            <label>{fieldLabel}</label>\n                                        </div>\n                                        <div className=\"col w-100 text-right\">\n                                            <ErrorMessage name={fieldName} component='label' className='text-danger'/>\n                                        </div>\n                                    </div>\n                                    <Field name={fieldName} type={fieldType} className='form-control'/>\n                                </div>\n                            </div>\n                        ))\n                    }\n                    <button className='btn btn-primary' type='submit' disabled={isSubmitting}>Signup</button>\n                    <Link to='/login/'>\n                        <button className='btn btn-warning ml-2'>Back to Login</button>\n                    </Link>\n                </Form>\n            </div>\n        </>\n    );\n    \n    const SignupSuccess = () => (\n       <div className=\"text-center\">\n           <div className=\"mb-2\">\n               <h1>Account creation successful!</h1>\n           </div>\n           <Link to='/login/'>\n               <button className='btn btn-warning ml-2'>Back to Login</button>\n           </Link>\n       </div>\n    );\n\n    return (\n        <Formik\n            validateOnBlur={true}\n            validateOnChange={false}\n            validationSchema={SignupSchema}\n            initialValues={SignupSchema.getDefault()}\n            onSubmit={submitUser}\n        >\n            {({ isSubmitting }) => (\n                isSubmitting\n                    ? <Loading message='Creating new account...' />\n                    : (createdSuccess\n                        ? <SignupSuccess/>\n                        : <SignupFormLayout {...{isSubmitting}}/>)\n            )}\n        </Formik>\n    );\n}\n","import { useLocation } from 'react-router-dom';\n\nimport CardList from '../components/cardlist';\nimport { Header } from '../components/snippets';\nimport debugLog from '../debug';\n\n//const headerPadding = 'rounded text-center sdark-fg p-4';\n\nconst SearchView = () => {\n    const urlParams = new URLSearchParams(useLocation().search);\n    const searchQuery = urlParams.get('q') || '';\n    const cardQuery = { search: encodeURIComponent(searchQuery) };\n \n    debugLog({ SEARCHVIEW: 1, searchQuery });\n    return (\n        <>\n            <Header card>\n                <h3>\n                    Search results for \"{searchQuery}\"\n                </h3>\n            </Header>\n            <CardList query={cardQuery}/>\n        </>\n    );\n}\n\nexport default SearchView;\n","import { createContext, useContext, forwardRef, useState, useRef, useReducer } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FieldProps, FormikHelpers, Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nimport { edgePadding, Header } from '../components/snippets';\nimport Loading from '../components/loading';\nimport { BingoCard, SearchResults, Category } from '../types'\nimport api from '../api/backend';\nimport ApiRender from '../api/render';\n\n//const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n//const interleave = (arr: any, thing: any) => [].concat(...arr.map((n: any) => [n, thing])).slice(0, -1);\n\nconst DEBUG = true;\nconst debugLog = (props: any) => {\n    DEBUG && console.log(props);\n}\n\nconst tileFields = \n    Array(25)\n        .fill(null)\n        .map((_, index) => `tile_${index + 1}`);\n        \nconst formFields = [...tileFields, 'name', 'category'];\n\nconst stringField = (max: number) =>\n    Yup.string()\n        .default('')\n        .required('Cannot be blank.')\n        .max(max, `Cannot be longer than ${max} characters.`);\n\nconst categorySchema =\n    stringField(20)\n        .matches(\n            /^\\w+$/,\n            {\n                message: 'Can only contain letters, numbers and underscores.',\n                excludeEmptyString: true\n            }\n        );\n\nconst cardSchemaShape = Object.fromEntries(\n    ([] as any[]).concat(\n        tileFields.map(field => [field, stringField(200)]),\n        Object.entries({\n            name: stringField(50),\n            category: categorySchema,\n        })\n));\n\nconst cardSchema = Yup.object().shape(cardSchemaShape);\n\ninterface FormRowProps {\n    name: string;\n    label: string;\n    small?: boolean;\n    hidden?: boolean;\n}\n\nconst FormRowIndicator = ({ name, label }: FormRowProps) => (\n    <Field name={name}>\n        {({ meta }: FieldProps) => (\n            !meta.touched\n                ? <div className=\"rounded text-center py-2 sdark-fg\">{label}</div>\n                : <div className={`rounded text-center py-2 text-white bg-sdark-${meta.error ? 'red' : 'green'}`}>{label}</div>\n        )}\n    </Field>\n);\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => (\n    <div ref={ref}>\n        {children}\n    </div>\n));\n\ninterface FormHelperProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    values: { [x: string]: any; };\n}\n\nconst FormHelperContext = createContext<FormHelperProps>({ setFieldValue: () => {}, values: {} });\n\nconst CategorySearchBar = ({ card }: { card?: BingoCard }) => {\n    // 1. State Handling\n    // 2. Sub-Elements\n    // 3. Main Element\n\n    // ============================================================================\n    // ========================= 1. State Handling ================================\n    // ============================================================================\n    \n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown bc category create OR get\n    onToggle should toggle dropdown\n\n    */\n\n    type Action = \n        | { type: 'query',      payload: string }\n        | { type: 'dropdown',   payload: boolean }\n        | { type: 'menuSelect', payload: { query: string; errors: Array<string> } }\n        | { type: 'category',   payload: SearchResults<Category> }\n        | { type: 'load',       payload: boolean };\n\n    type State = {\n        query: string;\n        errors: Array<string>;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        categories: SearchResults<Category>;\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ CATEGORYSEARCHBAR: 'input check', query, queryRef });\n            if (query && (query === queryRef.current)) {\n                debugLog('searching for categories...');\n                getCategories();\n            } \n        }, 500);\n    }\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ CATEGORYSEARCHBAR: 'reducer', state, action });\n        switch (action.type) {\n            case 'query':\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                    errors: action.payload.length > 0 ? state.errors : [],\n                };\n            case 'dropdown':\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case 'category':\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    categories: action.payload,\n                };\n            case 'menuSelect':\n                let categoryValue = action.payload.errors.length > 0 ? '' : action.payload.query;\n                setFieldValue('category', categoryValue);\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                    errors: action.payload.errors,\n                };\n            case 'load':\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const { setFieldValue, values } = useContext(FormHelperContext);\n    const categoryName: string = values.category;\n    const initState: State = {\n        query: categoryName,\n        showDropdown: false,\n        loading: false,\n        disabled: Boolean(categoryName.length > 0),\n        errors: [],\n        categories: { count: 0, page_size: 0, results: [] },\n    };\n\n    const [{ disabled, errors, query, showDropdown, loading, categories }, dispatch] = useReducer(stateReducer, initState);\n    const valid =  errors.length === 0;\n    const showQueryButton = disabled && valid;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({ CATEGORYSEARCHBAR: 'states', query, disabled, errors, categoryName });\n    \n    const getCategories = async () => {\n        dispatch({ type: 'load', payload: true });\n        let { data, ok } = await api.getTopThreeCategories(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: 'category', payload: data });\n        } else {\n            dispatch({ type: 'load', payload: false });\n        }\n    }\n\n    const handleSelect = (eventKey: string | null) => {\n        let errs: Array<string> = [];\n\n        switch (eventKey) {\n            case null:\n                break;\n            case 'QUERY!':\n                try {\n                    categorySchema.validateSync(query);\n                } catch (err) {\n                    errs = err.errors;\n                }\n                dispatch({ type: 'menuSelect', payload: { query, errors: errs } });\n                break;\n            default:\n                dispatch({ type: 'menuSelect', payload: { query: eventKey, errors: errs } });\n        }\n    }\n\n    // ============================================================================\n    // ========================= 2. Sub-Elements ==================================\n    // ============================================================================\n    \n    const LoadingIndicator = () => <>{\n        loading &&\n            <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                    <div className=\"pl-2\">\n                        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </span>\n            </div>\n    }</>;\n\n    const ClearButton = () => <>{\n        !showQueryButton && query.length > 0 &&\n            <div\n                className=\"input-group-append\"\n                style={{ cursor: 'pointer' }}\n                onClick={() => dispatch({ type: 'query', payload: '' })}\n            >\n                <span className=\"input-group-text clear\">\n                    <FontAwesomeIcon icon={faTimes}/>\n                </span>\n            </div>\n    }</>;\n\n    const QueryButton = () => <>{\n        showQueryButton &&\n            <div className=\"input-group-append\">\n                <span className=\"input-group-text clear p-1\">\n                    <div className=\"p-2 rounded text-white bg-sdark-violet align-items-center justify-content-center\">\n                        <Row>\n                            <Col className={card ? '' : 'pr-2'}>\n                                {query}\n                            </Col>\n                            {\n                                !card &&\n                                    <Col className='pl-2'>\n                                        <div\n                                            style={{ cursor: 'pointer' }}\n                                            onClick={() => dispatch({ type: 'menuSelect', payload: { query: '', errors: [] } })}\n                                        >\n                                            <small>\n                                                <FontAwesomeIcon icon={faTimes}/>\n                                            </small>\n                                        </div>\n                                    </Col>\n                            }\n                        </Row>\n                    </div>\n                </span>\n            </div>\n    }</>;\n    \n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className='border-slight-top'/>\n            {\n                categories.count > 0\n                    ?\n                        categories.results.map(category => (\n                            <Dropdown.Item className='slight-bg' eventKey={category.name}>\n                                {category.name}\n                            </Dropdown.Item>\n                        ))\n\n                    :  \n                        <Dropdown.Item className='slight-bg' eventKey='QUERY!'>\n                            Create new category: {query}\n                        </Dropdown.Item>\n            }\n        </>\n    );\n    \n    const CategoryErrors = () => <>{\n         errors.length > 0 && query.length > 0 &&\n            errors.map(err => (\n                <div className=\"text-sdark-red\"><\n                    small>{err}</small>\n                </div>\n            ))\n    }</>;\n\n    const SuccessIndicator = () =>\n        <div className=\"input-group-prepend\">\n            <span\n                className={`input-group-text ${disabled ? (valid  ? 'success' : 'error') : ''}`}\n            >\n                Category\n            </span>\n        </div>;\n    \n    // ============================================================================\n    // ========================= 3. Main Element ==================================\n    // ============================================================================\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: 'dropdown', payload: !showDropdown })}\n            onSelect={handleSelect}\n        >\n            <div className=\"input-group slight-bg rounded\">\n                <SuccessIndicator/>\n                <QueryButton/>\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? '' : 'Search'}\n                    value={showQueryButton ? '' : query}\n                    onChange={e => dispatch({ type: 'query', payload: e.target.value })}\n                />\n                <ClearButton/>\n                <LoadingIndicator/>\n            </div>\n\n            <div>\n                <CategoryErrors/>\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id='create-category'/>\n            <Dropdown.Menu className='w-100 slight-bg mt-1 px-2'>\n                <DropdownItems/>\n            </Dropdown.Menu>\n        </Dropdown>\n\n    );\n};\n\nconst FormRow = ({ name, label }: FormRowProps) => \n    <Field name={name}>\n        {({ field, meta }: FieldProps) => (\n            <>\n                <div className=\"input-group\">\n                    <div className=\"input-group-prepend\">\n                        <span className={`input-group-text ${meta.touched ? (meta.error ? 'error' : 'success') : ''}`}>\n                            {label}\n                        </span>\n                    </div>\n                    <input type='text' className='form-control' placeholder='Empty' {...field}/>\n                </div>\n                {\n                    meta.touched && meta.error && \n                        <div className=\"text-sdark-red\">\n                            <small>{meta.error}</small>\n                        </div>\n                }\n            </>\n        )}\n    </Field>;\n    \nconst preventEnter = (keyEvent: React.KeyboardEvent<HTMLFormElement>) => {\n    if (keyEvent.key === 'Enter') {\n        keyEvent.preventDefault();\n    }\n}\n    \nconst CardForm = ({ isSubmitting, card }: { isSubmitting: boolean, card?: BingoCard }) =>\n    <Form onKeyDown={preventEnter}>\n        <Header card>\n            <h2>{card ? `Editing \"${card.name}\"` : 'Create New Card'}</h2>\n        </Header>\n        <Row>\n\n            <Col xs={12} lg={5}>\n                <div className=\"p-2\">\n                    <Col className='pb-2 px-0'>\n                        <Row className=\"pb-2 px-0\">\n                            <FormRow name='name' label='Name'/>\n                        </Row>\n                        <Row>\n                            <Col className=\"w-100 px-0\">\n                                <CategorySearchBar card={card}/>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Row className=\"row-cols-5 pt-2\">\n                        {tileFields.map((field, index) => (\n                            <div className={edgePadding[index]}>\n                                <FormRowIndicator name={field} label={`${index + 1}`}/>\n                            </div>\n                        ))}\n                    </Row>\n                </div>\n            </Col>\n\n            <Col xs={12} lg={7} className='p-0'>\n                <div className=\"p-2\">\n                    {tileFields.map((field, index) => (\n                        <div className={index !== 24 ? 'pb-2' : ''}>\n                            <FormRow name={field} label={`Tile ${index + 1}`}/>\n                        </div>\n                    ))}\n                </div>\n            </Col>\n\n            <Col xs={12}>\n            </Col>\n        </Row>\n        <button\n            className='btn btn-primary'\n            type='submit'\n            disabled={isSubmitting}\n        >\n            Submit\n        </button>\n    </Form>;\n\nconst CardCreateEditLayout = ({ card }: { card?: BingoCard }) => {\n    const [{success, cardName}, setState] = useState<{success?: boolean, cardName?: string}>({});\n    const history = useHistory();\n \n    type ObjectArray<T = any> = {[s: string]: T};\n\n    const defaultValues = (\n        card\n            ? \n                {\n                    ...Object.fromEntries(\n                        formFields.map(field => [ field, (card as ObjectArray)[field] ])\n                    ),\n                    category: card.category.name,\n                }\n\n            : cardSchema.getDefault()\n    );\n    \n    const submitCard = async (values: any, { setErrors, resetForm }: FormikHelpers<any>) => {\n        let formValues = { ...values, category: {name: values.category} };\n        let apiCall = (v: any) => api.createCard(v);\n\n        if (card) {\n            apiCall = (v: any) => api.editCard(card.id, v);\n\n            // only sends changed fields in json\n            // can't change category in edit mode\n            formValues =\n                Object.fromEntries(\n                    Object.entries(formValues)\n                          .filter(([key, value]) =>\n                                  key !== 'category' &&\n                                  value !== (defaultValues as ObjectArray)[key]));\n        }\n        \n        let { data, ok } = await apiCall(formValues);\n\n        if (!ok && data) {\n            setErrors(\n                Object.fromEntries(\n                    Object.entries(data as ObjectArray<string[]>)\n                          .map(([ field, err ]) => [field, err[0]])));\n        } else if (ok && !card) {\n            resetForm();\n        } \n\n        debugLog({ CARDCREATE: 'submitted card', data, ok });\n        setState({ success: ok, cardName: formValues.name });\n        return;\n    };\n\n    debugLog({ CARDCREATE: 'layout render' });\n\n    const formVerb = card ? 'edit' : 'creat';\n    const formVerbCap = formVerb.charAt(0).toUpperCase() + formVerb.slice(1);\n\n    return (\n        success\n            ?\n                <Header card>\n                    <h2 className='mb-4'>\n                        Successfully {formVerb}ed bingo card!\n                    </h2>\n                    <button\n                        className=\"btn btn-primary\"\n                        onClick={() => history.go(-1)}\n                    >\n                        Go Back\n                    </button>\n                </Header>\n            :\n                <div className=\"px-2\">\n                    <Formik\n                        validationSchema={cardSchema}\n                        initialValues={defaultValues}\n                        onSubmit={submitCard}\n                    >\n                        {({ isSubmitting, setFieldValue, values }) => \n                            <FormHelperContext.Provider value={{ setFieldValue, values }}>\n                                {isSubmitting\n                                    ? <Loading message={`${formVerbCap}ing new bingo card...`}/>\n                                    : <CardForm {...{isSubmitting, card}}/>}\n                            </FormHelperContext.Provider>}\n                    </Formik>\n                </div>\n    );\n};\n\nconst CardCreateView = () => {\n    const { cardId }: { cardId?: string } = useParams();\n\n    return (\n        cardId\n            ?\n                <ApiRender\n                    apiCall={() => api.getCard(`${cardId}`)}\n                    component={({ data }) => <CardCreateEditLayout card={data}/>}\n                />\n            :\n                <CardCreateEditLayout/>\n    );\n}\n\nexport default CardCreateView;\n","import { ReactElement, useReducer, useRef, forwardRef } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownItem from 'react-bootstrap/DropdownItem';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { SearchResults } from '../types';\nimport { ApiResponse } from '../api/backend';\nimport debugLog from '../debug';\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => (\n    <div ref={ref}>\n        {children}\n    </div>\n));\n\ninterface SearchBarProps {\n    label: string;\n    apiCall: (query: string) => Promise<ApiResponse>;\n    resultMapper: (result: any) => ReactElement<DropdownItem>;\n}\n\nconst SearchBar = ({ label, apiCall, resultMapper }: SearchBarProps) => {\n    // 1. State Handling\n    // 2. Sub-Elements\n    // 3. Main Element\n\n    // ============================================================================\n    // ========================= 1. State Handling ================================\n    // ============================================================================\n    \n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown after api call\n    onToggle should obv toggle dropdown\n\n    */\n\n    type Action = \n        | { type: 'query',      payload: string }\n        | { type: 'dropdown',   payload: boolean }\n        | { type: 'menuSelect', payload: { query: string } }\n        | { type: 'results',    payload: SearchResults<any> }\n        | { type: 'load',       payload: boolean };\n\n    type State = {\n        query: string;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        searchResults: SearchResults<any>;\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ SEARCHBAR: 'input check', label, query, queryRef });\n            if (query && (query === queryRef.current)) {\n                debugLog('searching for searchResults...');\n                getResults();\n            } \n        }, 500);\n    }\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ SEARCHBAR: 'reducer', label, state, action });\n        switch (action.type) {\n            case 'query':\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                };\n            case 'dropdown':\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case 'results':\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    searchResults: action.payload,\n                };\n            case 'menuSelect':\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                };\n            case 'load':\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const initState: State = {\n        query: '',\n        showDropdown: false,\n        loading: false,\n        disabled: false,\n        searchResults: { count: 0, page_size: 0, results: [] },\n    };\n\n    const [{ disabled, query, showDropdown, loading, searchResults }, dispatch] = useReducer(stateReducer, initState);\n    const showQueryButton = disabled;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({ SEARCHBAR: 'states', label, query, disabled });\n    \n    const getResults = async () => {\n        dispatch({ type: 'load', payload: true });\n        let { data, ok } = await apiCall(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: 'results', payload: data });\n        } else {\n            dispatch({ type: 'load', payload: false });\n        }\n    }\n\n    const handleSelect = (eventKey: string | null) => {\n        switch (eventKey) {\n            case null:\n                break;\n            case 'QUERY!':\n                dispatch({ type: 'menuSelect', payload: { query } });\n                break;\n            default:\n                dispatch({ type: 'menuSelect', payload: { query: eventKey } });\n        }\n    }\n\n    // ============================================================================\n    // ========================= 2. Sub-Elements ==================================\n    // ============================================================================\n    \n    const LoadingIndicator = () => <>{\n        loading &&\n            <div className=\"input-group-append\">\n                <span className=\"input-group-text\">\n                    <div className=\"pl-2\">\n                        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </span>\n            </div>\n    }</>;\n\n    const ClearButton = () => <>{\n        !showQueryButton && query.length > 0 &&\n            <div\n                className=\"input-group-append\"\n                style={{ cursor: 'pointer' }}\n                onClick={() => dispatch({ type: 'query', payload: '' })}\n            >\n                <span className=\"input-group-text clear\">\n                    <FontAwesomeIcon icon={faTimes}/>\n                </span>\n            </div>\n    }</>;\n\n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className='border-slight-top'/>\n            {searchResults.count > 0\n                ?\n                    searchResults.results.map(resultMapper)\n\n                :  \n                    <Dropdown.Item className='slight-bg' disabled>\n                        No results found\n                    </Dropdown.Item>}\n        </>\n    );\n    \n    const SearchBarLabel = () =>\n        <div className=\"input-group-prepend\">\n            <span className='input-group-text'>\n                {label}\n            </span>\n        </div>;\n    \n    // ============================================================================\n    // ========================= 3. Main Element ==================================\n    // ============================================================================\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: 'dropdown', payload: !showDropdown })}\n            onSelect={() => dispatch({ type: 'query', payload: '' })}\n        >\n            <div className=\"input-group slight-bg rounded\">\n                <SearchBarLabel/>\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? '' : 'Search'}\n                    value={showQueryButton ? '' : query}\n                    onChange={e => dispatch({ type: 'query', payload: e.target.value })}\n                />\n                <ClearButton/>\n                <LoadingIndicator/>\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id={`search-bar-${label}`}/>\n            <Dropdown.Menu className='w-100 slight-bg mt-1 px-2'>\n                <DropdownItems/>\n            </Dropdown.Menu>\n        </Dropdown>\n\n    );\n};\n\nexport default SearchBar;\n","import { useState, useEffect, useContext } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\n//import Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport { Link, BrowserRouter as Router, Switch, Route, useHistory, useParams } from 'react-router-dom';\n\nimport { FontAwesomeIcon as FaIcon } from '@fortawesome/react-fontawesome';\nimport { faPen, faCog, faUserCircle, faTimes, faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport HomeView from './views/homeview';\nimport CategoryView from './views/categoryview';\nimport UserView from './views/userview';\nimport CardView from './views/cardview';\nimport LoginView from './views/loginview';\nimport SignupView from './views/signupview';\nimport SearchView from './views/searchview';\nimport CardCreateView from './views/cardcreateview';\nimport api from './api/backend';\nimport { UserAuthContext } from './context';\nimport { User, UserState, Category } from './types';\nimport SearchBar from './components/searchbar';\n\nimport './solarized.css';\n\nconst DropdownContainer = ({ children }: any, ref: any) => (\n    <div ref={ref}>\n        {children}\n    </div>\n);\n\nconst SearchBarr = () => {\n    const [ searchInput, setSearchInput ] = useState('');\n    const [ showDropdown, setShowDropdown ] = useState(false);\n    const [ searchRoute, setSearchRoute ] = useState('');\n    const hist = useHistory();\n\n    useEffect(() => {\n        if (searchRoute) {\n            hist.push(searchRoute);\n            setSearchRoute('');\n        }\n    }, [hist, searchRoute]);\n \n    const toggleDropdown = (state: boolean = false) => {\n        if (searchInput.length > 0 && !showDropdown)\n            return true;\n        return state;\n    };\n\n    const searchLog = (label: string) => {\n        let spacer = '\\n        ';\n        console.log(`${label}:${spacer}${\n            Object.entries({\n                searchInput: searchInput,\n                searchRoute: searchRoute,\n                showDropdown: showDropdown,\n            }).map(([ text, value ]) => (\n                `${text}: \"${value}\"`\n            )).join(spacer)\n        }`);\n    }\n\n    searchLog('SEARCHBAR DRAW');\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => {\n                searchLog('SEARCHBAR ONTOGGLE');\n                setShowDropdown(toggleDropdown());\n            }}\n            onSelect={(eventKey) => {\n                if (eventKey) {\n                    setSearchInput('');\n                    setShowDropdown(false);\n                    setSearchRoute(`${eventKey}${encodeURIComponent(searchInput)}`);\n                    console.log(`SEARCHROUTE: ${searchRoute}`);\n                }\n            }}\n        >\n            <Dropdown.Toggle as={DropdownContainer} id='search-bar'>\n                <div className=\"input-group\">\n                    <div\n                        className=\"input-group-prepend\"\n                        style={{ cursor: 'pointer' }}\n                    >\n                        <span className=\"input-group-text\">\n                            <FaIcon icon={faSearch}/>\n                        </span>\n                    </div>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search\"\n                        value={searchInput}\n                        onChange={e => {\n                            let inputText = e.target.value;\n                            let showDropdown = false;\n                            \n                            if (inputText.length > 0) {\n                                showDropdown = true;\n                            }\n\n                            setSearchInput(inputText);\n                            setShowDropdown(showDropdown);\n                        }}\n                    />\n                </div>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className='w-100 mt-2 slight-bg'>\n                {Object.entries({ 'cards': '/search?q=' }).map(([ label, url ]) => (\n                    <Dropdown.Item className='slight-bg' eventKey={url}>\n                        Search for \"{label}\": {searchInput}\n                    </Dropdown.Item>\n                ))}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nconst Icon = ({ icon }: { icon: any }) => (\n    <h4 className='m-0'>\n        <FaIcon icon={icon}/>\n    </h4>\n);\n\nconst LoginDropdown = () => {\n    const user = useContext(UserAuthContext);\n    const [showDropdown, setDropdown] = useState(false);\n    const toggleDropdown = () => setDropdown(!showDropdown);\n\n    const apiLogout = async () => {\n        let resp = await api.logout();\n    };\n\n    const UserItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                {user ? user.name : 'Not Logged In'}\n            </Dropdown.Item>\n            <Dropdown.Divider/>\n            {\n                user\n                    ?   \n                    <Dropdown.Item\n                        as={Link}\n                        to={{ pathname: `/users/${user.id}/`, state: { userId: user.id } }}\n                    >\n                        <FaIcon icon={faCog}/> Profile\n                    </Dropdown.Item>\n\n                    :\n                    <Dropdown.Item className='slight-bg' as={Link} to='/login/'>Login</Dropdown.Item>\n            }\n        </>\n\n    );\n    \n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={toggleDropdown}\n        >\n            <div\n                onClick={toggleDropdown}\n                style={{ cursor: 'pointer' }}\n                className='hover-white'\n            >\n                <Icon icon={faUserCircle}/>\n            </div>\n            <Dropdown.Toggle as={DropdownContainer} id='login-dropdown'/>\n            <Dropdown.Menu align='right' className='slight-bg'>\n                <UserItems/>   \n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nconst TopNavBar = () => {\n    const [showSearch, setSearch] = useState(false);\n    const user = useContext(UserAuthContext);\n    const params = useParams<{ categoryName?: string }>();\n    const { categoryName = '' } = params;\n    console.log({ TOPNAV: 'render', categoryName, params });\n\n    const UserItems = () => <>\n        {\n            user &&\n                <Nav.Item className='pr-3'>\n                    <Nav.Link\n                        as={Link}\n                        to={{\n                            pathname: '/create/',\n                            state: { categoryName },\n                        }}\n                    >\n                        <Icon icon={faPen}/>\n                    </Nav.Link>\n                </Nav.Item>\n        }\n        <Nav.Item>\n            <LoginDropdown/>\n        </Nav.Item>\n    </>;\n    \n    const searchbar = \n        <SearchBar\n            label='Search'\n            apiCall={(query) => api.getTopThreeCategories(query)}\n            resultMapper={(result: Category) => \n                <Dropdown.Item as={Link} to={`/categories/${result.name}/`}>\n                    Go to {result.name}\n                </Dropdown.Item>\n            }\n        />;\n    \n    return (\n        <>\n            <Navbar id='desktop-topnav' className='shadow sdark-fg d-none d-lg-block' variant='dark' sticky='top'>\n                <Container>\n                    <Col xs={3}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to='/categories/TrashTaste1/'>TrashTaste1</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6} className='w-100'>\n                        <div className=\"align-items-center justify-content-center\">\n                            {searchbar}\n                        </div>\n                    </Col>\n                    <Col xs={3}>\n                        <Nav className='align-items-center justify-content-end'>\n                            <UserItems/>\n                        </Nav>\n                    </Col>\n                </Container>\n            </Navbar>\n\n            <Navbar id='mobile-topnav' className='shadow sdark-fg d-lg-none' variant='dark' sticky='top'>\n                <Container id='topnav-buttons' className={'w-100 ' + (!showSearch ? '' : 'd-none')}>\n                    <Col xs={6}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to='/categories/TrashTaste1/'>TrashTaste1</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <Nav className='align-items-center justify-content-end'>\n                            <Nav.Item onClick={() => setSearch(true)} className='pr-3'>\n                                <Nav.Link>\n                                    <Icon icon={faSearch}/>\n                                </Nav.Link>\n                            </Nav.Item>\n                            <UserItems/>\n                        </Nav>\n                    </Col>\n                </Container>\n                <Container id=\"topnav-search\" className={'py-1 ' + (showSearch ? '' : 'd-none')}>\n                    <Col xs={1} className='px-2'>\n                        <div onClick={() => setSearch(false)} style={{ cursor: 'pointer' }}>\n                            <Icon icon={faTimes}/>\n                        </div>\n                    </Col>\n                    <Col xs={11} className='px-2'>\n                        {searchbar}\n                    </Col>\n                </Container>\n            </Navbar>\n        </>\n    );\n}\n\nconst App = () => {\n    const [user, setUser] = useState<UserState>(null);\n    const login = (u: User) => setUser(u);\n    const logout = () => setUser(null);\n    //const loc = useLocation();\n \n    useEffect(() => {\n        (async () => {\n            let { data, ok } = await api.getSession();\n            if (ok && data && data.user) {\n                setUser(data.user);\n            }\n        })();\n    }, []);\n    \n    return (\n        <div className='sdark-bg'>\n            <Router>\n                \n                <UserAuthContext.Provider value={user}>\n                    <TopNavBar/>\n                </UserAuthContext.Provider>\n                \n                <Container>\n                    <div className=\"py-2\">\n                        <Switch>\n                            <Route exact path='/'>\n                                <HomeView/>\n                            </Route>\n                            <Route exact path='/signup/'>\n                                <SignupView/>\n                            </Route>\n                            <Route exact path='/login/'>\n                                <LoginView\n                                    login={login}\n                                    logout={logout}\n                                    user={user}\n                                />\n                            </Route>\n                            <UserAuthContext.Provider value={user}>\n                                <Route exact path='/search/'>\n                                    <SearchView/>\n                                </Route>\n                                <Route path='/categories/:categoryName/'>\n                                    <CategoryView/>\n                                </Route>\n                                <Route path='/users/:userId/'>\n                                    <UserView/>\n                                </Route>\n                                <Route exact path='/cards/:cardId/edit/'>\n                                    <CardCreateView/>\n                                </Route>\n                                <Route exact path='/cards/:cardId/'>\n                                    <CardView/>\n                                </Route>\n                                <Route path='/create/'>\n                                    <CardCreateView/>\n                                </Route>\n                                <Route path='/profile/'>\n                                    <UserView/>\n                                </Route>\n                            </UserAuthContext.Provider>\n                            <Route>\n                                <h2 className=\"text-sdark-red text-center\">Page Not Found.</h2>\n                            </Route>\n                        </Switch>\n                    </div>\n                </Container>\n            </Router>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}