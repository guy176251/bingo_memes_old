{"version":3,"sources":["debug.tsx","components/pagination.tsx","api/backend.ts","auth.tsx","components/snippets.tsx","components/helpers.ts","components/cardinfo.tsx","api/render.tsx","components/sidebar.tsx","components/cardlist.tsx","views/homepageview.tsx","views/categoryview.tsx","views/userview.tsx","components/navbar.tsx","views/cardview.tsx","components/loading.tsx","views/loginview.tsx","views/signupview.tsx","views/searchview.tsx","components/cardschema.ts","views/cardcreateview.tsx","components/searchbar.tsx","index.tsx"],"names":["debugLog","props","logBody","Object","entries","map","key","value","join","console","log","getDefaultSort","params","get","orderingParams","hot","new","best","orderingIcons","faFire","faSun","faArrowUp","getRange","start","end","Array","fill","_","i","pagination","currentPage","pageCount","delta","range","Math","round","pages","min","withDots","pair","length","wd","FIRST","SECOND","Pagination","pageSize","itemCount","label","top","buttonShape","ceil","loc","useLocation","paginationUrl","pathname","urlParams","URLSearchParams","search","currentSort","pageNum","parseInt","delete","urlParamsString","toString","PageItem","button","index","color","innerButton","className","set","to","PageButtons","Dropdown","Toggle","Menu","ItemText","Divider","keys","filter","option","Item","as","Link","rowSize","paginationItems","forEach","thing","push","Row","item","Col","SortNav","sortParams","Navbar","variant","Nav","n","icon","DefaultPageButtons","toApiQuery","location","query","cookies","Cookies","defaultOptions","credentials","defaultHeaders","apiGetPostPut","url","a","data","method","BACKEND","dataEmpty","options","headers","body","JSON","stringify","apiResp","apiDelete","fetch","resp","respData","json","ok","api","login","logout","editCard","cardId","cardData","deleteCard","createUser","userData","createVote","voteData","createSubscription","subData","createFollow","followData","createCard","getSession","getCard","getUser","userId","getCategory","categoryName","getCardList","getHomeCards","getTopThreeCards","name","getTopThreeCategories","getPopularCategories","AuthContext","createContext","user","ifAuth","callback","ProvideAuth","children","auth","useState","setUser","history","useHistory","IFAUTH","useProvideAuth","useEffect","Provider","useAuth","useContext","Header","card","SubscribeButton","subbed","apiCall","subState","setSubbed","Button","onClick","HashtagButton","category","CategoryList","categories","xs","style","backgroundImage","icon_url","backgroundPosition","backgroundSize","subscriber_count","is_subscribed","id","monthNames","paddingIndexes","tileIndex","padding","pad","includes","padIndex","indexOf","splice","dateStr","s","date","Date","parse","now","yearStr","getFullYear","getMonth","getDate","minute","hour","day","month","times","year","createdAtStr","isoString","diff","getTime","str","time","floor","upvoteScore","uv","VoteButtons","itemMargin","upvoted","setUpvoted","upColor","downColor","scoreColor","scoreAdjust","voteAction","up","score","faArrowDown","VoteButtonSingle","EditDeleteButtons","showModal","setModal","toggleModal","author","faEdit","cursor","faTrash","Modal","show","dialogAs","Dialog","centered","closeButton","Body","Footer","go","CardInfo","link","collapse","minimal","userLink","categoryLink","cardLinkUrl","CardLink","CardDetails","created_at","Hashtags","hashtags","hashtag","margin","CardInfoContents","lg","CardInfoCollapse","collapsed","setCollapsed","CollapseButton","faPlusCircle","faMinusCircle","ApiRender","loadingMessage","component","setResp","APIRENDER","RespStatus","detail","Spinner","animation","role","Component","PageContent","PopularCategoriesSidebar","results","row","CardList","home","CardLayout","PaginationThing","header","count","page_size","CardListSidebar","infoCol","sidebarCol","Container","HomePageView","Helmet","CategoryHeader","searchParams","hashtagParams","encodeURIComponent","TopIcon","bottom","position","width","height","src","alt","banner_url","marginLeft","faTimes","Sidebar","description","related_categories","CategoryView","useParams","UserHeader","categories_created","UserView","scrollToY","y","window","scrollTo","behavior","scrollToTop","scrollToBottom","document","scrollHeight","NavBarUnit","spacer","buttons","navItem","text","onclick","fixed","undefined","faQuestion","faHandPointDown","faHandPointUp","things","AppNavBar","isMobile","Boolean","navigator","maxTouchPoints","solutionArrays","side","edge","vert","horiz","diag1","diag2","tileHover","tile","state","setCard","tiles","hovered","tileClick","setSolution","clicked","newSolution","some","line","every","checkForBingo","clickedColor","hoverColor","tileColor","defaultColor","passedCard","cardInfo","CARD","filterTiles","toLowerCase","tileSearchQuery","setTileSearchQuery","solution","topVisible","setTopVisible","overviewVisible","setOverviewVisible","gridMode","setGridMode","filteredTiles","setFilteredTiles","inputRef","useRef","solved","hideTop","current","focus","faSearch","faExpandAlt","toggleClass","overviewClass","gridColSize","gridRowCols","gridInfoColSize","gridTileClass","gridTileSize","gridSearchSize","faEye","faAlignJustify","faTh","gridValue","InputGroup","Text","Form","Control","placeholder","type","onChange","e","target","onFocus","ref","onMouseEnter","onMouseLeave","md","href","resetBingo","CardView","Loading","message","stringField","Yup","default","required","LoginSchema","shape","username","password","LoginForm","valid","done","setLoginState","handleSubmit","values","resetForm","FormView","noValidate","Label","validationSchema","initialValues","onSubmit","isSubmitting","setSubmitting","LoginView","SignupView","SignupSchema","max","confirmPassword","when","is","val","then","oneOf","email","signupFields","SignupForm","createdSuccess","setCreatedSuccess","submitDone","setDone","submitUser","setErrors","fromEntries","SignupFormLayout","fieldLabel","fieldName","fieldType","disabled","SignupSuccess","validateOnBlur","validateOnChange","getDefault","SearchView","searchQuery","cardQuery","SEARCHVIEW","getCardSchema","defaultValue","categoryField","matches","excludeEmptyString","tileGenerator","f","tileFields","getTileFields","next","valueFunc","tile_1","tile_2","tile_3","tile_4","tile_5","tile_6","tile_7","tile_8","tile_9","tile_10","tile_11","tile_12","tile_13","tile_14","tile_15","tile_16","tile_17","tile_18","tile_19","tile_20","tile_21","tile_22","tile_23","tile_24","tile_25","tileFieldNames","FormHelperContext","setFieldValue","CategorySearchBar","cardSchema","initState","showDropdown","loading","errors","useReducer","action","CATEGORYSEARCHBAR","setTimeout","queryRef","getCategories","payload","categoryValue","dispatch","showQueryButton","LoadingIndicator","ClearButton","QueryButton","DropdownItems","eventKey","CategoryErrors","err","DropdownContainer","forwardRef","onToggle","onSelect","errs","validateSync","FormRowIndicator","meta","touched","error","FormRow","field","prependColor","FormControl","preventEnter","keyEvent","preventDefault","CardForm","headerText","onKeyDown","CardCreateEditLayout","success","setSuccess","SCHEMA","valuesToAPI","startsWith","reverse","tileArray","apiValues","useCardSchema","submitCard","v","CARDCREATE","formVerb","formVerbCap","charAt","toUpperCase","slice","dirty","CardCreateView","SearchBar","resultMapper","SEARCHBAR","getResults","searchResults","Icon","LoginDropdown","setDropdown","toggleDropdown","IconRow","UserItems","faUser","faCog","faSignOutAlt","faSignInAlt","faUserCircle","align","TopNavBar","showSearch","setSearch","searchbar","result","faPencilAlt","App","containerRoutes","CardCreateViewkjahsdk","exact","path","View","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e34a2d14.chunk.js","sourcesContent":["const DEBUG = true;\nconst debugLog = (props: any) => {\n  if (DEBUG) {\n    const logBody = Object.entries(props)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\n  \");\n\n    console.log(`{\\n  ${logBody}\\n}`);\n  }\n  //DEBUG && console.log(props);\n};\n\nexport default debugLog;\n","import Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { ReactElement } from \"react\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition, faFire, faSun, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport debugLog from \"../debug\";\n\ninterface PaginationProps {\n    itemCount: number;\n    pageSize: number;\n    label: string;\n    top?: boolean;\n}\n\nconst Pagination = ({ pageSize, itemCount, label, top = false }: PaginationProps) => {\n    const buttonShape = \"w-100 rounded p-2 text-center\";\n    const pageCount = Math.ceil(itemCount / pageSize);\n\n    const loc = useLocation();\n    const paginationUrl = loc.pathname;\n    const urlParams = new URLSearchParams(loc.search);\n    const currentSort = getDefaultSort(urlParams);\n    const pageNum = parseInt(urlParams.get(\"page\") || \"1\");\n    urlParams.delete(\"page\");\n    const urlParamsString = urlParams.toString();\n\n    const PageItem = ({ index = 0 }: { index?: number }) => {\n        const color = index === pageNum ? \"bg-sdark-orange text-white\" : \"sdark-fg\";\n\n        const innerButton = (\n            <div className={`${buttonShape} ${color} ${index ? \"page-btn\" : \"\"}`}>{index ? index : \"...\"}</div>\n        );\n\n        let button: ReactElement;\n\n        if (index && index !== pageNum) {\n            let params = new URLSearchParams(urlParamsString);\n            params.set(\"page\", `${index}`);\n            button = <Link to={`${paginationUrl}?${params.toString()}`}>{innerButton}</Link>;\n        } else {\n            button = innerButton;\n        }\n\n        return button;\n    };\n\n    const sortDropdown = (\n        <Dropdown>\n            <Dropdown.Toggle id=\"sort-dropdown\" className={`sdark-fg border-0 p-0 w-100 ${buttonShape}`}>\n                sort: {currentSort}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className=\"w-100 slight-bg\">\n                <Dropdown.ItemText>Sort by</Dropdown.ItemText>\n                <Dropdown.Divider />\n                {Object.keys(orderingParams)\n                    .filter((option) => option !== currentSort)\n                    .map((option) => {\n                        urlParams.set(\"sort\", option);\n                        return (\n                            <Dropdown.Item as={Link} to={`${paginationUrl}?${urlParams.toString()}`}>\n                                {option}\n                            </Dropdown.Item>\n                        );\n                    })}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n\n    const PageButtons = ({ rowSize }: { rowSize: number }) => {\n        let paginationItems: (number | null)[] = pagination(pageNum, pageCount);\n\n        if (paginationItems.length < rowSize)\n            Array(rowSize - paginationItems.length)\n                .fill(null)\n                .forEach((thing) => paginationItems.push(thing));\n\n        const endIndex = rowSize - 1;\n\n        return (\n            <Row className={`g-2 row-cols-${rowSize}`}>\n                {paginationItems.map((item, index) => (\n                    <Col>{item !== null && <PageItem index={item} />}</Col>\n                ))}\n            </Row>\n        );\n    };\n\n    const InfoCluster = () => (\n        <Row>\n            <Col xs={4} className=\"p-0 pe-1\">\n                <div className={`sdark-fg ${buttonShape}`}>Page {pageNum}</div>\n            </Col>\n            <Col xs={4} className=\"px-1\">\n                <div className={`sdark-fg ${buttonShape}`}>\n                    {itemCount} {label}\n                </div>\n            </Col>\n            <Col xs={4} className=\"ps-1 p-0\">\n                {sortDropdown}\n            </Col>\n        </Row>\n    );\n\n    /*\n    const SortRow = () => {\n        const sortParams = new URLSearchParams(loc.search);\n        sortParams.delete(\"page\");\n        const currentSortIndicator = \"rounded-pill sdark-bg\";\n\n        return (\n            <Row className=\"rounded p-2 sdark-fg\">\n                <Col xs={5}>\n                    <Row>\n                        {Object.entries(orderingParams).map(([n, q]) => {\n                            sortParams.set(\"sort\", n);\n                            return (\n                                <Col className=\"px-2\">\n                                    <div className={`p-2 text-center ${n === currentSort ? currentSortIndicator : \"\"}`}>\n                                        <Link to={`${paginationUrl}?${sortParams.toString()}`}>\n                                            <p className=\"text-capitalize m-0\">\n                                                <FaIcon icon={orderingIcons[n]} className=\"me-2\" />\n                                                {n}\n                                            </p>\n                                        </Link>\n                                    </div>\n                                </Col>\n                            );\n                        })}\n                    </Row>\n                </Col>\n            </Row>\n        );\n    };\n    */\n\n    const SortNav = () => {\n        const sortParams = new URLSearchParams(loc.search);\n        sortParams.delete(\"page\");\n        const currentSortIndicator = \"rounded-pill sdark-bg\";\n\n        return (\n            <div className=\"rounded py-2 px-3 sdark-fg\">\n                <Navbar variant=\"dark\" className=\"p-0\">\n                    <Nav>\n                        {Object.entries(orderingParams).map(([n, q]) => {\n                            sortParams.set(\"sort\", n);\n                            return (\n                                <Nav.Item className={`px-2 me-2 ${n === currentSort ? currentSortIndicator : \"\"}`}>\n                                    <Nav.Link as={Link} to={`${paginationUrl}?${sortParams.toString()}`}>\n                                        <p className=\"text-capitalize m-0\">\n                                            <FaIcon icon={orderingIcons[n]} className=\"me-3\" />\n                                            {n}\n                                        </p>\n                                    </Nav.Link>\n                                </Nav.Item>\n                            );\n                        })}\n                    </Nav>\n                </Navbar>\n            </div>\n        );\n    };\n\n    const DefaultPageButtons = () => <PageButtons rowSize={7} />;\n\n    return top ? <SortNav /> : <DefaultPageButtons />;\n\n    //return (\n    //    <>\n    //        {/* mobile */}\n    //        <div className=\"d-lg-none\">\n    //            <Row>\n    //                {top && (\n    //                    <Col xs={12}>\n    //                        <div className=\"pb-2\">{infoCluster}</div>\n    //                        <div className=\"pt-2\"></div>\n    //                    </Col>\n    //                )}\n    //                <Col xs={12}>{pageButtons}</Col>\n    //            </Row>\n    //        </div>\n\n    //        {/* desktop */}\n    //        <div className=\"d-none d-lg-block\">\n    //            <Row>\n    //                <Col xs={6}>\n    //                    <div className=\"pe-2\">{pageButtons}</div>\n    //                </Col>\n    //                {top && (\n    //                    <Col xs={6}>\n    //                        <div className=\"ps-2\">{infoCluster}</div>\n    //                    </Col>\n    //                )}\n    //            </Row>\n    //        </div>\n    //    </>\n    //);\n};\nconst getDefaultSort = (params: URLSearchParams) => params.get(\"sort\") || \"hot\";\nconst orderingParams: { [s: string]: string } = {\n    hot: \"-hot,-best,-created_at\",\n    new: \"-created_at\",\n    best: \"-best,-created_at\",\n};\nconst orderingIcons: { [s: string]: IconDefinition } = {\n    hot: faFire,\n    new: faSun,\n    best: faArrowUp,\n};\n\nconst getRange = (start: number, end: number) => {\n    return Array(end - start + 1)\n        .fill(0)\n        .map((_, i) => i + start);\n};\n\nconst pagination = (currentPage: number, pageCount: number) => {\n    let delta: number;\n    if (pageCount <= 7) {\n        // delta === 7: [1 2 3 4 5 6 7]\n        delta = 7;\n    } else {\n        // delta === 2: [1 ... 4 5 6 ... 10]\n        // delta === 4: [1 2 3 4 5 ... 10]\n        delta = currentPage > 4 && currentPage < pageCount - 3 ? 2 : 4;\n    }\n\n    const range = {\n        start: Math.round(currentPage - delta / 2),\n        end: Math.round(currentPage + delta / 2),\n    };\n\n    if (range.start - 1 === 1 || range.end + 1 === pageCount) {\n        range.start += 1;\n        range.end += 1;\n    }\n\n    let pages: number[] =\n        currentPage > delta\n            ? getRange(Math.min(range.start, pageCount - delta), Math.min(range.end, pageCount))\n            : getRange(1, Math.min(pageCount, delta + 1));\n\n    const withDots = (value: number, pair: number[]) => (pages.length + 1 !== pageCount ? pair : [value]);\n\n    if (pages[0] !== 1) {\n        let wd = withDots(1, [1, 0]);\n        debugLog({ FIRST: \"\", wd, pages });\n        pages = [...wd, ...pages];\n    }\n\n    if (pages[pages.length - 1] < pageCount) {\n        let wd = withDots(pageCount, [0, pageCount]);\n        debugLog({ SECOND: \"\", wd, pages });\n        pages = [...pages, ...wd];\n    }\n\n    return pages;\n};\n\nexport default Pagination;\n\nexport const toApiQuery = (location: Location, query: object = {}) => {\n    let urlParams = new URLSearchParams(location.search);\n    urlParams.set(\"ordering\", orderingParams[getDefaultSort(urlParams)]);\n    urlParams.delete(\"sort\");\n\n    Object.entries(query).forEach(([key, value]) => urlParams.set(key, value));\n\n    return urlParams.toString();\n};\n","import Cookies from \"universal-cookie\";\nimport { Location } from \"history\";\n\nimport { toApiQuery } from \"../components/pagination\";\nimport { User, BingoCard, Category } from \"../types\";\nimport debugLog from \"../debug\";\n\n// here for pasting purposes\n// import api from '../api/backend';\n\nconst cookies = new Cookies();\nconst baseUrl = \"/api\";\nconst defaultOptions = { credentials: \"same-origin\" };\nconst defaultHeaders = () => ({\n    \"X-CSRFToken\": cookies.get(\"csrftoken\"),\n});\n\nexport type ResponseData<T = any> = T | null;\n\nexport interface ApiResponse<T = any> {\n    data: ResponseData<T>;\n    ok: boolean;\n}\n\nconst apiGetPostPut = async <T = any>(url: string, data: object = {}, method?: string): Promise<ApiResponse<T>> => {\n    debugLog({ BACKEND: 1, url, data });\n    let dataEmpty = Object.keys(data).length === 0;\n    method = method || (!dataEmpty ? \"POST\" : \"GET\");\n    let options: any = { ...defaultOptions, method };\n\n    if (!dataEmpty) {\n        options = {\n            ...options,\n            headers: {\n                ...defaultHeaders(),\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n        };\n    }\n\n    return await apiResp<T>(url, options);\n};\n\nconst apiDelete = async <T = any>(url: string): Promise<ApiResponse<T>> => {\n    return await apiResp<T>(url, {\n        ...defaultOptions,\n        method: \"DELETE\",\n        headers: { ...defaultHeaders() },\n    });\n};\n\nconst apiResp = async <T = any>(url: string, options: any): Promise<ApiResponse<T>> => {\n    let resp = await fetch(`${baseUrl}${url}`, options);\n    let respData: T | null = null;\n\n    try {\n        respData = await resp.json();\n    } catch {}\n\n    return {\n        data: respData,\n        ok: resp.ok,\n    };\n};\n\ninterface VoteData {\n    card: { id: number };\n    up: boolean;\n}\n\ninterface UserData {\n    username: string;\n    password: string;\n    email: string;\n}\n\ninterface LoginData {\n    user?: User;\n    valid: boolean;\n}\n\ninterface SubscribeData {\n    id: number;\n}\n\ninterface FollowData {\n    id: number;\n}\n\nconst api = {\n    login(credentials: object) {\n        return apiGetPostPut<LoginData>(\"/login/\", credentials);\n    },\n    logout() {\n        return apiGetPostPut(\"/logout/\");\n    },\n\n    // PUT\n    editCard(cardId: number, cardData: object) {\n        return apiGetPostPut(`/cards/${cardId}/`, cardData, \"PATCH\");\n    },\n\n    // DELETE\n    deleteCard(cardId: number) {\n        return apiDelete(`/cards/${cardId}/`);\n    },\n\n    // POST\n    createUser(userData: UserData) {\n        return apiGetPostPut(\"/signup/\", userData);\n    },\n    createVote(voteData: VoteData) {\n        return apiGetPostPut(\"/votes/\", voteData);\n    },\n    createSubscription(subData: SubscribeData) {\n        return apiGetPostPut(\"/subscribe/\", subData);\n    },\n    createFollow(followData: FollowData) {\n        return apiGetPostPut(\"/follow/\", followData);\n    },\n    createCard(cardData: object) {\n        return apiGetPostPut(\"/cards/\", cardData);\n    },\n\n    // GET\n    getSession() {\n        return apiGetPostPut(\"/session/\");\n    },\n    getCard(cardId: string) {\n        return apiGetPostPut(`/cards/${cardId}/`);\n    },\n    getUser(userId: string) {\n        return apiGetPostPut(`/users/${userId}/`);\n    },\n    getCategory(categoryName: string) {\n        return apiGetPostPut(`/categories/${categoryName}/`);\n    },\n\n    getCardList(location: Location, query: object = {}) {\n        return apiGetPostPut(`/cards/?${toApiQuery(location, query)}`);\n    },\n    getHomeCards(location: Location, query: object = {}) {\n        return apiGetPostPut(`/home/?${toApiQuery(location, query)}`);\n    },\n\n    getTopThreeCards(name: string) {\n        return apiGetPostPut<BingoCard[]>(`/bar/cards/?search=${name}`);\n    },\n    getTopThreeCategories(name: string) {\n        return apiGetPostPut<Category[]>(`/bar/categories/?search=${name}`);\n    },\n\n    getPopularCategories() {\n        return apiGetPostPut<Category[]>(\"/popular/categories/\");\n    },\n};\n\nexport default api;\n","import { useContext, useState, useEffect, createContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserState } from \"./types\";\nimport api, { ApiResponse } from \"./api/backend\";\nimport debugLog from \"./debug\";\n\ntype AuthCallback = (resp: ApiResponse) => void;\n\ninterface LoginProps {\n    credentials: object;\n    callback?: AuthCallback;\n}\n\ninterface LogoutProps {\n    callback?: AuthCallback;\n}\n\ninterface AuthData {\n    user: UserState;\n    login: (props: LoginProps) => Promise<void>;\n    logout: (props: LogoutProps) => Promise<void>;\n    getSession: () => Promise<void>;\n    ifAuth: (callback: () => void) => void;\n}\n\nexport const AuthContext = createContext<AuthData>({\n    user: null,\n    async login(props: LoginProps) {},\n    async logout(props: LogoutProps) {},\n    async getSession() {},\n    ifAuth(callback: () => void) {},\n});\n\nconst useProvideAuth = () => {\n    const [user, setUser] = useState<UserState>(null);\n    const history = useHistory();\n\n    return {\n        user,\n        async login({ credentials, callback }: LoginProps) {\n            let { data, ok } = await api.login(credentials);\n            if (ok && data && data.user) setUser(data.user);\n            callback && callback({ data, ok });\n        },\n        async logout({ callback }: LogoutProps) {\n            let { data, ok } = await api.logout();\n            if (ok) setUser(null);\n            callback && callback({ data, ok });\n        },\n        async getSession() {\n            let { data, ok } = await api.getSession();\n            if (ok && data && data.user) setUser(data.user);\n        },\n        ifAuth(callback: () => void) {\n            if (user) {\n                callback();\n            } else {\n                debugLog({ IFAUTH: \"redirect to login\" });\n                history.push(\"/login/\");\n            }\n        },\n    };\n};\n\nexport const ProvideAuth = ({ children }: { children: any }) => {\n    const auth = useProvideAuth();\n\n    useEffect(() => {\n        auth.getSession();\n    }, []);\n\n    return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => useContext(AuthContext);\n","import { ReactNode, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n//import { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\n//import { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport api, { ApiResponse } from \"../api/backend\";\nimport { useAuth } from \"../auth\";\nimport { Category } from \"../types\";\n\ninterface HeaderProps {\n    card?: boolean;\n    children: ReactNode;\n}\n\nexport const Header = ({ card, children }: HeaderProps) => (\n    <div className=\"row\">\n        <div className=\"w-100\">\n            <div className=\"row\">\n                <div className=\"col-2 d-none d-lg-block\" />\n                <div className=\"col-12 col-lg-8\">\n                    <div>\n                        {card ? <div className=\"py-4 text-center rounded sdark-fg m-2\">{children}</div> : children}\n                    </div>\n                </div>\n                <div className=\"col-2 d-none d-lg-block\" />\n            </div>\n        </div>\n    </div>\n);\n\ninterface InfoHeaderProps {\n    subject: string;\n    info: ReactNode[];\n}\n\nconst infoPadding = (index: number, max: number) => {\n    switch (index) {\n        case 0:\n            return `pb-${gridPadding}`;\n        case max:\n            return `pt-${gridPadding}`;\n        default:\n            return `py-${gridPadding}`;\n    }\n};\n\nconst gridPadding = 1;\nexport const headerItem = \"rounded text-center sdark-fg p-3 w-100\";\nexport const centeredItem = \"h-100 d-flex align-items-center justify-content-center\";\n\nexport const InfoHeader = ({ subject, info }: InfoHeaderProps) => (\n    <Header>\n        <div className=\"p-2\">\n            <div className=\"row\">\n                <div className={`col-8 pe-${gridPadding}`}>\n                    <div className={`${centeredItem} ${headerItem}`}>\n                        <h3>{subject}</h3>\n                    </div>\n                </div>\n                <div className={`col-4 ps-${gridPadding}`}>\n                    <div>\n                        <div className=\"col\">\n                            {info.map((tidbit, index) => (\n                                <div className={`row ${infoPadding(index, info.length - 1)}`}>\n                                    <div className={`${headerItem} w-100`}>{tidbit}</div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"pt-2 px-2 d-none\">\n            <div className=\"row\">\n                <div className={`col pb-${gridPadding}`}>\n                    <div className={headerItem}>\n                        <div className=\"p-2\">\n                            <h2>{subject}</h2>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row row-cols-2\">\n                {info.map((tidbit, index) => (\n                    <div className={`col py-${gridPadding} ${index % 2 === 0 ? \"pr\" : \"pl\"}-${gridPadding}`}>\n                        <div className={`${centeredItem} ${headerItem}`}>{tidbit}</div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </Header>\n);\n\ninterface SubscribeButtonProps {\n    subbed: boolean | null;\n    apiCall: () => Promise<ApiResponse>;\n}\n\nexport const SubscribeButton = ({ subbed, apiCall }: SubscribeButtonProps) => {\n    const [subState, setSubbed] = useState(subbed);\n    const { ifAuth } = useAuth();\n\n    return (\n        <Button\n            variant={subState ? \"secondary\" : \"danger\"}\n            className=\"rounded-pill\"\n            onClick={() =>\n                ifAuth(() => {\n                    setSubbed(!subState);\n                    apiCall();\n                })\n            }\n        >\n            {subState ? \"Subscribed\" : \"Subscribe\"}\n        </Button>\n    );\n};\n\ninterface HashtagButtonProps {\n    name: string;\n    category: Category;\n    color?: string;\n}\n\nexport const HashtagButton = ({ category, name }: HashtagButtonProps) => {\n    const history = useHistory();\n\n    return (\n        <Button\n            variant=\"primary\"\n            className=\"text-white rounded-pill py-1\"\n            onClick={() => history.push(`/categories/${category.name}/?hashtag=${name}`)}\n        >\n            #{name}\n        </Button>\n    );\n};\n\ninterface CategoryListProps {\n    categories: Category[];\n}\n\nexport const CategoryList = ({ categories }: CategoryListProps) => {\n    return (\n        <Col>\n            {categories.map((category) => (\n                <Row>\n                    <Col className=\"my-2\">\n                        <Row>\n                            <Col xs={2}>\n                                <div\n                                    className=\"rounded-circle p-4\"\n                                    style={{\n                                        backgroundImage: `url(\"${category.icon_url}\")`,\n                                        backgroundPosition: \"center\",\n                                        backgroundSize: \"cover\",\n                                        //width: \"40px\",\n                                        //width: \"40px\",\n                                        //height: \"40px\",\n                                    }}\n                                ></div>\n                            </Col>\n                            <Col>\n                                <small>\n                                    <Link to={`/categories/${category.name}`}>\n                                        <b>{category.name}</b>\n                                    </Link>\n                                    <p>\n                                        {category.subscriber_count} Subscriber\n                                        {category.subscriber_count === 1 ? \"\" : \"s\"}\n                                    </p>\n                                </small>\n                            </Col>\n                            <Col className=\"pe-0\">\n                                <SubscribeButton\n                                    subbed={category.is_subscribed}\n                                    apiCall={() => api.createSubscription({ id: category.id })}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            ))}\n        </Col>\n    );\n};\n","export const edgePadding: string[] = (() => {\n    let paddingIndexes: { [s: string]: number[] } = {\n        \"pt-1\": [1, 2, 3, 4, 5], // top\n        \"pe-1\": [5, 10, 15, 20, 25], // right\n        \"ps-1\": [1, 6, 11, 16, 21], // left\n        \"pb-1\": [21, 22, 23, 24, 25], // bottom\n    };\n\n    return Array(25)\n        .fill(0)\n        .map((_, tileIndex) => {\n            tileIndex++;\n            let padding = [\"pt-1\", \"pb-1\", \"ps-1\", \"pe-1\"];\n\n            Object.entries(paddingIndexes).forEach(([pad, indexes]) => {\n                if (indexes.includes(tileIndex)) {\n                    let padIndex = padding.indexOf(pad);\n                    padding.splice(padIndex, 1);\n                }\n            });\n\n            return padding.join(\" \");\n        });\n})();\n\n/*\nconst monthNames = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sept',\n    'Oct',\n    'Nov',\n    'Dec',\n];\n*/\n\nconst monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n];\n\nexport const dateStr = (s: string) => {\n    const date = new Date(Date.parse(s));\n    const now = new Date();\n    const yearStr = date.getFullYear() !== now.getFullYear() ? `, ${date.getFullYear() % 100}` : \"\";\n\n    //return date.toLocaleString();\n    return `${monthNames[date.getMonth()]} ${date.getDate()}${yearStr}`;\n};\n\nconst minute = 1000 * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst month = day * 31;\nconst year = month * 12;\nconst times: { [s: string]: number } = {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n};\n\nexport const createdAtStr = (isoString: string) => {\n    var now = new Date(Date.now());\n    var date = new Date(Date.parse(isoString));\n    var diff = now.getTime() - date.getTime();\n\n    for (const str in times) {\n        let time = times[str];\n        if (diff >= time) {\n            let value = Math.floor(diff / time);\n            value = time === minute ? value % 60 : value;\n            let s = value > 1 ? \"s\" : \"\";\n            return `${value} ${str}${s} ago`;\n        }\n    }\n\n    return \"just now\";\n};\n","import { useState } from \"react\";\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faMinusCircle,\n    faPlusCircle,\n    faTrash,\n    faEdit,\n    faArrowUp,\n    faArrowDown,\n    IconDefinition,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { BingoCard } from \"../types\";\nimport api from \"../api/backend\";\nimport { useAuth } from \"../auth\";\nimport { HashtagButton } from \"../components/snippets\";\nimport { createdAtStr } from \"../components/helpers\";\n//import debugLog from \"../debug\";\n\nconst upvoteScore = (uv: boolean | null) => (uv === null ? 0 : uv ? 1 : -1);\n\ninterface VoteButtonsProps {\n    card: BingoCard;\n    itemMargin?: string;\n}\n\nconst VoteButtons = ({ card, itemMargin = \"\" }: VoteButtonsProps) => {\n    const [upvoted, setUpvoted] = useState<boolean | null>(card.upvoted);\n\n    const upColor = upvoted ? \"orange\" : \"fg\";\n    const downColor = upvoted === false ? \"violet\" : \"fg\";\n    const scoreColor = upvoted === null ? \"fg\" : upvoted ? \"orange\" : \"violet\";\n    const scoreAdjust = upvoteScore(upvoted) - upvoteScore(card.upvoted);\n\n    const voteAction = (up: boolean) => {\n        setUpvoted(upvoted === null || up !== upvoted ? up : null);\n        api.createVote({ card: { id: card.id }, up: up });\n    };\n\n    /*\n        <Col xs={2} className=\"border-sdark-right text-center\">\n        </Col>\n    */\n    return (\n        <>\n            <div className={itemMargin}>\n                <VoteButtonSingle\n                    icon={faArrowUp}\n                    color={`text-sdark-${upColor}`}\n                    voteAction={() => voteAction(true)}\n                />\n            </div>\n            <div className={`text-sdark-${scoreColor} ${itemMargin}`}>\n                <h5 className=\"m-0\">{card.score + scoreAdjust}</h5>\n            </div>\n            <div className={itemMargin}>\n                <VoteButtonSingle\n                    icon={faArrowDown}\n                    color={`text-sdark-${downColor}`}\n                    voteAction={() => voteAction(false)}\n                />\n            </div>\n        </>\n    );\n};\n\ninterface VoteButtonSingleProps {\n    icon: IconDefinition;\n    color: string;\n    voteAction: () => void;\n}\n\nconst VoteButtonSingle = ({ icon, color, voteAction }: VoteButtonSingleProps) => {\n    const { ifAuth } = useAuth();\n\n    return (\n        <div className={`${color} vote-btn p-1 rounded`} onClick={() => ifAuth(voteAction)}>\n            <FaIcon icon={icon} />\n        </div>\n    );\n};\n\nconst EditDeleteButtons = ({ card, itemMargin = \"\" }: { itemMargin?: string; card: BingoCard }) => {\n    const { user } = useAuth();\n    const history = useHistory();\n    const [showModal, setModal] = useState(false);\n    const toggleModal = () => setModal(!showModal);\n\n    return (\n        <>\n            {user && card.author.id === user.id && (\n                <>\n                    <Link to={`/cards/${card.id}/edit/`}>\n                        <div className={`text-sdark-red ${itemMargin}`}>\n                            <FaIcon icon={faEdit} />\n                        </div>\n                    </Link>\n                    <div className={`text-sdark-red ${itemMargin}`} style={{ cursor: \"pointer\" }} onClick={toggleModal}>\n                        <FaIcon icon={faTrash} />\n                    </div>\n                    <Modal\n                        show={showModal}\n                        dialogAs={(props) => (\n                            <Modal.Dialog centered>\n                                <div {...props} className=\"modal-content rounded slight-bg\"></div>\n                            </Modal.Dialog>\n                        )}\n                    >\n                        <Modal.Header closeButton>Delete Bingo Card</Modal.Header>\n                        <Modal.Body>Are you sure you want to delete bingo card \"{card.name}\"?</Modal.Body>\n                        <Modal.Footer>\n                            <Button\n                                variant=\"danger\"\n                                onClick={async () => {\n                                    await api.deleteCard(card.id);\n                                    history.go(0);\n                                }}\n                            >\n                                Yes\n                            </Button>\n                            <Button variant=\"success\" onClick={toggleModal}>\n                                No\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </>\n            )}\n        </>\n    );\n};\n\ninterface CardInfoProps {\n    card: BingoCard;\n    minimal?: boolean;\n    link?: boolean;\n    collapse?: boolean;\n}\n\nconst CardInfo = ({ card, link, collapse = false, minimal = false }: CardInfoProps) => {\n    const { user } = useAuth();\n\n    const userLink = <Link to={`/users/${card.author.id}/`}>{card.author.name}</Link>;\n    const categoryLink = <Link to={`/categories/${card.category.name}/`}>{card.category.name}</Link>;\n    const cardLinkUrl = `/cards/${card.id}/`;\n\n    const CardLink = () =>\n        link ? (\n            <Link to={cardLinkUrl}>\n                <h5 className=\"m-0\">{card.name}</h5>\n            </Link>\n        ) : (\n            <h5 className=\"m-0\">{card.name}</h5>\n        );\n\n    const CardDetails = () => (\n        <p className=\"text-sdark-fg m-0\">\n            submitted {createdAtStr(card.created_at)} by {userLink} to {categoryLink}\n        </p>\n    );\n\n    const Hashtags = ({ itemMargin = \"\" }: { itemMargin?: string }) => (\n        <>\n            {card.hashtags.map((hashtag) => (\n                <div className={itemMargin}>\n                    <HashtagButton name={hashtag.name} category={card.category} />\n                </div>\n            ))}\n        </>\n    );\n\n    const margin = \"me-3\";\n    const CardInfoContents = () => (\n        <Row className=\"g-3\">\n            <Col xs={12}>\n                <CardDetails />\n            </Col>\n            <Col xs={12} lg={6} className=\"order-lg-3\">\n                <div className=\"d-flex flex-wrap align-items-center\">\n                    <Hashtags itemMargin=\"pe-2 py-1\" />\n                </div>\n            </Col>\n            <Col xs={12} lg={6} className=\"order-lg-2\">\n                <div className=\"d-flex flex-wrap align-items-center\">\n                    <VoteButtons card={card} itemMargin={margin} />\n                    <EditDeleteButtons card={card} itemMargin={margin} />\n                </div>\n            </Col>\n        </Row>\n    );\n\n    const CardInfoCollapse = () => {\n        const [collapsed, setCollapsed] = useState(collapse);\n\n        // responsive collapse\n        // collapse on toggle, but also auto-collapse on mobile\n        // idk if I'm crazy but this half makes sense\n        //\n        const collapsedClass = collapsed ? \"\" : \"\";\n        const expandedClass = collapsed ? \"\" : \"\";\n\n        const CollapseButton = () => (\n            <div\n                className=\"hover-white rounded-circle\"\n                style={{ cursor: \"pointer\" }}\n                onClick={() => setCollapsed(!collapsed)}\n            >\n                <FaIcon icon={collapsed ? faPlusCircle : faMinusCircle} />\n            </div>\n        );\n\n        const gutter = \"g-2\";\n\n        return (\n            <div className=\"p-3 rounded sdark-fg\">\n                <Row>\n                    <Col xs={2}>\n                        <div className=\"d-flex justify-content-center\">\n                            <CollapseButton />\n                        </div>\n                    </Col>\n                    <Col xs={10} className=\"ps-0\">\n                        <Row className={gutter}>\n                            <Col xs={12}>\n                                <CardLink />\n                            </Col>\n                            <Col id=\"collapse-content\" xs={12} className={collapsed ? \"d-none\" : \"\"}>\n                                <Row className={gutter}>\n                                    <Col xs={12}>\n                                        <CardDetails />\n                                    </Col>\n                                    <Col xs={12}>\n                                        <div className=\"d-flex flex-wrap align-items-center\">\n                                            <Hashtags itemMargin=\"pe-2 py-1\" />\n                                        </div>\n                                    </Col>\n                                    <Col xs={12}>\n                                        <div className=\"d-flex flex-wrap align-items-center\">\n                                            <VoteButtons card={card} itemMargin={margin} />\n                                            <EditDeleteButtons card={card} itemMargin={margin} />\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </div>\n        );\n    };\n    return minimal ? <CardInfoContents /> : <CardInfoCollapse />;\n};\n\nexport default CardInfo;\n/*\n    const CardDetails = () => (\n        <>\n            <Row>\n                <Col>\n                    <CardLink />\n                    <p className=\"text-sdark-fg\">\n                        submitted {createdAtStr(card.created_at)} by {userLink} to {categoryLink}\n                    </p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {card.hashtags.map((hashtag) => (\n                        <HashtagButton name={hashtag.name} category={card.category} />\n                    ))}\n                </Col>\n            </Row>\n        </>\n    );\n\n* */\n","import { useEffect, useState } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport { ApiResponse } from './backend';\nimport debugLog from '../debug';\n\ninterface ComponentProps {\n    data: any;\n}\n\ninterface ApiRenderProps {\n    apiCall: () => Promise<ApiResponse>;\n    component: React.FunctionComponent<ComponentProps>;\n    loadingMessage?: string;\n    key: string;\n}\n\n\nconst ApiRender = ({ apiCall, loadingMessage, component }: ApiRenderProps) => {\n    const [{ data, ok }, setResp] = useState<ApiResponse>({ data: null, ok: true });\n\n    useEffect(() => {\n        (async () => {\n            debugLog({ APIRENDER: 'getting data', data, ok });\n            let respData = await apiCall();\n            setResp(respData);\n        })();\n    }, []);\n\n    const RespStatus = () => (\n         (data?.detail || !ok)\n            ?   <div className='text-sdark-red text-center my-4'>\n                    <h3>{`Error` + (data?.detail ? `: ${data.detail}` : '')}</h3>\n                </div>\n\n            :   <div className='text-center mt-4'>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                    {\n                        loadingMessage &&\n                            <div className=\"mt-2\">\n                                {loadingMessage}\n                            </div>\n                    }\n                </div>\n    );\n    \n    let Component = component;\n\n    const PageContent = () => (\n        data && (!data.detail && ok)\n            ? <Component data={data}/>\n            : <RespStatus/>\n    );\n \n    return  <PageContent/>;\n}\n\nexport default ApiRender;\n","import { Link } from \"react-router-dom\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport api from \"../api/backend\";\nimport ApiRender from \"../api/render\";\nimport { Category, SearchResults } from \"../types\";\nimport { CategoryList } from \"../components/snippets\";\nimport \"../scss/sidebar.scss\";\n\nconst Sidebar = () => {\n    return (\n        <>\n            <div className=\"py-2\"></div>\n            <Nav\n                className=\"col d-block bg-transparent sidebar\"\n                activeKey=\"/home\"\n                onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\n            >\n                <div className=\"sidebar-sticky\"></div>\n                {Array(4)\n                    .fill(0)\n                    .map((_, index) => (\n                        <Nav.Item className=\"rounded-pill mb-3 sdark-fg text-light\">\n                            <Nav.Link eventKey={`link-${index}`}>Link {index}</Nav.Link>\n                        </Nav.Item>\n                    ))}\n            </Nav>\n        </>\n    );\n};\n\nexport const PopularCategoriesSidebar = () => {\n    return (\n        <ApiRender\n            key=\"popular-categories\"\n            apiCall={() => api.getPopularCategories()}\n            component={({ data }: { data: SearchResults<Category> }) => (\n                <>\n                    <Col xs={12}>\n                        <div className=\"rounded sdark-fg p-3\">\n                            <Row>\n                                <Col>\n                                    <h4 className=\"mb-4\">Popular Categories</h4>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <CategoryList categories={data.results} />\n                            </Row>\n                        </div>\n                    </Col>\n                    <Col xs={12}>\n                        <div className=\"rounded sdark-fg p-3\">\n                            <h4 className=\"mb-4\">Links</h4>\n                            {[\n                                [\"One\", \"Two\"],\n                                [\"Three\", \"Four\"],\n                            ].map((row) => (\n                                <Row>\n                                    {row.map((label) => (\n                                        <Col>\n                                            <Link to=\"/\">{label}</Link>\n                                        </Col>\n                                    ))}\n                                </Row>\n                            ))}\n                        </div>\n                    </Col>\n                </>\n            )}\n        />\n    );\n};\n","import { ReactNode } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport Pagination from \"./pagination\";\nimport CardInfo from \"./cardinfo\";\n\nimport { BingoCard } from \"../types\";\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { Header } from \"../components/snippets\";\nimport { useAuth } from \"../auth\";\nimport { PopularCategoriesSidebar } from \"../components/sidebar\";\n\ninterface CardListProps {\n    query?: object;\n    key: string;\n    home?: boolean;\n}\n\nconst CardList = ({ home, query = {}, key }: CardListProps) => {\n    const { user } = useAuth();\n    const location = useLocation();\n    const apiCall = home && user ? api.getHomeCards : api.getCardList;\n\n    return <ApiRender apiCall={() => apiCall(location, query)} component={CardLayout} key={key} />;\n};\n\ninterface CardResults {\n    count: number;\n    page_size: number;\n    results: BingoCard[];\n}\n\nconst CardLayout = ({ data }: { data: CardResults }) => {\n    const PaginationThing = ({ header }: { header?: boolean }) => (\n        <Col xs={12}>\n            <Pagination itemCount={data.count} pageSize={data.page_size} label=\"cards\" top={header} />\n        </Col>\n    );\n\n    return (\n        <Row className=\"g-3\">\n            {data.count === 0 ? (\n                <Col xs={12}>\n                    <div className=\"text-center\">\n                        <h3>No results found.</h3>\n                    </div>\n                </Col>\n            ) : (\n                <>\n                    <PaginationThing header />\n                    {data.results.map((card) => (\n                        <Col xs={12}>\n                            <CardInfo card={card} link />\n                        </Col>\n                    ))}\n                    <PaginationThing />\n                </>\n            )}\n        </Row>\n    );\n\n    /*\n    return data.count === 0 ? (\n        <Row>\n            <Col className=\"p-2\">\n                <div className=\"rounded p-4 sdark-fg text-center\">\n                    <h3>No results found.</h3>\n                </div>\n            </Col>\n        </Row>\n    ) : (\n        <>\n            <PaginationThing header />\n            <Row className=\"row-cols-1\">\n                {data.results.map((card) => (\n                    <Col className=\"p-2\">\n                        <CardInfo card={card} link />\n                    </Col>\n                ))}\n            </Row>\n            <PaginationThing />\n        </>\n    );\n     */\n};\n\nexport default CardList;\n\ninterface CardListSidebarProps {\n    header?: ReactNode;\n    query?: object;\n    home?: boolean;\n    infoCol?: ReactNode;\n    sidebarCol?: ReactNode;\n}\n\nexport const CardListSidebar = ({ header, query, home, infoCol, sidebarCol }: CardListSidebarProps) => {\n    return (\n        <>\n            {header}\n\n            <div className=\"py-3\">\n                <Container>\n                    <Row className=\"g-3\">\n                        <Col xs={12} lg={8}>\n                            <Row className=\"g-3\">\n                                {infoCol}\n                                <Col xs={12}>\n                                    <CardList query={query} home={home} key={`${Date.now()}`} />\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col xs={4} className=\"d-none d-lg-block\">\n                            <Row className=\"g-3\">\n                                {sidebarCol}\n                                <PopularCategoriesSidebar />\n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </>\n    );\n};\n","import { Helmet } from \"react-helmet\";\nimport { CardListSidebar } from \"../components/cardlist\";\n\n/*\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link, useParams } from \"react-router-dom\";\n*/\n\nconst HomePageView = () => {\n    return (\n        <>\n            <Helmet>\n                <title>Home</title>\n            </Helmet>\n            <CardListSidebar home header={<></>} />\n        </>\n    );\n};\n\nexport default HomePageView;\n","import { useParams, useLocation, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { Category } from \"../types\";\nimport { CardListSidebar } from \"../components/cardlist\";\nimport { CategoryList, SubscribeButton, HashtagButton } from \"../components/snippets\";\nimport { dateStr } from \"../components/helpers\";\n\nconst CategoryView = () => {\n    const { categoryName }: { categoryName: string } = useParams();\n\n    return <ApiRender apiCall={() => api.getCategory(categoryName)} component={CategoryHeader} key={categoryName} />;\n};\n\n//const bannerImg =\n//    \"https://yt3.ggpht.com/Cxw4AarF_wX_PqgBJ-BsK6C_toAsxVAyGnsHJFssO9D7B3H2LS4xq1a7p0VSV-GstyLxPEOR5g=w1707-fcrop64=1,00005a57ffffa5a8-k-c0xffffffff-no-nd-rj\";\n//const iconImg = \"https://yt3.ggpht.com/ytc/AKedOLQFVN7wLaJFbdPU56qOkNlbkrMneYpTmGpneRig=s88-c-k-c0x00ffffff-no-rj-mo\";\n//const iconImg = \"https://i.ytimg.com/vi/MPV2METPeJU/maxresdefault.jpg\";\n\n//const subCount = (num: number) => `${num} Subscriber${num === 1 ? \"\" : \"s\"}`;\n\nconst CategoryHeader = ({ data }: { data: Category }) => {\n    const searchParams = new URLSearchParams(useLocation().search);\n    const history = useHistory();\n    const hashtag = searchParams.get(\"hashtag\");\n    const hashtagParams = hashtag ? { hashtag: encodeURIComponent(hashtag) } : {};\n\n    const TopIcon = ({ bottom }: { bottom: string }) => (\n        <div\n            className=\"rounded-circle p-2 sdark-fg\"\n            style={{\n                position: \"absolute\",\n                bottom: bottom,\n                width: \"100px\",\n                height: \"100px\",\n            }}\n        >\n            <img src={data.icon_url} alt=\"\" className=\"rounded-circle img-fluid w-100 h-100\" />\n        </div>\n    );\n\n    const Header = () => (\n        <>\n            <div\n                className=\"banner\"\n                style={{\n                    backgroundImage: `url(\"${data.banner_url}\")`,\n                }}\n            ></div>\n\n            <Navbar className=\"sdark-fg p-3\" variant=\"dark\">\n                <Container>\n                    <Row>\n                        {/* Column with category icon and buttons */}\n                        <Col xs={12}>\n                            <Nav>\n                                <Nav.Item id=\"mobile-icon\" className=\"d-lg-none\">\n                                    <TopIcon bottom=\"54px\" />\n                                </Nav.Item>\n                                <Nav.Item id=\"desktop-icon\" className=\"d-none d-lg-block\">\n                                    <TopIcon bottom=\"10px\" />\n                                </Nav.Item>\n                                <Nav.Item style={{ marginLeft: \"120px\" }}></Nav.Item>\n                                <Nav.Item className=\"pe-4 d-none d-lg-block\">\n                                    <Col className=\"p-0\">\n                                        <h2 className=\"m-0\">{data.name}</h2>\n                                        {/*\n                                        <div>{subCount(data.subscribers)}</div>\n                                        */}\n                                    </Col>\n                                </Nav.Item>\n                                <Nav.Item className=\"pe-2\">\n                                    <SubscribeButton\n                                        subbed={data.is_subscribed}\n                                        apiCall={() => api.createSubscription({ id: data.id })}\n                                    />\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Button\n                                        variant=\"warning\"\n                                        onClick={() => history.push(`/categories/${data.name}/create/`)}\n                                        className=\"text-white rounded-pill\"\n                                    >\n                                        New\n                                    </Button>\n                                </Nav.Item>\n                                {hashtag && (\n                                    <Nav.Item className=\"ps-2\">\n                                        <Button\n                                            onClick={() => history.push(`/categories/${data.name}/`)}\n                                            variant=\"primary\"\n                                            className=\"text-white rounded-pill\"\n                                        >\n                                            #{hashtag}\n                                            <FaIcon icon={faTimes} className=\"ms-3\" />\n                                        </Button>\n                                    </Nav.Item>\n                                )}\n                            </Nav>\n                        </Col>\n                        {/* Info/mobile-collapse column */}\n                        <Col xs={12}>\n                            <Nav className=\"d-lg-none\">\n                                <Nav.Item className={`mt-3 ${data.name.length > 14 ? \"\" : \"mx-2\"}`}>\n                                    <Col className=\"p-0\">\n                                        {data.name.length > 14 ? (\n                                            <h3 className=\"m-0\">{data.name}</h3>\n                                        ) : (\n                                            <h2 className=\"m-0\">{data.name}</h2>\n                                        )}\n                                        {/*\n                                        <div>{subCount(data.subscribers)}</div>\n                                        */}\n                                    </Col>\n                                </Nav.Item>\n                                {/*\n                                <NavItem>\n                                    <SubscribeButton\n                                        subbed={data.subscribed}\n                                        apiCall={() => api.createSubscription({ category: { id: data.id } })}\n                                    />\n                                </NavItem>\n                                */}\n                            </Nav>\n                            {/*\n                            <p className=\"m-0 mx-2 mt-4\">\n                                Elit sit impedit velit temporibus eligendi. Distinctio non repellat asperiores?\n                            </p>\n                            */}\n                        </Col>\n                    </Row>\n                </Container>\n            </Navbar>\n        </>\n    );\n\n    const Sidebar = () => (\n        <>\n            <Col xs={12}>\n                <div className=\"p-3 sdark-fg rounded\">\n                    <div className=\"text-center\">\n                        <h4 className=\"mb-4\">About {data.name}</h4>\n                    </div>\n                    {/*\n                    <p className=\"mb-3\">{data.subscriber_count} Subscribers</p>\n                    <p className=\"mb-3\">Created on {dateStr(data.created_at)}</p>\n                */}\n                    <p className=\"mb-4\">{data.description}</p>\n                    <Row>\n                        <Col>\n                            <b>Subscribers</b>\n                            <p>{data.subscriber_count}</p>\n                        </Col>\n                        <Col>\n                            <b>Created At</b>\n                            <p>{dateStr(data.created_at)}</p>\n                        </Col>\n                    </Row>\n                </div>\n            </Col>\n            <Col xs={12}>\n                <div className=\"p-3 sdark-fg rounded\">\n                    <h4 className=\"mb-4\">Popular hashtags</h4>\n                    <div className=\"d-flex flex-wrap\">\n                        {data.hashtags.map((hashtag) => (\n                            <div className=\"me-2 mb-2\">\n                                <HashtagButton category={data} name={hashtag.name} />\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            </Col>\n            <Col xs={12}>\n                <div className=\"p-3 sdark-fg rounded\">\n                    <Row>\n                        <Col>\n                            <h4 className=\"mb-4\">Related Categories</h4>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <CategoryList categories={data.related_categories} />\n                    </Row>\n                </div>\n            </Col>\n        </>\n    );\n\n    return (\n        <>\n            <Helmet>\n                <title>{data.name}</title>\n            </Helmet>\n\n            <CardListSidebar\n                header={<Header />}\n                sidebarCol={<Sidebar />}\n                query={{ ...hashtagParams, category: data.name }}\n            />\n        </>\n    );\n};\nexport default CategoryView;\n","import { useParams } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { User } from \"../types\";\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { CardListSidebar } from \"../components/cardlist\";\nimport { CategoryList } from \"../components/snippets\";\nimport { dateStr } from \"../components/helpers\";\n\ninterface UserId {\n    userId: string;\n}\n\nconst UserView = () => {\n    const { userId } = useParams<UserId>();\n\n    return <ApiRender apiCall={() => api.getUser(userId)} component={UserHeader} key={userId} />;\n};\n\nconst UserHeader = ({ data }: { data: User }) => (\n    <>\n        <Helmet>\n            <title>overview of {data.name}</title>\n        </Helmet>\n\n        <CardListSidebar\n            query={{ user: data.id }}\n            infoCol={\n                <Col xs={12}>\n                    <div className=\"text-center\">\n                        <h4 className=\"my-2\">cards created by {data.name}</h4>\n                    </div>\n                </Col>\n            }\n            sidebarCol={\n                <Col xs={12}>\n                    <Row className=\"g-3\">\n                        <Col xs={12}>\n                            <Row>\n                                <Col xs={12}>\n                                    <div className=\"bg-primary p-3 rounded-top\" style={{ height: \"50px\" }}></div>\n                                </Col>\n                                <Col xs={12}>\n                                    <div className=\"sdark-fg p-3 rounded-bottom\">\n                                        <div className=\"text-center\">\n                                            <h3 className=\"mb-4\">{data.name}</h3>\n                                        </div>\n                                        <Row>\n                                            <Col>\n                                                <b>Score</b>\n                                                <p\n                                                    className={\n                                                        data.score >= 0 ? \"text-sdark-orange\" : \"text-sdark-violet\"\n                                                    }\n                                                >\n                                                    <div className=\"me-3\">\n                                                        <FaIcon icon={data.score >= 0 ? faArrowUp : faArrowDown} />{\" \"}\n                                                        {data.score}\n                                                    </div>\n                                                </p>\n                                            </Col>\n                                            <Col>\n                                                <b>Created At</b>\n                                                <p>{dateStr(data.created_at)}</p>\n                                            </Col>\n                                        </Row>\n                                        <Row>\n                                            <Col></Col>\n                                        </Row>\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Col>\n                        {data.categories_created.length > 0 && (\n                            <Col xs={12}>\n                                <div className=\"rounded sdark-fg p-3\">\n                                    <h4 className=\"mb-4\">Categories Created</h4>\n                                    <Row>\n                                        <CategoryList categories={data.categories_created} />\n                                    </Row>\n                                </div>\n                            </Col>\n                        )}\n                    </Row>\n                </Col>\n            }\n        />\n    </>\n);\n\nexport default UserView;\n","import Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion, faHandPointDown, faHandPointUp, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nexport type AppNavBarButtons = Array<[IconDefinition, string, () => void | undefined]>;\n\ninterface AppNavBarProps {\n  id?: string;\n  spacer?: boolean;\n  buttons?: AppNavBarButtons;\n}\n\nconst scrollToY = (y: number) => window.scrollTo({ top: y, behavior: \"smooth\" });\nconst scrollToTop = () => scrollToY(0);\nconst scrollToBottom = () => scrollToY(document.body.scrollHeight);\n\nconst NavBarUnit = ({ spacer, buttons }: AppNavBarProps) =>  {\n  const navItem = (\n    icon: IconDefinition,\n    text: string,\n    onclick?: () => void,\n  ) => (\n    <Nav.Item onClick={onclick}>\n      <Nav.Link>\n        <FontAwesomeIcon className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'} icon={icon} />\n        <br/>\n        <small className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'}>{text}</small>\n      </Nav.Link>\n    </Nav.Item>\n  )\n\n  return (\n    <Navbar\n      fixed={spacer ? undefined : 'bottom'}\n      className={spacer ? 'sdark-spacer py-0' : 'sdark-fg shadow py-1'}\n    >\n      <Container>\n        <Nav fill className='w-100'>\n          {\n            spacer\n              ?  navItem(faQuestion, 'Bottom of page')\n              : [\n                  navItem(faHandPointDown, 'Bottom', scrollToBottom),\n                  navItem(faHandPointUp, 'Top', scrollToTop),\n                ]\n          }\n          {\n            buttons?.length && buttons.map(things => navItem(...things))\n          }\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport const AppNavBar = (props: AppNavBarProps) => (\n  <div id=\"navbars\" className='d-md-none'>\n    <NavBarUnit spacer/>\n    <NavBarUnit {...props}/>\n  </div>\n);\n","import { useState, useRef, ReactElement, useEffect, ReactNode } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    IconDefinition,\n    faTh,\n    faEye,\n    faAlignJustify,\n    faPlusCircle,\n    faMinusCircle,\n    faTimes,\n    faExpandAlt,\n    faSearch,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { AppNavBar, AppNavBarButtons } from \"../components/navbar\";\nimport CardInfo from \"../components/cardinfo\";\n//import { edgePadding } from \"../components/helpers\";\nimport { BingoTile, BingoCard } from \"../types\";\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport debugLog from \"../debug\";\n\nconst isMobile = () => Boolean(navigator.maxTouchPoints);\n\n//=============================//\n// bingo card solution checker //\n//=============================//\n\nconst solutionArrays = (() => {\n    // Bingo card is 5 x 5, so can use the same length array\n    // for all the dimensions.\n    const side = Array(5).fill(0);\n\n    const edge = side.map((_, i) => i);\n    const vert = edge.map((n) => side.map((_, i) => i * 5 + n));\n    const horiz = edge.map((n) => side.map((_, i) => i + 5 * n));\n    const diag1 = side.map((_, i) => i * 4 + 4);\n    const diag2 = side.map((_, i) => i * 6);\n\n    return [...vert, ...horiz, diag1, diag2];\n})();\n\ntype SolutionArray = BingoTile[];\n\nconst checkForBingo = (card: BingoCard): SolutionArray | undefined => {\n    if (solutionArrays.some((line) => line.every((index) => card.tiles[index].clicked))) {\n        const solution = solutionArrays.filter((line) => line.every((index) => card.tiles[index].clicked))[0];\n        return solution.map((index) => card.tiles[index]);\n    }\n};\n\n//==================//\n// cardview methods //\n//==================//\n\ntype CardSetter = (card: BingoCard) => void;\ntype SolutionSetter = (solution: SolutionArray) => void;\n\nconst tileHover = (tile: BingoTile, state: boolean, card: BingoCard, setCard: CardSetter) => {\n    if (!isMobile()) {\n        const tiles = card.tiles;\n        const index = tiles.indexOf(tile);\n        tiles[index].hovered = state;\n        setCard({ ...card, tiles: tiles });\n    }\n};\n\nconst tileClick = (tile: BingoTile, card: BingoCard, setCard: CardSetter, setSolution: SolutionSetter) => {\n    const tiles = card.tiles;\n    const index = tiles.indexOf(tile);\n    tiles[index].clicked = !tiles[index].clicked;\n    setCard({ ...card, tiles: tiles });\n\n    var newSolution = checkForBingo(card);\n    if (newSolution) setSolution(newSolution);\n};\n\nconst resetBingo = (card: BingoCard | null, setCard: CardSetter, setSolution: SolutionSetter) => {\n    if (card) {\n        const tiles = card.tiles.map((tile) => {\n            tile.hovered = false;\n            tile.clicked = false;\n            return tile;\n        });\n        tiles[12].clicked = true;\n        setCard({ ...card, tiles: tiles });\n        setSolution([]);\n\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n};\n\nconst clickedColor = \"bg-sdark-green text-white\";\nconst hoverColor = \"bg-sdark-magenta text-white\";\n\nconst tileColor = (tile: BingoTile, defaultColor: string = \"sdark-fg\") => {\n    if (tile.clicked) return clickedColor;\n    else if (tile.hovered) return hoverColor;\n    else return defaultColor;\n};\n\n//====================//\n// cardview component //\n//====================//\n\ninterface CardLayoutProps {\n    passedCard: BingoCard;\n    cardInfo: ReactElement;\n}\n\nconst CardLayout = ({ passedCard, cardInfo }: CardLayoutProps) => {\n    const [card, setCard] = useState(() => {\n        let tiles = passedCard.tiles.map((tile) => ({\n            ...tile,\n            hovered: false,\n            clicked: false,\n        }));\n        tiles[12].clicked = true;\n        passedCard.tiles = tiles;\n        debugLog({ CARD: \"init card\" });\n        return passedCard;\n    });\n\n    const filterTiles = () =>\n        card.tiles.filter((tile) => {\n            return tile.text.toLowerCase().includes(tileSearchQuery.toLowerCase());\n        });\n\n    const [tileSearchQuery, setTileSearchQuery] = useState(\"\");\n    const [solution, setSolution] = useState<SolutionArray>([]);\n    const [topVisible, setTopVisible] = useState(true);\n    const [overviewVisible, setOverviewVisible] = useState(true);\n    const [gridMode, setGridMode] = useState(false);\n    const [filteredTiles, setFilteredTiles] = useState<BingoTile[]>(filterTiles());\n\n    useEffect(() => setFilteredTiles(filterTiles()), [tileSearchQuery]);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n    const solved = Boolean(solution.length);\n\n    const changeSearch = (e: any) => setTileSearchQuery(e.target.value);\n    const resetSearch = () => {\n        setTileSearchQuery(\"\");\n        setTopVisible(true);\n    };\n    const showTop = () => setTopVisible(true);\n    const hideTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\",\n        });\n        setTopVisible(false);\n        inputRef.current && inputRef.current.focus();\n    };\n\n    const buttons: AppNavBarButtons = [[faSearch, \"Search\", hideTop]];\n    if (!topVisible) buttons.push([faExpandAlt, \"Expand\", showTop]);\n\n    debugLog({ CARD: \"render\", query: tileSearchQuery, solution, topVisible });\n\n    const CollapseButton = () => (\n        <div className=\"hover-white\" onClick={() => setOverviewVisible(!overviewVisible)} style={{ cursor: \"pointer\" }}>\n            <FaIcon icon={overviewVisible ? faMinusCircle : faPlusCircle} />\n        </div>\n    );\n\n    const toggleClass = topVisible ? \"\" : \"d-none d-lg-block\";\n    const overviewClass = overviewVisible ? \"\" : \"d-none\";\n    const gridColSize = gridMode ? 12 : 7;\n    const gridRowCols = gridMode ? 5 : 1;\n    const gridInfoColSize = gridMode ? 6 : 5;\n    const gridTileClass = gridMode ? \"text-center p-3\" : \"p-2\";\n    const gridTileSize = gridMode ? 10 : 12;\n    const gridSearchSize = gridMode ? 6 : 12;\n\n    return (\n        <>\n            <Helmet>\n                <title>{card.name}</title>\n            </Helmet>\n            <Row id=\"card-container\" className=\"g-3 justify-content-lg-center\">\n                <Col id=\"hide-on-search\" className={toggleClass} xs={12} lg={gridInfoColSize}>\n                    <Row className=\"g-3\">\n                        <Col id=\"card-info\" xs={12} className={toggleClass}>\n                            {cardInfo}\n                        </Col>\n                        <Col id=\"toolbar\" xs={12}>\n                            <div className=\"rounded sdark-fg px-3 py-2\">\n                                <div className=\"d-flex flex-wrap\">\n                                    <div\n                                        className={`rounded-pill me-2 px-3 py-1 ${\n                                            overviewVisible ? \"bg-sdark-orange text-white\" : \"sdark-bg\"\n                                        }`}\n                                        onClick={() => setOverviewVisible(!overviewVisible)}\n                                        style={{ cursor: \"pointer\" }}\n                                    >\n                                        <FaIcon icon={faEye} className=\"me-3\" />\n                                        Overview\n                                    </div>\n                                    {(\n                                        [\n                                            [\"Row\", faAlignJustify, false],\n                                            [\"Grid\", faTh, true],\n                                        ] as Array<[ReactNode, IconDefinition, boolean]>\n                                    ).map(([label, icon, gridValue]) => {\n                                        const color =\n                                            gridValue === gridMode ? \"bg-sdark-orange text-white\" : \"sdark-bg\";\n                                        const onClick = () => {\n                                            setGridMode(gridValue);\n                                            setOverviewVisible(!gridValue);\n                                        };\n\n                                        return (\n                                            <div\n                                                className={`d-none d-lg-block rounded-pill me-2 px-3 py-1 ${color}`}\n                                                onClick={onClick}\n                                                style={{ cursor: \"pointer\" }}\n                                            >\n                                                <FaIcon icon={icon} className=\"me-3\" />\n                                                {label}\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </Col>\n                        <Col id=\"overview\" xs={12} className={overviewClass}>\n                            {/*\n                            <Row className=\"g-3\">\n                                <Col id=\"overview-header\" xs={12}>\n                                    <div className=\"rounded px-3 py-2 sdark-fg\">\n                                        <Row>\n                                            <Col xs={2}>\n                                                <div className=\"d-flex justify-content-center\">\n                                                    <CollapseButton />\n                                                </div>\n                                            </Col>\n                                            <Col xs={10} className=\"ps-0\">\n                                                <b>Card Overview</b>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                </Col>\n                                <Col id=\"overview-body\" xs={12} className={overviewClass}>\n                                </Col>\n                            </Row>\n                                */}\n                            <Row className=\"row-cols-5 g-2 text-center\">\n                                {card.tiles.map((tile, index) => (\n                                    <Col>\n                                        <div className={`py-2 rounded ${tileColor(tile, \"sdark-fg\")}`}>{index + 1}</div>\n                                    </Col>\n                                ))}\n                            </Row>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col id=\"tiles-and-search-bar\" xs={12} lg={gridColSize}>\n                    <Row className=\"g-3 justify-content-center\">\n                        <Col id=\"search-bar\" xs={12} lg={gridSearchSize}>\n                            <Row className=\"g-3\">\n                                <Col xs={12} className={\"d-lg-none \" + (topVisible ? \"d-none\" : \"\")}>\n                                    <div className=\"px-3 py-2 rounded sdark-fg\">\n                                        <small>Card info hidden. Click on the expand button to show them.</small>\n                                    </div>\n                                </Col>\n                                <Col xs={12}>\n                                    <Row className=\"g-2\">\n                                        <Col>\n                                            {/* Inputs can't be nested in another component */}\n                                            <InputGroup>\n                                                <InputGroup.Text>\n                                                    <FaIcon icon={faSearch} />\n                                                </InputGroup.Text>\n                                                <Form.Control\n                                                    placeholder=\"Search bingo tiles\"\n                                                    type=\"string\"\n                                                    value={tileSearchQuery}\n                                                    style={{ cursor: \"pointer\" }}\n                                                    onChange={changeSearch}\n                                                    onFocus={hideTop}\n                                                    ref={inputRef}\n                                                />\n                                                {tileSearchQuery && (\n                                                    <InputGroup.Text\n                                                        onClick={resetSearch}\n                                                        style={{ cursor: \"pointer\" }}\n                                                        className=\"input-group-text-clear\"\n                                                    >\n                                                        <FaIcon icon={faTimes} />\n                                                    </InputGroup.Text>\n                                                )}\n                                            </InputGroup>\n                                        </Col>\n                                        {tileSearchQuery && (\n                                            <Col xs={4} lg={3}>\n                                                <div className=\"px-2 rounded bg-sdark-cyan text-white text-center h-100 d-flex align-items-center justify-content-center\">\n                                                    {`${filteredTiles.length || \"No\"} result` +\n                                                        (filteredTiles.length === 1 ? \"\" : \"s\")}\n                                                </div>\n                                            </Col>\n                                        )}\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col id=\"tiles\" xs={12} lg={gridTileSize}>\n                            <Row id=\"tile-rows\" className={`g-2 row-cols-1 row-cols-lg-${gridRowCols}`}>\n                                {filteredTiles.map((tile, index) => (\n                                    <Col>\n                                        <div\n                                            style={{ cursor: \"pointer\" }}\n                                            className={`rounded h-100 ${tileColor(tile)} ${gridTileClass}`}\n                                            onClick={() => tileClick(tile, card, setCard, setSolution)}\n                                            onMouseEnter={() => tileHover(tile, true, card, setCard)}\n                                            onMouseLeave={() => tileHover(tile, false, card, setCard)}\n                                        >\n                                            <Row>\n                                                <Col\n                                                    xs={2}\n                                                    lg={1}\n                                                    className={`${tile.clicked || tile.hovered ? \"\" : \"border-end\"} ${\n                                                        gridMode ? \"d-none\" : \"\"\n                                                    }`}\n                                                >\n                                                    <div className=\"h-100 d-flex align-items-center justify-content-center\">\n                                                        {index + 1}\n                                                    </div>\n                                                </Col>\n                                                <Col>\n                                                    <div className=\"h-100\">\n                                                        {index === 1\n                                                            ? \"one\"\n                                                            : \"Adipisicing exercitationem cum impedit natus consectetur.\"}\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                        </div>\n                                    </Col>\n                                ))}\n                            </Row>\n                        </Col>\n                    </Row>\n                </Col>\n\n                <Modal\n                    show={solved}\n                    dialogAs={(props) => (\n                        <div className=\"modal-dialog modal-dialog-centered\">\n                            <div {...{ ...props, className: \"modal-content rounded sdark-bg\" }}></div>\n                        </div>\n                    )}\n                >\n                    <Modal.Header>You got Bingo!</Modal.Header>\n                    <Modal.Body>\n                        <div className=\"text-center mb-4 mt-3\">\n                            <h3>{card.name}</h3>\n                        </div>\n                        <Row className=\"row-cols-1 p-1\">\n                            {solution.map((tile, index) => (\n                                <Col className=\"p-1\">\n                                    <Col className=\"rounded h-100 p-2 sdark-fg\">\n                                        <Row>\n                                            <Col xs={2} md={1} className=\"border-sdark-right text-center\">\n                                                {index + 1}\n                                            </Col>\n                                            <Col>{tile.text}</Col>\n                                        </Row>\n                                    </Col>\n                                </Col>\n                            ))}\n                        </Row>\n                        <div className=\"text-center mt-4 mb-3\">\n                            Link:{\" \"}\n                            <a href={window.location.href} className=\"sdark-bg\">\n                                {window.location.href}\n                            </a>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={() => resetBingo(card, setCard, setSolution)}>\n                            Start Over\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Row>\n\n            <AppNavBar id=\"card-navbar\" buttons={buttons} />\n        </>\n    );\n};\n\ninterface CardIdParam {\n    cardId: string;\n}\n\nconst CardView = () => {\n    const { cardId }: CardIdParam = useParams();\n    return (\n        <ApiRender\n            key={cardId}\n            apiCall={() => api.getCard(cardId)}\n            loadingMessage={`Loading bingo card ${cardId}`}\n            component={({ data }) => (\n                <CardLayout passedCard={data} cardInfo={<CardInfo card={data} collapse={isMobile()} />} />\n            )}\n        />\n    );\n};\n\nexport default CardView;\n","import Spinner from 'react-bootstrap/Spinner';\nimport React from 'react';\n\ninterface LoadingProps {\n  message: string | React.ReactElement;\n}\n\nconst Loading = ({ message }: LoadingProps) => (\n  <div className='text-center'>\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n    <div className=\"mt-2\">\n      {\n        typeof message === 'string'\n          ? <h4>{message}</h4>\n          : message\n      }\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n\nimport * as Yup from \"yup\";\nimport { Formik, Form as FormikForm, Field, ErrorMessage, FormikHelpers } from \"formik\";\n\nimport { Link } from \"react-router-dom\";\n\nimport Loading from \"../components/loading\";\nimport { Header } from \"../components/snippets\";\nimport { useAuth } from \"../auth\";\n\nconst stringField = () => Yup.string().default(\"\").required(\"Required\");\n\nconst LoginSchema = Yup.object().shape({\n    username: stringField(),\n    password: stringField(),\n});\n\ninterface LoginState {\n    done: boolean;\n    ok: boolean;\n    valid: boolean;\n}\n\nconst LoginForm = () => {\n    const { user, login, logout } = useAuth();\n\n    const [{ done, valid, ok }, setLoginState] = useState<LoginState>({\n        valid: false,\n        done: false,\n        ok: true,\n    });\n\n    const handleSubmit = async (values: any, { resetForm }: FormikHelpers<any>) => {\n        setLoginState({ done: false, valid, ok });\n\n        login({\n            credentials: values,\n            callback({ data, ok }) {\n                setLoginState({ done: true, valid: data ? data.valid : false, ok });\n                resetForm();\n            },\n        });\n    };\n\n    const FormView = () => (\n        <>\n            <div className=\"text-center\">\n                <h1>Login</h1>\n                {done && !ok && valid === false && <div className=\"text-danger mt-4\">Invalid credentials</div>}\n            </div>\n            <div className=\"mt-4\">\n                <FormikForm noValidate>\n                    <Row>\n                        <Col>\n                            <Form.Label>Username</Form.Label>\n                        </Col>\n                        <Col className=\"w-100 text-end\">\n                            <ErrorMessage name=\"username\" component=\"label\" className=\"text-danger\" />\n                        </Col>\n                        <Col xs={12}>\n                            <Field name=\"username\" className=\"form-control\" />\n                        </Col>\n                    </Row>\n                    <Row className=\"mt-2 mb-3\">\n                        <Col>\n                            <Form.Label>Password</Form.Label>\n                        </Col>\n                        <Col className=\"w-100 text-end\">\n                            <ErrorMessage name=\"password\" component=\"label\" className=\"text-danger\" />\n                        </Col>\n                        <Col xs={12}>\n                            <Field name=\"password\" type=\"password\" className=\"form-control\" />\n                        </Col>\n                    </Row>\n                    <button className=\"btn btn-primary text-white\" type=\"submit\">\n                        Login\n                    </button>\n                    <Link to=\"/signup/\">\n                        <button className=\"btn btn-warning text-white ms-2\">Signup</button>\n                    </Link>\n                </FormikForm>\n            </div>\n        </>\n    );\n\n    return (\n        <Formik validationSchema={LoginSchema} initialValues={LoginSchema.default(\"\")} onSubmit={handleSubmit}>\n            {({ isSubmitting, setSubmitting }) =>\n                isSubmitting ? (\n                    <Loading message={\"Logging \" + (user ? \"out\" : \"in\") + \"...\"} />\n                ) : user ? (\n                    <Header card>\n                        <div className=\"text-center\">\n                            <h1>Logged in as {user.name}!</h1>\n                            <button\n                                className=\"btn btn-primary\"\n                                onClick={() => {\n                                    setSubmitting(true);\n                                    logout({\n                                        callback() {\n                                            setSubmitting(false);\n                                        },\n                                    });\n                                }}\n                            >\n                                Logout\n                            </button>\n                        </div>\n                    </Header>\n                ) : (\n                    <FormView />\n                )\n            }\n        </Formik>\n    );\n};\n\nconst LoginView = () => (\n    <div className=\"py-4\">\n        <Row>\n            <Col xs={3} className=\"d-none d-lg-block\"></Col>\n            <Col xs={12} lg={6}>\n                <LoginForm />\n            </Col>\n            <Col xs={3} className=\"d-none d-lg-block\"></Col>\n        </Row>\n    </div>\n);\n\nexport default LoginView;\n","import { useState } from \"react\";\nimport { FormikHelpers, Formik, Form as FormikForm, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n\nimport Loading from \"../components/loading\";\nimport api from \"../api/backend\";\n\nconst SignupView = () => (\n    <div className=\"py-4\">\n        <div className=\"row\">\n            <div className=\"col-3 d-none d-lg-block\"></div>\n            <div className=\"col-12 col-lg-6\">\n                <SignupForm />\n            </div>\n            <div className=\"col-3 d-none d-lg-block\"></div>\n        </div>\n    </div>\n);\n\nexport default SignupView;\n\nconst stringField = () => Yup.string().default(\"\").required(\"Required\");\nconst SignupSchema = Yup.object().shape({\n    username: stringField().min(2, \"Too Short!\").max(50, \"Too Long!\"),\n    password: stringField().min(10, \"Too Short!\"),\n    confirmPassword: stringField().when(\"password\", {\n        is: (val: string) => (val && val.length > 0 ? true : false),\n        then: Yup.string().oneOf([Yup.ref(\"password\")], \"Needs to match password\"),\n    }),\n    email: stringField().email(\"Invalid email\"),\n});\n\nconst signupFields: Array<[string, string, string]> = [\n    // label               , name             , type\n    [\"Username\", \"username\", \"text\"],\n    [\"Email\", \"email\", \"email\"],\n    [\"Password\", \"password\", \"password\"],\n    [\"Confirm Password\", \"confirmPassword\", \"password\"],\n];\n\ntype APIResult = string[];\ninterface APIError {\n    email?: APIResult;\n    password?: APIResult;\n    username?: APIResult;\n}\n\nconst SignupForm = () => {\n    const [createdSuccess, setCreatedSuccess] = useState(false);\n    const [submitDone, setDone] = useState(false);\n\n    const submitUser = async (values: any, { resetForm, setErrors }: FormikHelpers<any>) => {\n        setDone(false);\n        let { data, ok } = await api.createUser({\n            username: values.username,\n            password: values.password,\n            email: values.email,\n        });\n\n        if (data && !ok) {\n            //\n            // backend validator sends errors in arrays\n            // since formik error message can only show one string, I'm opting to only show the first error string\n            // prob have to add a way to view multiple errors at some point\n            //\n            setErrors(Object.fromEntries(Object.entries(data as APIError).map(([field, err]) => [field, err[0]])));\n        } else if (ok) {\n            resetForm();\n            setCreatedSuccess(true);\n        }\n        setDone(true);\n        return;\n    };\n\n    const SignupFormLayout = ({ isSubmitting }: { isSubmitting: boolean }) => (\n        <>\n            <div className=\"text-center\">\n                <h1>Signup</h1>\n            </div>\n            {!createdSuccess && submitDone && (\n                <div className=\"text-danger text-center py-2\">\n                    <p>There was something wrong.</p>\n                </div>\n            )}\n            <FormikForm>\n                <div className=\"mt-4 mb-3\">\n                    {signupFields.map(([fieldLabel, fieldName, fieldType]) => (\n                        <Row className=\"mb-2\">\n                            <Col>\n                                <Form.Label>{fieldLabel}</Form.Label>\n                            </Col>\n                            <Col className=\"w-100 text-end\">\n                                <ErrorMessage name={fieldName} component=\"label\" className=\"text-danger\" />\n                            </Col>\n                            <Col xs={12}>\n                                <Field name={fieldName} type={fieldType} className=\"form-control\" />\n                            </Col>\n                        </Row>\n                    ))}\n                </div>\n                <button className=\"btn btn-primary text-white\" type=\"submit\" disabled={isSubmitting}>\n                    Signup\n                </button>\n                <Link to=\"/login/\">\n                    <button className=\"btn btn-warning text-white ms-2\">Back to Login</button>\n                </Link>\n            </FormikForm>\n        </>\n    );\n\n    const SignupSuccess = () => (\n        <div className=\"text-center\">\n            <div className=\"mb-2\">\n                <h1>Account creation successful!</h1>\n            </div>\n            <Link to=\"/login/\">\n                <button className=\"btn btn-warning ms-2\">Back to Login</button>\n            </Link>\n        </div>\n    );\n\n    return (\n        <Formik\n            validateOnBlur={true}\n            validateOnChange={false}\n            validationSchema={SignupSchema}\n            initialValues={SignupSchema.getDefault()}\n            onSubmit={submitUser}\n        >\n            {({ isSubmitting }) =>\n                isSubmitting ? (\n                    <Loading message=\"Creating new account...\" />\n                ) : createdSuccess ? (\n                    <SignupSuccess />\n                ) : (\n                    <SignupFormLayout {...{ isSubmitting }} />\n                )\n            }\n        </Formik>\n    );\n};\n","import { useLocation } from 'react-router-dom';\nimport { Helmet } from \"react-helmet\";\n\nimport CardList from '../components/cardlist';\nimport { Header } from '../components/snippets';\nimport debugLog from '../debug';\n\n//const headerPadding = 'rounded text-center sdark-fg p-4';\n\nconst SearchView = () => {\n    const urlParams = new URLSearchParams(useLocation().search);\n    const searchQuery = urlParams.get('q') || '';\n    const cardQuery = { search: encodeURIComponent(searchQuery) };\n \n    debugLog({ SEARCHVIEW: 1, searchQuery });\n    return (\n        <>\n            <Helmet>\n                <title>Search</title>\n            </Helmet>\n            <Header card>\n                <h3>\n                    Search results for \"{searchQuery}\"\n                </h3>\n            </Header>\n            <CardList query={cardQuery} key={`${Date.now()}`}/>\n        </>\n    );\n}\n\nexport default SearchView;\n","import * as Yup from \"yup\";\n//import { useState } from \"react\";\nimport { TileSchema, CardSchema, BingoCard, Category } from \"../types\";\nimport debugLog from \"../debug\";\n\nexport const getCardSchema = (card?: BingoCard, category?: Category): Yup.SchemaOf<CardSchema> => {\n    const stringField = (max: number, defaultValue: string = \"\") =>\n        Yup.string()\n            .default(defaultValue)\n            .required(\"Cannot be blank.\")\n            .max(max, `Cannot be longer than ${max} characters.`);\n\n    const categoryField = stringField(20, card ? card.category.name : category ? category.name : \"\").matches(/^\\w+$/, {\n        message: \"Can only contain letters, numbers and underscores.\",\n        excludeEmptyString: true,\n    });\n\n    const tileGenerator = (function* () {\n        if (card) for (let tile of card.tiles) yield stringField(50, tile.text);\n        else while (true) yield stringField(50);\n    })();\n\n    const tileFields = getTileFields(() => tileGenerator.next().value);\n\n    return Yup.object({\n        ...tileFields,\n        name: stringField(50, card ? card.name : \"\"),\n        category: categoryField,\n    });\n};\n\n/*\nexport const useCardSchema = (passedCard?: BingoCard, passedCategory?: Category) => {\n    const [card] = useState(passedCard);\n    const [category] = useState(passedCategory);\n * */\nexport const useCardSchema = (card?: BingoCard, category?: Category) => {\n    debugLog({ SCHEMA: \"init\", card, category });\n\n    return {\n        cardSchema: getCardSchema(card, category),\n        valuesToAPI(values: CardSchema<string>) {\n            // getting tile fields like this reverses the order for some reason\n            const tileFields = Object.entries(values)\n                .filter(([field, _]) => field.startsWith(\"tile_\"))\n                .reverse();\n\n            const tileArray = card\n                ? card.tiles.map((tile, index) => ({ ...tile, text: tileFields[index][1] }))\n                : tileFields.map(([_, value]) => ({ text: value }));\n\n            const apiValues = {\n                tiles: tileArray,\n                name: card ? card.name : values.name,\n                category: { name: card ? card.category.name : category ? category.name : values.category },\n            };\n\n            tileArray.forEach((tile) => debugLog(tile));\n            debugLog(apiValues);\n\n            return apiValues;\n        },\n    };\n};\n\n// yea it looks redundant, but idk how to preserve the object type\n// with mapping.\nconst getTileFields = (valueFunc: () => any): TileSchema => {\n    return {\n        tile_1: valueFunc(),\n        tile_2: valueFunc(),\n        tile_3: valueFunc(),\n        tile_4: valueFunc(),\n        tile_5: valueFunc(),\n        tile_6: valueFunc(),\n        tile_7: valueFunc(),\n        tile_8: valueFunc(),\n        tile_9: valueFunc(),\n        tile_10: valueFunc(),\n        tile_11: valueFunc(),\n        tile_12: valueFunc(),\n        tile_13: valueFunc(),\n        tile_14: valueFunc(),\n        tile_15: valueFunc(),\n        tile_16: valueFunc(),\n        tile_17: valueFunc(),\n        tile_18: valueFunc(),\n        tile_19: valueFunc(),\n        tile_20: valueFunc(),\n        tile_21: valueFunc(),\n        tile_22: valueFunc(),\n        tile_23: valueFunc(),\n        tile_24: valueFunc(),\n        tile_25: valueFunc(),\n    };\n};\n\nexport const tileFieldNames = Object.keys(getTileFields(() => \"\"));\n","import { createContext, useContext, forwardRef, useState, useRef, useReducer } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FieldProps, FormikHelpers, Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { Header } from \"../components/snippets\";\nimport Loading from \"../components/loading\";\nimport { BingoCard, Category, CardSchema, ObjectArray } from \"../types\";\nimport api from \"../api/backend\";\nimport ApiRender from \"../api/render\";\nimport debugLog from \"../debug\";\nimport { useCardSchema, tileFieldNames } from \"../components/cardschema\";\n\ninterface FormHelperProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    values: { [x: string]: any };\n    card?: BingoCard;\n    category?: Category;\n    isSubmitting?: boolean;\n    dirty?: boolean;\n    cardSchema?: Yup.SchemaOf<CardSchema>;\n}\n\nconst FormHelperContext = createContext<FormHelperProps>({\n    setFieldValue: () => {},\n    values: {},\n});\n\nconst CategorySearchBar = () => {\n    // 1. State Handling\n    // 2. Sub-Elements\n    // 3. Main Element\n\n    // ============================================================================\n    // ========================= 1. State Handling ================================\n    // ============================================================================\n\n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown bc category create OR get\n    onToggle should toggle dropdown\n\n    */\n\n    type Action =\n        | { type: \"query\"; payload: string }\n        | { type: \"dropdown\"; payload: boolean }\n        | { type: \"menuSelect\"; payload: { query: string; errors: Array<string> } }\n        | { type: \"category\"; payload: Category[] }\n        | { type: \"load\"; payload: boolean };\n\n    type State = {\n        query: string;\n        errors: Array<string>;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        categories: Category[];\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ CATEGORYSEARCHBAR: \"input check\", query, queryRef });\n            if (query && query === queryRef.current) {\n                debugLog(\"searching for categories...\");\n                getCategories();\n            }\n        }, 500);\n    };\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ CATEGORYSEARCHBAR: \"reducer\", state, action });\n        switch (action.type) {\n            case \"query\":\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                    errors: action.payload.length > 0 ? state.errors : [],\n                };\n            case \"dropdown\":\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case \"category\":\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    categories: action.payload,\n                };\n            case \"menuSelect\": {\n                const categoryValue = action.payload.errors.length > 0 ? \"\" : action.payload.query;\n                setFieldValue(\"category\", categoryValue);\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                    errors: action.payload.errors,\n                };\n            }\n            case \"load\":\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const { setFieldValue, values, card, category, cardSchema } = useContext(FormHelperContext);\n    const categoryName: string = values.category;\n    const initState: State = {\n        query: categoryName,\n        showDropdown: false,\n        loading: false,\n        disabled: Boolean(categoryName.length > 0),\n        errors: [],\n        categories: [],\n    };\n\n    const [{ disabled, errors, query, showDropdown, loading, categories }, dispatch] = useReducer(\n        stateReducer,\n        initState\n    );\n    const valid = errors.length === 0;\n    const showQueryButton = disabled && valid;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({\n        CATEGORYSEARCHBAR: \"states\",\n        query,\n        disabled,\n        errors,\n        categoryName,\n    });\n\n    const getCategories = async () => {\n        dispatch({ type: \"load\", payload: true });\n        const { data, ok } = await api.getTopThreeCategories(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: \"category\", payload: data });\n        } else {\n            dispatch({ type: \"load\", payload: false });\n        }\n    };\n\n    const handleSelect = (eventKey: string | null) => {\n        let errs: Array<string> = [];\n\n        switch (eventKey) {\n            case null:\n                break;\n            case \"QUERY!\":\n                try {\n                    cardSchema?.validateSync({ category: query });\n                } catch (err) {\n                    errs = err.errors;\n                }\n                dispatch({ type: \"menuSelect\", payload: { query, errors: errs } });\n                break;\n            default:\n                dispatch({\n                    type: \"menuSelect\",\n                    payload: { query: eventKey, errors: errs },\n                });\n        }\n    };\n\n    // ============================================================================\n    // ========================= 2. Sub-Elements ==================================\n    // ============================================================================\n\n    const LoadingIndicator = () => (\n        <>\n            {loading && (\n                <InputGroup.Text>\n                    <div className=\"ps-2\">\n                        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </InputGroup.Text>\n            )}\n        </>\n    );\n\n    const ClearButton = () => (\n        <>\n            {!showQueryButton && query.length > 0 && (\n                <InputGroup.Text style={{ cursor: \"pointer\" }} onClick={() => dispatch({ type: \"query\", payload: \"\" })}>\n                    <FontAwesomeIcon icon={faTimes} />\n                </InputGroup.Text>\n            )}\n        </>\n    );\n\n    const QueryButton = () => (\n        <>\n            {showQueryButton && (\n                <InputGroup.Text className=\"m-1 text-white bg-sdark-violet border-0 rounded\">\n                    <Row>\n                        <Col className={card || category ? \"\" : \"pe-2\"}>{query}</Col>\n                        {!card && !category && (\n                            <Col className=\"ps-2\">\n                                <div\n                                    style={{ cursor: \"pointer\" }}\n                                    onClick={() =>\n                                        dispatch({\n                                            type: \"menuSelect\",\n                                            payload: { query: \"\", errors: [] },\n                                        })\n                                    }\n                                >\n                                    <small>\n                                        <FontAwesomeIcon icon={faTimes} />\n                                    </small>\n                                </div>\n                            </Col>\n                        )}\n                    </Row>\n                </InputGroup.Text>\n            )}\n        </>\n    );\n\n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className=\"slight-bg\" disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className=\"border-slight-top\" />\n            {categories.length > 0 ? (\n                categories.map((category) => (\n                    <Dropdown.Item className=\"slight-bg\" eventKey={category.name}>\n                        {category.name}\n                    </Dropdown.Item>\n                ))\n            ) : (\n                <Dropdown.Item className=\"slight-bg\" eventKey=\"QUERY!\">\n                    Create new category: {query}\n                </Dropdown.Item>\n            )}\n        </>\n    );\n\n    const CategoryErrors = () => (\n        <>\n            {errors.length > 0 &&\n                query.length > 0 &&\n                errors.map((err) => (\n                    <div className=\"text-sdark-red\">\n                        <small>{err}</small>\n                    </div>\n                ))}\n        </>\n    );\n\n    // ============================================================================\n    // ========================= 3. Main Element ==================================\n    // ============================================================================\n\n    const DropdownContainer = forwardRef(({ children }: any, ref: any) => <div ref={ref}>{children}</div>);\n\n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: \"dropdown\", payload: !showDropdown })}\n            onSelect={handleSelect}\n        >\n            <InputGroup className=\"slight-bg rounded\">\n                <InputGroup.Text className={disabled ? (valid ? \"success\" : \"error\") : \"\"}>Category</InputGroup.Text>\n                <QueryButton />\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? \"\" : \"Search\"}\n                    value={showQueryButton ? \"\" : query}\n                    onChange={(e) => dispatch({ type: \"query\", payload: e.target.value })}\n                />\n                <ClearButton />\n                <LoadingIndicator />\n            </InputGroup>\n\n            <div>\n                <CategoryErrors />\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id=\"create-category\" />\n            <Dropdown.Menu className=\"w-100 slight-bg mt-1 px-2\">\n                <DropdownItems />\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\ninterface FormRowProps {\n    name: string;\n    label: string;\n    small?: boolean;\n    hidden?: boolean;\n    disabled?: boolean;\n}\n\nconst FormRowIndicator = ({ name, label }: FormRowProps) => (\n    <Field name={name}>\n        {({ meta }: FieldProps) =>\n            !meta.touched ? (\n                <div className=\"rounded text-center py-2 sdark-fg\">{label}</div>\n            ) : (\n                <div className={`rounded text-center py-2 text-white bg-sdark-${meta.error ? \"red\" : \"green\"}`}>\n                    {label}\n                </div>\n            )\n        }\n    </Field>\n);\n\nconst FormRow = ({ name, label, disabled }: FormRowProps) => (\n    <Field name={name}>\n        {({ field, meta }: FieldProps) => {\n            const prependColor = meta.touched ? (meta.error ? \"error\" : \"success\") : disabled ? \"disabled\" : \"\";\n\n            return (\n                <>\n                    <InputGroup>\n                        <InputGroup.Text className={prependColor}>{label}</InputGroup.Text>\n                        <FormControl {...field} type=\"text\" placeholder=\"Empty\" disabled={disabled} />\n                    </InputGroup>\n                    {meta.touched && meta.error && (\n                        <div className=\"text-sdark-red\">\n                            <small>{meta.error}</small>\n                        </div>\n                    )}\n                </>\n            );\n        }}\n    </Field>\n);\nconst preventEnter = (keyEvent: React.KeyboardEvent<HTMLFormElement>) => {\n    if (keyEvent.key === \"Enter\") {\n        keyEvent.preventDefault();\n    }\n};\n\nconst CardForm = () => {\n    const { card, category, isSubmitting } = useContext(FormHelperContext);\n    const headerText = card\n        ? `Editing \"${card.name}\"`\n        : `Create New Bingo Card ${category ? `In ${category.name}` : \"\"}`;\n\n    return (\n        <Form onKeyDown={preventEnter}>\n            <Row className=\"g-3 justify-content-center\">\n                <Col xs={12}>\n                    <Row className=\"g-3\">\n                        <Col id=\"form-header-spacer\" xs={2} className=\"d-none d-lg-block\"></Col>\n                        <Col xs={12} lg={8}>\n                            <div className=\"rounded p-4 sdark-fg text-center\">\n                                <h2 className=\"m-0\">{headerText}</h2>\n                            </div>\n                        </Col>\n                        <Col id=\"form-header-spacer\" xs={2} className=\"d-none d-lg-block\"></Col>\n                    </Row>\n                </Col>\n                <Col xs={12} lg={5}>\n                    <Row className=\"g-3\">\n                        <Col xs={12}>\n                            <FormRow name=\"name\" label=\"Name\" disabled={Boolean(card)} />\n                        </Col>\n                        <Col xs={12}>\n                            <CategorySearchBar />\n                        </Col>\n                        <Col xs={12}>\n                            <Row id=\"form-indicators\" className=\"row-cols-5 g-2\">\n                                {tileFieldNames.map((field, index) => (\n                                    <Col>\n                                        <FormRowIndicator name={field} label={`${index + 1}`} />\n                                    </Col>\n                                ))}\n                            </Row>\n                        </Col>\n                        <Col xs={12}>\n                            <Button variant=\"primary\" type=\"submit\" disabled={isSubmitting} className=\"text-white\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col xs={12} lg={7}>\n                    <Row id=\"form-tiles\" className=\"g-2\">\n                        {tileFieldNames.map((field, index) => (\n                            <Col xs={12}>\n                                <FormRow name={field} label={`Tile ${index + 1}`} />\n                            </Col>\n                        ))}\n                    </Row>\n                </Col>\n            </Row>\n        </Form>\n    );\n};\n\nconst CardCreateEditLayout = ({ card, category }: { card?: BingoCard; category?: Category }) => {\n    const [success, setSuccess] = useState(false);\n    const history = useHistory();\n    const { cardSchema, valuesToAPI } = useCardSchema(card, category);\n\n    const submitCard = async (values: CardSchema, { setErrors, resetForm }: FormikHelpers<any>) => {\n        let apiCall = card ? (v: any) => api.editCard(card.id, v) : (v: any) => api.createCard(v);\n        let { data, ok } = await apiCall(valuesToAPI(values));\n\n        if (!ok && data) {\n            setErrors(\n                Object.fromEntries(Object.entries(data as ObjectArray<string[]>).map(([field, err]) => [field, err[0]]))\n            );\n        } else if (ok && !card) {\n            resetForm();\n        }\n\n        //debugLog({ CARDCREATE: \"submitted card\", data, ok });\n        setSuccess(ok);\n        return;\n    };\n\n    debugLog({ CARDCREATE: \"layout render\" });\n\n    const formVerb = card ? \"edit\" : \"creat\";\n    const formVerbCap = formVerb.charAt(0).toUpperCase() + formVerb.slice(1);\n\n    return success ? (\n        <Header card>\n            <h2 className=\"mb-4\">Successfully {formVerb}ed bingo card!</h2>\n            <button className=\"btn btn-primary\" onClick={() => history.go(-1)}>\n                Go Back\n            </button>\n        </Header>\n    ) : (\n        <div className=\"px-2\">\n            <Formik validationSchema={cardSchema} initialValues={cardSchema.getDefault() as any} onSubmit={submitCard}>\n                {({ isSubmitting, setFieldValue, values, dirty }) => (\n                    <FormHelperContext.Provider\n                        value={{ cardSchema, setFieldValue, values, card, category, isSubmitting, dirty }}\n                    >\n                        {isSubmitting ? <Loading message={`${formVerbCap}ing new bingo card...`} /> : <CardForm />}\n                    </FormHelperContext.Provider>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\ninterface CardCreateParams {\n    cardId?: string;\n    categoryName?: string;\n}\n\nconst CardCreateView = () => {\n    const { cardId, categoryName } = useParams<CardCreateParams>();\n    debugLog({ CARDCREATE: \"init\", cardId, categoryName });\n\n    return cardId ? (\n        <ApiRender\n            apiCall={() => api.getCard(cardId)}\n            component={({ data }) => <CardCreateEditLayout card={data} />}\n            key={cardId}\n        />\n    ) : categoryName ? (\n        <ApiRender\n            apiCall={() => api.getCategory(categoryName)}\n            component={({ data }) => <CardCreateEditLayout category={data} />}\n            key={categoryName}\n        />\n    ) : (\n        <CardCreateEditLayout />\n    );\n};\n\nexport default CardCreateView;\n","import { ReactElement, useReducer, useRef, forwardRef, ReactNode } from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownItem from \"react-bootstrap/DropdownItem\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { ApiResponse } from \"../api/backend\";\nimport debugLog from \"../debug\";\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => <div ref={ref}>{children}</div>);\n\ninterface SearchBarProps {\n    label: ReactNode;\n    apiCall: (query: string) => Promise<ApiResponse<any[]>>;\n    //resultMapper: (result: any) => ReactElement<DropdownItem>;\n    resultMapper: (result: any[], query: string) => ReactElement<any>[];\n}\n\nconst SearchBar = ({ label, apiCall, resultMapper }: SearchBarProps) => {\n    // 1. StateHandling\n    // 2. SubElements\n    // 3. MainElement\n\n    // ============================================================================\n    // ========================= 1. StateHandling ================================\n    // ============================================================================\n\n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown after api call\n    onToggle should obv toggle dropdown\n\n    */\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ SEARCHBAR: \"input check\", label, query, queryRef });\n            if (query && query === queryRef.current) {\n                debugLog(\"searching for searchResults...\");\n                getResults();\n            }\n        }, 500);\n    };\n\n    type Action =\n        | { type: \"query\"; payload: string }\n        | { type: \"dropdown\"; payload: boolean }\n        | { type: \"menuSelect\"; payload: { query: string } }\n        | { type: \"results\"; payload: any[] }\n        | { type: \"load\"; payload: boolean };\n\n    type State = {\n        query: string;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        searchResults: any[];\n    };\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ SEARCHBAR: \"reducer\", label, state, action });\n        switch (action.type) {\n            case \"query\":\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                };\n            case \"dropdown\":\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case \"results\":\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    searchResults: action.payload,\n                };\n            case \"menuSelect\":\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                };\n            case \"load\":\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const initState: State = {\n        query: \"\",\n        showDropdown: false,\n        loading: false,\n        disabled: false,\n        searchResults: [],\n    };\n\n    const [{ disabled, query, showDropdown, loading, searchResults }, dispatch] = useReducer(stateReducer, initState);\n    const showQueryButton = disabled;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({ SEARCHBAR: \"states\", label, query, disabled });\n\n    const getResults = async () => {\n        dispatch({ type: \"load\", payload: true });\n        let { data, ok } = await apiCall(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: \"results\", payload: data });\n        } else {\n            dispatch({ type: \"load\", payload: false });\n        }\n    };\n\n    // ============================================================================\n    // ========================= 2. SubElements ==================================\n    // ============================================================================\n\n    const LoadingIndicator = () => (\n        <>\n            {loading && (\n                <InputGroup.Text>\n                    <div className=\"ps-2\">\n                        <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                </InputGroup.Text>\n            )}\n        </>\n    );\n\n    const ClearButton = () => (\n        <>\n            {!showQueryButton && query.length > 0 && (\n                <InputGroup.Text\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => dispatch({ type: \"query\", payload: \"\" })}\n                    className=\"input-group-text-clear\"\n                >\n                    <FontAwesomeIcon icon={faTimes} />\n                </InputGroup.Text>\n            )}\n        </>\n    );\n\n    /*\n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className='border-slight-top'/>\n            {searchResults.length > 0\n                ?\n                    searchResults.map(resultMapper)\n\n                :  \n                    <Dropdown.Item className='slight-bg' disabled>\n                        No results found\n                    </Dropdown.Item>}\n        </>\n    );\n     */\n\n    const DropdownItems = () => <>{resultMapper(searchResults, query)}</>;\n\n    const SearchBarLabel = () => (\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{label}</span>\n        </div>\n    );\n\n    // ============================================================================\n    // ========================= 3. MainElement ==================================\n    // ============================================================================\n\n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: \"dropdown\", payload: !showDropdown })}\n            onSelect={() => dispatch({ type: \"query\", payload: \"\" })}\n        >\n            <InputGroup className=\"rounded\">\n                <InputGroup.Text>{label}</InputGroup.Text>\n                <FormControl\n                    placeholder={showQueryButton ? \"\" : \"Search\"}\n                    disabled={showQueryButton}\n                    value={showQueryButton ? \"\" : query}\n                    type=\"text\"\n                    onChange={(e) => dispatch({ type: \"query\", payload: e.target.value })}\n                ></FormControl>\n                <ClearButton />\n                <LoadingIndicator />\n            </InputGroup>\n\n            {/*\n            <div className=\"input-group rounded\">\n                <label className=\"input-group-text\">{label}</label>\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? \"\" : \"Search\"}\n                    value={showQueryButton ? \"\" : query}\n                    onChange={(e) => dispatch({ type: \"query\", payload: e.target.value })}\n                />\n                <ClearButton />\n                <LoadingIndicator />\n            </div>\n            */}\n\n            <Dropdown.Toggle as={DropdownContainer} id={`search-bar-${label}`} />\n            <Dropdown.Menu className=\"w-100 slight-bg mt-1 px-2\">\n                <DropdownItems />\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default SearchBar;\n","import { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nimport { Link, BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    IconDefinition,\n    faSignOutAlt,\n    faSignInAlt,\n    faPencilAlt,\n    faTh,\n    //faPen,\n    faCog,\n    faUserCircle,\n    faTimes,\n    faSearch,\n    faUser,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n//import HomeView from \"./views/homeview\";\nimport HomePageView from \"./views/homepageview\";\nimport CategoryView from \"./views/categoryview\";\nimport UserView from \"./views/userview\";\nimport CardView from \"./views/cardview\";\nimport LoginView from \"./views/loginview\";\nimport SignupView from \"./views/signupview\";\nimport SearchView from \"./views/searchview\";\nimport CardCreateViewkjahsdk from \"./views/cardcreateview\";\nimport api from \"./api/backend\";\n//import { UserAuthContext, LogoutContext } from \"./context\";\nimport { BingoCard } from \"./types\";\nimport SearchBar from \"./components/searchbar\";\nimport { useAuth, ProvideAuth } from \"./auth\";\n//import Sidebar from \"./components/sidebar\";\n\nimport \"./scss/main.scss\";\nimport \"./scss/sidebar.scss\";\n\nconst DropdownContainer = ({ children }: any, ref: any) => <div ref={ref}>{children}</div>;\n\nconst Icon = ({ icon }: { icon: any }) => (\n    <h4 className=\"m-0\">\n        <FaIcon icon={icon} />\n    </h4>\n);\n\nconst LoginDropdown = () => {\n    const { user, logout } = useAuth();\n    const [showDropdown, setDropdown] = useState(false);\n\n    const toggleDropdown = () => setDropdown(!showDropdown);\n\n    interface IconRowProps {\n        label: string;\n        icon: IconDefinition;\n    }\n\n    const IconRow = ({ label, icon }: IconRowProps) => (\n        <>\n            <FaIcon icon={icon} className=\"me-2\" /> {label}\n        </>\n    );\n\n    const UserItems = () => (\n        <>\n            <Dropdown.Item className=\"slight-bg\" disabled>\n                {user ? <IconRow label={user.name} icon={faUser} /> : \"Not Logged In\"}\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            {user ? (\n                <>\n                    <Dropdown.Item\n                        as={Link}\n                        to={{\n                            pathname: `/users/${user.id}/`,\n                            state: { userId: user.id },\n                        }}\n                    >\n                        <IconRow label=\"Profile\" icon={faCog} />\n                    </Dropdown.Item>\n\n                    <Dropdown.Item onClick={() => logout({})}>\n                        <IconRow label=\"Logout\" icon={faSignOutAlt} />\n                    </Dropdown.Item>\n                </>\n            ) : (\n                <Dropdown.Item className=\"slight-bg\" as={Link} to=\"/login/\">\n                    <IconRow label=\"Login\" icon={faSignInAlt} />\n                </Dropdown.Item>\n            )}\n        </>\n    );\n\n    return (\n        <Dropdown show={showDropdown} onToggle={toggleDropdown}>\n            <div onClick={toggleDropdown} style={{ cursor: \"pointer\" }} className=\"hover-white\">\n                <Icon icon={faUserCircle} />\n            </div>\n            <Dropdown.Toggle as={DropdownContainer} id=\"login-dropdown\" />\n            <Dropdown.Menu align=\"end\" className=\"slight-bg\">\n                <UserItems />\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nconst TopNavBar = () => {\n    const [showSearch, setSearch] = useState(false);\n    //const { user } = useAuth();\n\n    const UserItems = () => (\n        <>\n            {/*\n            {user && (\n                <Nav.Item className=\"pr-3\">\n                    <Nav.Link as={Link} to=\"/create/card/\">\n                        <Icon icon={faPen} />\n                    </Nav.Link>\n                </Nav.Item>\n            )}\n            */}\n            <Nav.Item>\n                <LoginDropdown />\n            </Nav.Item>\n        </>\n    );\n\n    const searchbar = (\n        <SearchBar\n            label={<FaIcon icon={faSearch} />}\n            apiCall={(query) => api.getTopThreeCards(query)}\n            resultMapper={(result: BingoCard[], query: string) =>\n                result.length > 0\n                    ? [\n                          ...result.map((card) => (\n                              <Dropdown.Item as={Link} to={`/cards/${card.id}/`} className=\"mb-2\">\n                                  <small>\n                                      <FaIcon icon={faTh} /> <FaIcon icon={faPencilAlt} className=\"me-2\" /> {card.name}\n                                  </small>\n                              </Dropdown.Item>\n                          )),\n\n                          <Dropdown.Item as={Link} to={`/search/?q=${query}`}>\n                              <small>\n                                  <FaIcon icon={faSearch} className=\"me-2\" /> Search bingo cards for \"{query}\"\n                              </small>\n                          </Dropdown.Item>,\n                      ]\n                    : [\n                          <Dropdown.Item className=\"slight-bg\" disabled>\n                              <small>\n                                  <FaIcon icon={faTimes} className=\"me-2\" /> No results for \"{query}\"\n                              </small>\n                          </Dropdown.Item>,\n                      ]\n            }\n        />\n    );\n\n    return (\n        <>\n            <Navbar id=\"desktop-topnav\" className=\"sdark-fg d-none d-lg-block\" variant=\"dark\">\n                <Container>\n                    <Col xs={3}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/\">\n                                    BingoMemes\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <div className=\"align-items-center justify-content-center\">{searchbar}</div>\n                    </Col>\n                    <Col xs={3}>\n                        <Nav className=\"align-items-center justify-content-end\">\n                            <UserItems />\n                        </Nav>\n                    </Col>\n                </Container>\n            </Navbar>\n\n            <Navbar id=\"mobile-topnav\" className=\"sdark-fg d-lg-none\" variant=\"dark\">\n                <Container id=\"topnav-buttons\" className={\"w-100 \" + (!showSearch ? \"\" : \"d-none\")}>\n                    <Col xs={6}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/\">\n                                    BingoMemes\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <Nav className=\"align-items-center justify-content-end\">\n                            <Nav.Item onClick={() => setSearch(true)} className=\"pe-3\">\n                                <Nav.Link>\n                                    <Icon icon={faSearch} />\n                                </Nav.Link>\n                            </Nav.Item>\n                            <UserItems />\n                        </Nav>\n                    </Col>\n                </Container>\n                <Container id=\"topnav-search\" className={\"py-1 \" + (showSearch ? \"\" : \"d-none\")}>\n                    <Col xs={1} className=\"px-2\">\n                        <div onClick={() => setSearch(false)} style={{ cursor: \"pointer\" }}>\n                            <Icon icon={faTimes} />\n                        </div>\n                    </Col>\n                    <Col xs={11} className=\"px-2\">\n                        {searchbar}\n                    </Col>\n                </Container>\n            </Navbar>\n        </>\n    );\n};\n\nconst App = () => {\n    const containerRoutes: { [s: string]: React.FC } = {\n        \"/categories/:categoryName/create/\": CardCreateViewkjahsdk,\n        \"/cards/:cardId/edit/\": CardCreateViewkjahsdk,\n        \"/signup/\": SignupView,\n        \"/login/\": LoginView,\n        \"/cards/:cardId/\": CardView,\n    };\n\n    return (\n        <div className=\"sdark-bg\">\n            <TopNavBar />\n            <Switch>\n                {/* CARD LIST ROUTES; DOESN'T NEED CONTAINER */}\n                <Route exact path=\"/categories/:categoryName/\">\n                    <CategoryView />\n                </Route>\n                <Route exact path=\"/users/:userId/\">\n                    <UserView />\n                </Route>\n                <Route exact path=\"/search/\">\n                    <SearchView />\n                </Route>\n                <Route exact path=\"/profile/\">\n                    <UserView />\n                </Route>\n                <Route exact path=\"/\" component={HomePageView}></Route>\n\n                {/* CONTAINER ROUTES */}\n                {Object.entries(containerRoutes).map(([url, View]) => (\n                    <Route exact path={url}>\n                        <div className=\"py-3\">\n                            <Container>\n                                <View />\n                            </Container>\n                        </div>\n                    </Route>\n                ))}\n\n                {/* GENERIC ERROR */}\n                <Route>\n                    <h2 className=\"text-sdark-red text-center\">Page Not Found.</h2>\n                </Route>\n            </Switch>\n        </div>\n    );\n};\n\nReactDOM.render(\n    <Router>\n        <ProvideAuth>\n            <App />\n        </ProvideAuth>\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}