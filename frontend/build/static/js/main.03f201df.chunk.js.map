{"version":3,"sources":["debug.tsx","components/pagination.tsx","api/backend.ts","auth.tsx","components/snippets.tsx","components/cardinfo.tsx","api/render.tsx","components/sidebar.tsx","components/cardlist.tsx","views/homepageview.tsx","views/categoryview.tsx","views/userview.tsx","components/navbar.tsx","views/cardview.tsx","components/loading.tsx","views/loginview.tsx","views/signupview.tsx","views/searchview.tsx","views/cardcreateview.tsx","components/searchbar.tsx","index.tsx"],"names":["debugLog","props","logBody","Object","entries","map","key","value","join","console","log","getDefaultSort","params","get","orderingParams","hot","new","best","orderingIcons","faFire","faSun","faArrowUp","getRange","start","end","Array","fill","_","i","pagination","currentPage","pageCount","delta","range","Math","round","pages","min","withDots","pair","length","wd","FIRST","SECOND","Pagination","pageSize","itemCount","label","top","buttonShape","ceil","loc","useLocation","paginationUrl","pathname","urlParams","URLSearchParams","search","currentSort","pageNum","parseInt","delete","urlParamsString","toString","PageItem","button","index","color","innerButton","className","set","to","PageButtons","Dropdown","Toggle","Menu","ItemText","Divider","keys","filter","option","Item","as","Link","rowSize","paginationItems","forEach","thing","push","endIndex","Row","item","Col","SortNav","sortParams","Navbar","variant","Nav","n","icon","DefaultPageButtons","toApiQuery","location","query","cookies","Cookies","defaultOptions","credentials","defaultHeaders","apiGetPostPut","url","a","data","method","BACKEND","dataEmpty","options","headers","body","JSON","stringify","apiResp","apiDelete","fetch","resp","respData","json","ok","api","login","logout","editCard","cardId","cardData","deleteCard","createUser","userData","createVote","voteData","createSubscription","subData","createFollow","followData","createCard","getSession","getCard","getUser","userId","getCategory","categoryName","getCardList","getHomeCards","getTopThreeCards","name","getTopThreeCategories","getPopularCategories","AuthContext","createContext","user","ifAuth","callback","ProvideAuth","children","auth","useState","setUser","history","useHistory","IFAUTH","useProvideAuth","useEffect","Provider","useAuth","useContext","Header","card","edgePadding","paddingIndexes","tileIndex","padding","pad","includes","padIndex","indexOf","splice","months","parseDate","s","date","Date","parse","now","yearStr","getFullYear","getMonth","getDate","SubscribeButton","subbed","apiCall","subState","setSubbed","Button","onClick","HashtagButton","category","CategoryList","categories","xs","style","backgroundImage","icon_url","backgroundPosition","backgroundSize","subscriber_count","is_subscribed","id","minute","hour","day","month","times","year","dateStr","isoString","diff","getTime","str","time","floor","sendVote","up","VoteButtons","inactiveColor","upColor","downColor","u","d","t","upvoted","voteAdjust","setUp","down","setDown","scoreColor","setScoreColor","changeVoteState","activeColor","state","setState","currentUpColor","currentDownColor","voteScore","loggedIn","Boolean","voteAction","score","faArrowDown","VoteButtonSingle","cursor","CardInfo","link","showModal","setModal","toggleModal","userLink","author","categoryLink","cardLinkUrl","CardLink","CardDetails","created_at","hashtags","hashtag","CardControls","faEdit","faTrash","DeleteModal","Modal","show","dialogAs","Dialog","centered","closeButton","Body","Footer","go","ApiRender","loadingMessage","component","setResp","APIRENDER","RespStatus","detail","Spinner","animation","role","Component","PageContent","PopularCategoriesSidebar","results","row","CardList","home","CardLayout","PaginationThing","header","count","page_size","CardListSidebar","infoCol","sidebarCol","Container","lg","HomePageView","Helmet","CategoryHeader","searchParams","hashtagParams","encodeURIComponent","banner_url","position","bottom","width","height","src","alt","marginLeft","faTimes","Sidebar","description","related_categories","CategoryView","useParams","UserHeader","categories_created","UserView","scrollToY","y","window","scrollTo","behavior","scrollToTop","scrollToBottom","document","scrollHeight","NavBarUnit","spacer","buttons","navItem","text","onclick","fixed","undefined","faQuestion","faHandPointDown","faHandPointUp","things","AppNavBar","solutionIndexes","edge","vert","horiz","diag1","diag2","tileHover","tile","setCard","navigator","maxTouchPoints","tiles","hovered","tileClick","setSolution","clicked","newSolution","some","line","every","checkForBingo","colorTheTile","clickedColor","hoverColor","passedCard","cardInfo","CARD","tileSearchQuery","setTileSearchQuery","solution","topToggled","setTopToggled","inputRef","useRef","solved","hideTop","current","focus","faSearch","faExpandAlt","filteredTiles","toLowerCase","md","InputGroup","Form","Control","placeholder","type","onChange","e","target","onFocus","ref","Text","onMouseEnter","onMouseLeave","href","resetBingo","CardView","Loading","message","stringField","Yup","default","required","LoginSchema","shape","username","password","LoginForm","valid","done","setLoginState","handleSubmit","values","resetForm","FormView","noValidate","Label","validationSchema","initialValues","onSubmit","isSubmitting","setSubmitting","LoginView","SignupView","SignupSchema","max","confirmPassword","when","is","val","then","oneOf","email","signupFields","SignupForm","createdSuccess","setCreatedSuccess","submitDone","setDone","submitUser","setErrors","fromEntries","SignupFormLayout","fieldLabel","fieldName","fieldType","disabled","SignupSuccess","validateOnBlur","validateOnChange","getDefault","SearchView","searchQuery","cardQuery","SEARCHVIEW","DropdownContainer","forwardRef","FormHelperContext","setFieldValue","CategorySearchBar","initState","showDropdown","loading","errors","useReducer","action","CATEGORYSEARCHBAR","setTimeout","queryRef","getCategories","payload","categoryValue","dispatch","showQueryButton","LoadingIndicator","ClearButton","QueryButton","DropdownItems","eventKey","CategoryErrors","err","SuccessIndicator","onToggle","onSelect","errs","categorySchema","validateSync","FormRowIndicator","meta","touched","error","FormRow","field","prependColor","preventEnter","keyEvent","preventDefault","CardForm","headerText","onKeyDown","tileFieldNames","matches","excludeEmptyString","CardCreateEditLayout","success","setSuccess","tileMapping","tileFields","cardSchema","defaultValues","submitCard","tileValues","formValues","v","CARDCREATE","formVerb","formVerbCap","charAt","toUpperCase","slice","CardCreateView","SearchBar","resultMapper","SEARCHBAR","getResults","searchResults","SearchBarLabel","Icon","LoginDropdown","setDropdown","toggleDropdown","IconRow","UserItems","faUser","faCog","faSignOutAlt","faSignInAlt","faUserCircle","align","TopNavBar","showSearch","setSearch","searchbar","result","faTh","faPencilAlt","App","containerRoutes","exact","path","View","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.03f201df.chunk.js","sourcesContent":["const DEBUG = true;\nconst debugLog = (props: any) => {\n  if (DEBUG) {\n    const logBody = Object.entries(props)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(\"\\n  \");\n\n    console.log(`{\\n  ${logBody}\\n}`);\n  }\n  //DEBUG && console.log(props);\n};\n\nexport default debugLog;\n","import Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { ReactElement } from \"react\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition, faFire, faSun, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport debugLog from \"../debug\";\n\ninterface PaginationProps {\n    itemCount: number;\n    pageSize: number;\n    label: string;\n    top?: boolean;\n}\n\nconst Pagination = ({ pageSize, itemCount, label, top = false }: PaginationProps) => {\n    const buttonShape = \"w-100 rounded p-2 text-center\";\n    const pageCount = Math.ceil(itemCount / pageSize);\n\n    const loc = useLocation();\n    const paginationUrl = loc.pathname;\n    const urlParams = new URLSearchParams(loc.search);\n    const currentSort = getDefaultSort(urlParams);\n    const pageNum = parseInt(urlParams.get(\"page\") || \"1\");\n    urlParams.delete(\"page\");\n    const urlParamsString = urlParams.toString();\n\n    const PageItem = ({ index = 0 }: { index?: number }) => {\n        const color = index === pageNum ? \"bg-sdark-orange text-white\" : \"sdark-fg\";\n\n        const innerButton = (\n            <div className={`${buttonShape} ${color} ${index ? \"page-btn\" : \"\"}`}>{index ? index : \"...\"}</div>\n        );\n\n        let button: ReactElement;\n\n        if (index && index !== pageNum) {\n            let params = new URLSearchParams(urlParamsString);\n            params.set(\"page\", `${index}`);\n            button = <Link to={`${paginationUrl}?${params.toString()}`}>{innerButton}</Link>;\n        } else {\n            button = innerButton;\n        }\n\n        return button;\n    };\n\n    const sortDropdown = (\n        <Dropdown>\n            <Dropdown.Toggle id=\"sort-dropdown\" className={`sdark-fg border-0 p-0 w-100 ${buttonShape}`}>\n                sort: {currentSort}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu className=\"w-100 slight-bg\">\n                <Dropdown.ItemText>Sort by</Dropdown.ItemText>\n                <Dropdown.Divider />\n                {Object.keys(orderingParams)\n                    .filter((option) => option !== currentSort)\n                    .map((option) => {\n                        urlParams.set(\"sort\", option);\n                        return (\n                            <Dropdown.Item as={Link} to={`${paginationUrl}?${urlParams.toString()}`}>\n                                {option}\n                            </Dropdown.Item>\n                        );\n                    })}\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n\n    const PageButtons = ({ rowSize }: { rowSize: number }) => {\n        let paginationItems: (number | null)[] = pagination(pageNum, pageCount);\n\n        if (paginationItems.length < rowSize)\n            Array(rowSize - paginationItems.length)\n                .fill(null)\n                .forEach((thing) => paginationItems.push(thing));\n\n        const endIndex = rowSize - 1;\n\n        return (\n            <Row className={`row-cols-${rowSize}`}>\n                {paginationItems.map((item, index) => (\n                    <Col className=\"p-0\">\n                        <div className={index === endIndex ? \"\" : \"pe-2\"}>\n                            {item !== null && <PageItem index={item} />}\n                        </div>\n                    </Col>\n                ))}\n            </Row>\n        );\n    };\n\n    const InfoCluster = () => (\n        <Row>\n            <Col xs={4} className=\"p-0 pe-1\">\n                <div className={`sdark-fg ${buttonShape}`}>Page {pageNum}</div>\n            </Col>\n            <Col xs={4} className=\"px-1\">\n                <div className={`sdark-fg ${buttonShape}`}>\n                    {itemCount} {label}\n                </div>\n            </Col>\n            <Col xs={4} className=\"ps-1 p-0\">\n                {sortDropdown}\n            </Col>\n        </Row>\n    );\n\n    /*\n    const SortRow = () => {\n        const sortParams = new URLSearchParams(loc.search);\n        sortParams.delete(\"page\");\n        const currentSortIndicator = \"rounded-pill sdark-bg\";\n\n        return (\n            <Row className=\"rounded p-2 sdark-fg\">\n                <Col xs={5}>\n                    <Row>\n                        {Object.entries(orderingParams).map(([n, q]) => {\n                            sortParams.set(\"sort\", n);\n                            return (\n                                <Col className=\"px-2\">\n                                    <div className={`p-2 text-center ${n === currentSort ? currentSortIndicator : \"\"}`}>\n                                        <Link to={`${paginationUrl}?${sortParams.toString()}`}>\n                                            <p className=\"text-capitalize m-0\">\n                                                <FaIcon icon={orderingIcons[n]} className=\"me-2\" />\n                                                {n}\n                                            </p>\n                                        </Link>\n                                    </div>\n                                </Col>\n                            );\n                        })}\n                    </Row>\n                </Col>\n            </Row>\n        );\n    };\n    */\n\n    const SortNav = () => {\n        const sortParams = new URLSearchParams(loc.search);\n        sortParams.delete(\"page\");\n        const currentSortIndicator = \"rounded-pill sdark-bg\";\n\n        return (\n            <Row>\n                <Col className=\"p-0\">\n                    <div className=\"rounded py-2 px-3 sdark-fg\">\n                        <Navbar variant=\"dark\" className=\"p-0\">\n                            <Nav>\n                                {Object.entries(orderingParams).map(([n, q]) => {\n                                    sortParams.set(\"sort\", n);\n                                    return (\n                                        <Nav.Item\n                                            className={`px-2 me-2 ${n === currentSort ? currentSortIndicator : \"\"}`}\n                                        >\n                                            <Nav.Link as={Link} to={`${paginationUrl}?${sortParams.toString()}`}>\n                                                <p className=\"text-capitalize m-0\">\n                                                    <FaIcon icon={orderingIcons[n]} className=\"me-3\" />\n                                                    {n}\n                                                </p>\n                                            </Nav.Link>\n                                        </Nav.Item>\n                                    );\n                                })}\n                            </Nav>\n                        </Navbar>\n                    </div>\n                </Col>\n            </Row>\n        );\n    };\n\n    const DefaultPageButtons = () => <PageButtons rowSize={7} />;\n\n    return top ? <SortNav /> : <DefaultPageButtons />;\n\n    //return (\n    //    <>\n    //        {/* mobile */}\n    //        <div className=\"d-lg-none\">\n    //            <Row>\n    //                {top && (\n    //                    <Col xs={12}>\n    //                        <div className=\"pb-2\">{infoCluster}</div>\n    //                        <div className=\"pt-2\"></div>\n    //                    </Col>\n    //                )}\n    //                <Col xs={12}>{pageButtons}</Col>\n    //            </Row>\n    //        </div>\n\n    //        {/* desktop */}\n    //        <div className=\"d-none d-lg-block\">\n    //            <Row>\n    //                <Col xs={6}>\n    //                    <div className=\"pe-2\">{pageButtons}</div>\n    //                </Col>\n    //                {top && (\n    //                    <Col xs={6}>\n    //                        <div className=\"ps-2\">{infoCluster}</div>\n    //                    </Col>\n    //                )}\n    //            </Row>\n    //        </div>\n    //    </>\n    //);\n};\nconst getDefaultSort = (params: URLSearchParams) => params.get(\"sort\") || \"hot\";\nconst orderingParams: { [s: string]: string } = {\n    hot: \"-hot,-best,-created_at\",\n    new: \"-created_at\",\n    best: \"-best,-created_at\",\n};\nconst orderingIcons: { [s: string]: IconDefinition } = {\n    hot: faFire,\n    new: faSun,\n    best: faArrowUp,\n};\n\nconst getRange = (start: number, end: number) => {\n    return Array(end - start + 1)\n        .fill(0)\n        .map((_, i) => i + start);\n};\n\nconst pagination = (currentPage: number, pageCount: number) => {\n    let delta: number;\n    if (pageCount <= 7) {\n        // delta === 7: [1 2 3 4 5 6 7]\n        delta = 7;\n    } else {\n        // delta === 2: [1 ... 4 5 6 ... 10]\n        // delta === 4: [1 2 3 4 5 ... 10]\n        delta = currentPage > 4 && currentPage < pageCount - 3 ? 2 : 4;\n    }\n\n    const range = {\n        start: Math.round(currentPage - delta / 2),\n        end: Math.round(currentPage + delta / 2),\n    };\n\n    if (range.start - 1 === 1 || range.end + 1 === pageCount) {\n        range.start += 1;\n        range.end += 1;\n    }\n\n    let pages: number[] =\n        currentPage > delta\n            ? getRange(Math.min(range.start, pageCount - delta), Math.min(range.end, pageCount))\n            : getRange(1, Math.min(pageCount, delta + 1));\n\n    const withDots = (value: number, pair: number[]) => (pages.length + 1 !== pageCount ? pair : [value]);\n\n    if (pages[0] !== 1) {\n        let wd = withDots(1, [1, 0]);\n        debugLog({ FIRST: \"\", wd, pages });\n        pages = [...wd, ...pages];\n    }\n\n    if (pages[pages.length - 1] < pageCount) {\n        let wd = withDots(pageCount, [0, pageCount]);\n        debugLog({ SECOND: \"\", wd, pages });\n        pages = [...pages, ...wd];\n    }\n\n    return pages;\n};\n\nexport default Pagination;\n\nexport const toApiQuery = (location: Location, query: object = {}) => {\n    let urlParams = new URLSearchParams(location.search);\n    urlParams.set(\"ordering\", orderingParams[getDefaultSort(urlParams)]);\n    urlParams.delete(\"sort\");\n\n    Object.entries(query).forEach(([key, value]) => urlParams.set(key, value));\n\n    return urlParams.toString();\n};\n","import Cookies from \"universal-cookie\";\nimport { Location } from \"history\";\n\nimport { toApiQuery } from \"../components/pagination\";\nimport { User, BingoCard, Category } from \"../types\";\nimport debugLog from \"../debug\";\n\n// here for pasting purposes\n// import api from '../api/backend';\n\nconst cookies = new Cookies();\nconst baseUrl = \"/api\";\nconst defaultOptions = { credentials: \"same-origin\" };\nconst defaultHeaders = () => ({\n    \"X-CSRFToken\": cookies.get(\"csrftoken\"),\n});\n\nexport type ResponseData<T = any> = T | null;\n\nexport interface ApiResponse<T = any> {\n    data: ResponseData<T>;\n    ok: boolean;\n}\n\nconst apiGetPostPut = async <T = any>(url: string, data: object = {}, method?: string): Promise<ApiResponse<T>> => {\n    debugLog({ BACKEND: 1, url, data });\n    let dataEmpty = Object.keys(data).length === 0;\n    method = method || (!dataEmpty ? \"POST\" : \"GET\");\n    let options: any = { ...defaultOptions, method };\n\n    if (!dataEmpty) {\n        options = {\n            ...options,\n            headers: {\n                ...defaultHeaders(),\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n        };\n    }\n\n    return await apiResp<T>(url, options);\n};\n\nconst apiDelete = async <T = any>(url: string): Promise<ApiResponse<T>> => {\n    return await apiResp<T>(url, {\n        ...defaultOptions,\n        method: \"DELETE\",\n        headers: { ...defaultHeaders() },\n    });\n};\n\nconst apiResp = async <T = any>(url: string, options: any): Promise<ApiResponse<T>> => {\n    let resp = await fetch(`${baseUrl}${url}`, options);\n    let respData: T | null = null;\n\n    try {\n        respData = await resp.json();\n    } catch {}\n\n    return {\n        data: respData,\n        ok: resp.ok,\n    };\n};\n\ninterface VoteData {\n    card: { id: number };\n    up: boolean;\n}\n\ninterface UserData {\n    username: string;\n    password: string;\n    email: string;\n}\n\ninterface LoginData {\n    user?: User;\n    valid: boolean;\n}\n\ninterface SubscribeData {\n    id: number;\n}\n\ninterface FollowData {\n    id: number;\n}\n\nconst api = {\n    login(credentials: object) {\n        return apiGetPostPut<LoginData>(\"/login/\", credentials);\n    },\n    logout() {\n        return apiGetPostPut(\"/logout/\");\n    },\n\n    // PUT\n    editCard(cardId: number, cardData: object) {\n        return apiGetPostPut(`/cards/${cardId}/`, cardData, \"PATCH\");\n    },\n\n    // DELETE\n    deleteCard(cardId: number) {\n        return apiDelete(`/cards/${cardId}/`);\n    },\n\n    // POST\n    createUser(userData: UserData) {\n        return apiGetPostPut(\"/signup/\", userData);\n    },\n    createVote(voteData: VoteData) {\n        return apiGetPostPut(\"/votes/\", voteData);\n    },\n    createSubscription(subData: SubscribeData) {\n        return apiGetPostPut(\"/subscribe/\", subData);\n    },\n    createFollow(followData: FollowData) {\n        return apiGetPostPut(\"/follow/\", followData);\n    },\n    createCard(cardData: object) {\n        return apiGetPostPut(\"/cards/\", cardData);\n    },\n\n    // GET\n    getSession() {\n        return apiGetPostPut(\"/session/\");\n    },\n    getCard(cardId: string) {\n        return apiGetPostPut(`/cards/${cardId}/`);\n    },\n    getUser(userId: string) {\n        return apiGetPostPut(`/users/${userId}/`);\n    },\n    getCategory(categoryName: string) {\n        return apiGetPostPut(`/categories/${categoryName}/`);\n    },\n\n    getCardList(location: Location, query: object = {}) {\n        return apiGetPostPut(`/cards/?${toApiQuery(location, query)}`);\n    },\n    getHomeCards(location: Location, query: object = {}) {\n        return apiGetPostPut(`/home/?${toApiQuery(location, query)}`);\n    },\n\n    getTopThreeCards(name: string) {\n        return apiGetPostPut<BingoCard[]>(`/bar/cards/?search=${name}`);\n    },\n    getTopThreeCategories(name: string) {\n        return apiGetPostPut<Category[]>(`/bar/categories/?search=${name}`);\n    },\n\n    getPopularCategories() {\n        return apiGetPostPut<Category[]>(\"/popular/categories/\");\n    },\n};\n\nexport default api;\n","import { useContext, useState, useEffect, createContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserState } from \"./types\";\nimport api, { ApiResponse } from \"./api/backend\";\nimport debugLog from \"./debug\";\n\ntype AuthCallback = (resp: ApiResponse) => void;\n\ninterface LoginProps {\n    credentials: object;\n    callback?: AuthCallback;\n}\n\ninterface LogoutProps {\n    callback?: AuthCallback;\n}\n\ninterface AuthData {\n    user: UserState;\n    login: (props: LoginProps) => Promise<void>;\n    logout: (props: LogoutProps) => Promise<void>;\n    getSession: () => Promise<void>;\n    ifAuth: (callback: () => void) => void;\n}\n\nexport const AuthContext = createContext<AuthData>({\n    user: null,\n    async login(props: LoginProps) {},\n    async logout(props: LogoutProps) {},\n    async getSession() {},\n    ifAuth(callback: () => void) {},\n});\n\nconst useProvideAuth = () => {\n    const [user, setUser] = useState<UserState>(null);\n    const history = useHistory();\n\n    return {\n        user,\n        async login({ credentials, callback }: LoginProps) {\n            let { data, ok } = await api.login(credentials);\n            if (ok && data && data.user) setUser(data.user);\n            callback && callback({ data, ok });\n        },\n        async logout({ callback }: LogoutProps) {\n            let { data, ok } = await api.logout();\n            if (ok) setUser(null);\n            callback && callback({ data, ok });\n        },\n        async getSession() {\n            let { data, ok } = await api.getSession();\n            if (ok && data && data.user) setUser(data.user);\n        },\n        ifAuth(callback: () => void) {\n            if (user) {\n                callback();\n            } else {\n                debugLog({ IFAUTH: \"redirect to login\" });\n                history.push(\"/login/\");\n            }\n        },\n    };\n};\n\nexport const ProvideAuth = ({ children }: { children: any }) => {\n    const auth = useProvideAuth();\n\n    useEffect(() => {\n        auth.getSession();\n    }, []);\n\n    return <AuthContext.Provider value={auth}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => useContext(AuthContext);\n","import { ReactNode, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport api, { ApiResponse } from \"../api/backend\";\nimport { useAuth } from \"../auth\";\nimport { Category } from \"../types\";\n\ninterface HeaderProps {\n    card?: boolean;\n    children: ReactNode;\n}\n\nexport const Header = ({ card, children }: HeaderProps) => (\n    <div className=\"row\">\n        <div className=\"w-100\">\n            <div className=\"row\">\n                <div className=\"col-2 d-none d-lg-block\" />\n                <div className=\"col-12 col-lg-8\">\n                    <div>\n                        {card ? <div className=\"py-4 text-center rounded sdark-fg m-2\">{children}</div> : children}\n                    </div>\n                </div>\n                <div className=\"col-2 d-none d-lg-block\" />\n            </div>\n        </div>\n    </div>\n);\n\ninterface InfoHeaderProps {\n    subject: string;\n    info: ReactNode[];\n}\n\nconst infoPadding = (index: number, max: number) => {\n    switch (index) {\n        case 0:\n            return `pb-${gridPadding}`;\n        case max:\n            return `pt-${gridPadding}`;\n        default:\n            return `py-${gridPadding}`;\n    }\n};\n\nconst gridPadding = 1;\nexport const headerItem = \"rounded text-center sdark-fg p-3 w-100\";\nexport const centeredItem = \"h-100 d-flex align-items-center justify-content-center\";\n\nexport const InfoHeader = ({ subject, info }: InfoHeaderProps) => (\n    <Header>\n        <div className=\"p-2\">\n            <div className=\"row\">\n                <div className={`col-8 pe-${gridPadding}`}>\n                    <div className={`${centeredItem} ${headerItem}`}>\n                        <h3>{subject}</h3>\n                    </div>\n                </div>\n                <div className={`col-4 ps-${gridPadding}`}>\n                    <div>\n                        <div className=\"col\">\n                            {info.map((tidbit, index) => (\n                                <div className={`row ${infoPadding(index, info.length - 1)}`}>\n                                    <div className={`${headerItem} w-100`}>{tidbit}</div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div className=\"pt-2 px-2 d-none\">\n            <div className=\"row\">\n                <div className={`col pb-${gridPadding}`}>\n                    <div className={headerItem}>\n                        <div className=\"p-2\">\n                            <h2>{subject}</h2>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row row-cols-2\">\n                {info.map((tidbit, index) => (\n                    <div className={`col py-${gridPadding} ${index % 2 === 0 ? \"pr\" : \"pl\"}-${gridPadding}`}>\n                        <div className={`${centeredItem} ${headerItem}`}>{tidbit}</div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </Header>\n);\n\nexport const edgePadding: string[] = (() => {\n    let paddingIndexes: { [s: string]: number[] } = {\n        \"pt-1\": [1, 2, 3, 4, 5], // top\n        \"pe-1\": [5, 10, 15, 20, 25], // right\n        \"ps-1\": [1, 6, 11, 16, 21], // left\n        \"pb-1\": [21, 22, 23, 24, 25], // bottom\n    };\n\n    return Array(25)\n        .fill(0)\n        .map((_, tileIndex) => {\n            tileIndex++;\n            let padding = [\"pt-1\", \"pb-1\", \"ps-1\", \"pe-1\"];\n\n            Object.entries(paddingIndexes).forEach(([pad, indexes]) => {\n                if (indexes.includes(tileIndex)) {\n                    let padIndex = padding.indexOf(pad);\n                    padding.splice(padIndex, 1);\n                }\n            });\n\n            return padding.join(\" \");\n        });\n})();\n\n/*\nconst months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sept',\n    'Oct',\n    'Nov',\n    'Dec',\n];\n*/\n\nconst months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n];\n\nexport const parseDate = (s: string) => {\n    const date = new Date(Date.parse(s));\n    const now = new Date();\n    const yearStr = date.getFullYear() !== now.getFullYear() ? `, ${date.getFullYear() % 100}` : \"\";\n\n    //return date.toLocaleString();\n    return `${months[date.getMonth()]} ${date.getDate()}${yearStr}`;\n};\n\ninterface SubscribeButtonProps {\n    subbed: boolean | null;\n    apiCall: () => Promise<ApiResponse>;\n}\n\nexport const SubscribeButton = ({ subbed, apiCall }: SubscribeButtonProps) => {\n    const [subState, setSubbed] = useState(subbed);\n    const { ifAuth } = useAuth();\n\n    return (\n        <Button\n            variant={subState ? \"secondary\" : \"danger\"}\n            className=\"rounded-pill\"\n            onClick={() =>\n                ifAuth(() => {\n                    setSubbed(!subState);\n                    apiCall();\n                })\n            }\n        >\n            {subState ? \"Subscribed\" : \"Subscribe\"}\n        </Button>\n    );\n};\n\ninterface HashtagButtonProps {\n    name: string;\n    category: Category;\n    color?: string;\n}\n\nexport const HashtagButton = ({ category, name }: HashtagButtonProps) => {\n    const history = useHistory();\n\n    return (\n        <Button\n            variant=\"primary\"\n            className=\"text-white rounded-pill mb-2 me-2 py-1\"\n            onClick={() => history.push(`/categories/${category.name}/?hashtag=${name}`)}\n        >\n            #{name}\n        </Button>\n    );\n};\n\ninterface CategoryListProps {\n    categories: Category[];\n}\n\nexport const CategoryList = ({ categories }: CategoryListProps) => {\n    return (\n        <Col>\n            {categories.map((category) => (\n                <Row>\n                    <Col className=\"my-2\">\n                        <Row>\n                            <Col xs={2}>\n                                <div\n                                    className=\"rounded-circle p-4\"\n                                    style={{\n                                        backgroundImage: `url(\"${category.icon_url}\")`,\n                                        backgroundPosition: \"center\",\n                                        backgroundSize: \"cover\",\n                                        //width: \"40px\",\n                                        //width: \"40px\",\n                                        //height: \"40px\",\n                                    }}\n                                ></div>\n                            </Col>\n                            <Col>\n                                <small>\n                                    <Link to={`/categories/${category.name}`}>\n                                        <b>{category.name}</b>\n                                    </Link>\n                                    <p>\n                                        {category.subscriber_count} Subscriber\n                                        {category.subscriber_count === 1 ? \"\" : \"s\"}\n                                    </p>\n                                </small>\n                            </Col>\n                            <Col className=\"pe-0\">\n                                <SubscribeButton\n                                    subbed={category.is_subscribed}\n                                    apiCall={() => api.createSubscription({ id: category.id })}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            ))}\n        </Col>\n    );\n};\n","import { useState } from \"react\";\n\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\n//import Button from 'react-bootstrap/Button';\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faEdit, faArrowUp, faArrowDown, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { BingoCard, UserState } from \"../types\";\n//import { UserAuthContext } from \"../context\";\nimport api from \"../api/backend\";\nimport { useAuth } from \"../auth\";\nimport { centeredItem, HashtagButton } from \"../components/snippets\";\n\nconst minute = 1000 * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst month = day * 31;\nconst year = month * 12;\nconst times: { [s: string]: number } = {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n};\n\nconst dateStr = (isoString: string) => {\n    var now = new Date(Date.now());\n    var date = new Date(Date.parse(isoString));\n    var diff = now.getTime() - date.getTime();\n\n    for (const str in times) {\n        let time = times[str];\n        if (diff >= time) {\n            let value = Math.floor(diff / time);\n            value = time === minute ? value % 60 : value;\n            let s = value > 1 ? \"s\" : \"\";\n            return `${value} ${str}${s} ago`;\n        }\n    }\n\n    return \"just now\";\n};\n\nconst sendVote = async (card: BingoCard, up: boolean) => {\n    await api.createVote({ card: { id: card.id }, up: up });\n};\n\ninterface VoteButtonsProps {\n    card: BingoCard;\n}\n\nconst VoteButtons = ({ card }: VoteButtonsProps) => {\n    //const user = useContext(UserAuthContext);\n    const { user } = useAuth();\n    const inactiveColor = \"sdark-fg\";\n    const upColor = \"sdark-orange\";\n    const downColor = \"sdark-violet\";\n\n    var u = false;\n    var d = false;\n    var a = 0;\n    var t = `text-${inactiveColor}`;\n    if (card.upvoted !== null) {\n        a = card.upvoted ? -1 : 1;\n        if (card.upvoted) {\n            u = true;\n            t = `text-${upColor}`;\n        } else {\n            d = true;\n            t = `text-${downColor}`;\n        }\n    }\n\n    var voteAdjust = a;\n    const [up, setUp] = useState(u);\n    const [down, setDown] = useState(d);\n    const [scoreColor, setScoreColor] = useState(t);\n\n    const changeVoteState = (activeColor: string, state: boolean, setState: (b: boolean) => void) => {\n        setUp(false);\n        setDown(false);\n        setState(!state);\n        setScoreColor(\"text-\" + (!state ? activeColor : inactiveColor));\n    };\n\n    const upvoteClick = () => {\n        changeVoteState(upColor, up, setUp);\n        sendVote(card, true);\n    };\n    const downvoteClick = () => {\n        changeVoteState(downColor, down, setDown);\n        sendVote(card, false);\n    };\n\n    var currentUpColor = up ? upColor : inactiveColor;\n    var currentDownColor = down ? downColor : inactiveColor;\n\n    var voteScore = 0;\n    if (up && !down) voteScore = 1;\n    else if (down && !up) voteScore = -1;\n\n    voteScore += voteAdjust;\n    var loggedIn = Boolean(user);\n    // 🡅 🡇\n    return (\n        <Col xs={2} className=\"border-sdark-right text-center\">\n            <VoteButtonSingle\n                icon={faArrowUp}\n                color={currentUpColor}\n                loggedIn={loggedIn}\n                voteAction={upvoteClick}\n                user={user}\n            />\n            <div className={`my-1 ${scoreColor}`}>\n                <h5>{card.score + voteScore}</h5>\n            </div>\n            <VoteButtonSingle\n                icon={faArrowDown}\n                color={currentDownColor}\n                loggedIn={loggedIn}\n                voteAction={downvoteClick}\n                user={user}\n            />\n        </Col>\n    );\n};\n\ninterface VoteButtonSingleProps {\n    icon: IconDefinition;\n    color: string;\n    loggedIn: boolean;\n    voteAction: () => void;\n    user: UserState;\n}\n\nconst VoteButtonSingle = ({ icon, color, loggedIn, voteAction, user }: VoteButtonSingleProps) => (\n    <div\n        className={`text-${color} ${user ? \"vote-btn\" : \"\"} p-1 rounded`}\n        onClick={loggedIn ? voteAction : () => {}}\n        style={loggedIn ? { cursor: \"pointer\" } : {}}\n    >\n        <FaIcon icon={icon} />\n    </div>\n);\n\ninterface CardInfoProps {\n    card: BingoCard;\n    link?: boolean;\n}\n\nconst CardInfo = ({ card, link }: CardInfoProps) => {\n    const history = useHistory();\n    const [showModal, setModal] = useState(false);\n    //const user = useContext(UserAuthContext);\n    const { user } = useAuth();\n    const toggleModal = () => setModal(!showModal);\n    //const goToEdit = () => history.push({ pathname: `/cards/${card.id}/edit/`, state: { cardId: card.id } });\n\n    const userLink = <Link to={`/users/${card.author.id}/`}>{card.author.name}</Link>;\n    const categoryLink = <Link to={`/categories/${card.category.name}/`}>{card.category.name}</Link>;\n    const cardLinkUrl = `/cards/${card.id}/`;\n\n    //const cardLink = (\n    //    <Link to={{\n    //        pathname: cardLinkUrl,\n    //        state: {\n    //            card: card\n    //        },\n    //    }}>\n    //        <h5>\n    //            {card.name}\n    //        </h5>\n    //    </Link>\n    //);\n\n    const CardLink = () =>\n        link ? (\n            <Link to={cardLinkUrl}>\n                <h5>{card.name}</h5>\n            </Link>\n        ) : (\n            <h5>{card.name}</h5>\n        );\n\n    const CardDetails = () => (\n        <Col>\n            <Row>\n                <Col>\n                    <CardLink />\n                    <p className=\"text-sdark-fg\">\n                        submitted {dateStr(card.created_at)} by {userLink} to {categoryLink}\n                    </p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    {card.hashtags.map((hashtag) => (\n                        <HashtagButton name={hashtag.name} category={card.category} />\n                    ))}\n                </Col>\n            </Row>\n        </Col>\n    );\n\n    const CardControls = () => (\n        <>\n            {user && card.author.id === user.id && (\n                <Col xs={1} className=\"border-sdark-left text-center\">\n                    <Row className=\"d-flex justify-content-center align-items-center h-50\">\n                        <Link to={`/cards/${card.id}/edit/`}>\n                            <div className=\"text-sdark-red\">\n                                <FaIcon icon={faEdit} />\n                            </div>\n                        </Link>\n                    </Row>\n                    <Row className=\"d-flex justify-content-center align-items-center h-50\">\n                        <div className=\"text-sdark-red\" style={{ cursor: \"pointer\" }} onClick={toggleModal}>\n                            <FaIcon icon={faTrash} />\n                        </div>\n                    </Row>\n                </Col>\n            )}\n        </>\n    );\n\n    const DeleteModal = () => (\n        <Modal\n            show={showModal}\n            dialogAs={(props) => (\n                <Modal.Dialog centered>\n                    <div {...props} className=\"modal-content rounded slight-bg\"></div>\n                </Modal.Dialog>\n            )}\n        >\n            <Modal.Header closeButton>Delete Bingo Card</Modal.Header>\n            <Modal.Body>Are you sure you want to delete bingo card \"{card.name}\"?</Modal.Body>\n            <Modal.Footer>\n                <button\n                    className=\"btn btn-danger\"\n                    onClick={async () => {\n                        await api.deleteCard(card.id);\n                        history.go(0);\n                    }}\n                >\n                    Yes\n                </button>\n                <button className=\"btn btn-success\" onClick={toggleModal}>\n                    No\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n\n    return (\n        <div className=\"p-3 rounded sdark-fg\">\n            <Row>\n                <VoteButtons card={card} />\n                <CardDetails />\n                <CardControls />\n                <DeleteModal />\n            </Row>\n        </div>\n    );\n};\n\nexport default CardInfo;\n","import { useEffect, useState } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport { ApiResponse } from './backend';\nimport debugLog from '../debug';\n\ninterface ComponentProps {\n    data: any;\n}\n\ninterface ApiRenderProps {\n    apiCall: () => Promise<ApiResponse>;\n    component: React.FunctionComponent<ComponentProps>;\n    loadingMessage?: string;\n    key: string;\n}\n\n\nconst ApiRender = ({ apiCall, loadingMessage, component }: ApiRenderProps) => {\n    const [{ data, ok }, setResp] = useState<ApiResponse>({ data: null, ok: true });\n\n    useEffect(() => {\n        (async () => {\n            debugLog({ APIRENDER: 'getting data', data, ok });\n            let respData = await apiCall();\n            setResp(respData);\n        })();\n    }, []);\n\n    const RespStatus = () => (\n         (data?.detail || !ok)\n            ?   <div className='text-sdark-red text-center my-4'>\n                    <h3>{`Error` + (data?.detail ? `: ${data.detail}` : '')}</h3>\n                </div>\n\n            :   <div className='text-center mt-4'>\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>\n                    {\n                        loadingMessage &&\n                            <div className=\"mt-2\">\n                                {loadingMessage}\n                            </div>\n                    }\n                </div>\n    );\n    \n    let Component = component;\n\n    const PageContent = () => (\n        data && (!data.detail && ok)\n            ? <Component data={data}/>\n            : <RespStatus/>\n    );\n \n    return  <PageContent/>;\n}\n\nexport default ApiRender;\n","import { Link } from \"react-router-dom\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport api from \"../api/backend\";\nimport ApiRender from \"../api/render\";\nimport { Category, SearchResults } from \"../types\";\nimport { CategoryList } from \"../components/snippets\";\nimport \"../scss/sidebar.scss\";\n\nconst Sidebar = () => {\n    return (\n        <>\n            <div className=\"py-2\"></div>\n            <Nav\n                className=\"col d-block bg-transparent sidebar\"\n                activeKey=\"/home\"\n                onSelect={(selectedKey) => alert(`selected ${selectedKey}`)}\n            >\n                <div className=\"sidebar-sticky\"></div>\n                {Array(4)\n                    .fill(0)\n                    .map((_, index) => (\n                        <Nav.Item className=\"rounded-pill mb-3 sdark-fg text-light\">\n                            <Nav.Link eventKey={`link-${index}`}>Link {index}</Nav.Link>\n                        </Nav.Item>\n                    ))}\n            </Nav>\n        </>\n    );\n};\n\nexport const PopularCategoriesSidebar = () => {\n    return (\n        <ApiRender\n            key=\"popular-categories\"\n            apiCall={() => api.getPopularCategories()}\n            component={({ data }: { data: SearchResults<Category> }) => (\n                <>\n                    <Row className=\"p-2\">\n                        <Col className=\"rounded sdark-fg py-3\">\n                            <Row>\n                                <Col>\n                                    <h4 className=\"mb-4\">Popular Categories</h4>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <CategoryList categories={data.results} />\n                            </Row>\n                        </Col>\n                    </Row>\n                    <Row className=\"p-2\">\n                        <Col className=\"rounded sdark-fg py-3\">\n                            <h4 className=\"mb-4\">Links</h4>\n                            {[\n                                [\"One\", \"Two\"],\n                                [\"Three\", \"Four\"],\n                            ].map((row) => (\n                                <Row>\n                                    {row.map((label) => (\n                                        <Col>\n                                            <Link to=\"/\">{label}</Link>\n                                        </Col>\n                                    ))}\n                                </Row>\n                            ))}\n                        </Col>\n                    </Row>\n                </>\n            )}\n        />\n    );\n};\n","import { ReactNode } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport Pagination from \"./pagination\";\nimport CardInfo from \"./cardinfo\";\n\nimport { BingoCard } from \"../types\";\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { Header } from \"../components/snippets\";\nimport { useAuth } from \"../auth\";\nimport { PopularCategoriesSidebar } from \"../components/sidebar\";\n\ninterface CardListProps {\n    query?: object;\n    key: string;\n    home?: boolean;\n}\n\nconst CardList = ({ home, query = {}, key }: CardListProps) => {\n    const { user } = useAuth();\n    const location = useLocation();\n    const apiCall = home && user ? api.getHomeCards : api.getCardList;\n\n    return <ApiRender apiCall={() => apiCall(location, query)} component={CardLayout} key={key} />;\n};\n\ninterface CardResults {\n    count: number;\n    page_size: number;\n    results: BingoCard[];\n}\n\nconst CardLayout = ({ data }: { data: CardResults }) => {\n    const PaginationThing = ({ header }: { header?: boolean }) => (\n        <div className=\"p-2\">\n            <Pagination itemCount={data.count} pageSize={data.page_size} label=\"cards\" top={header} />\n        </div>\n    );\n\n    //  row-cols-lg-2\n    return data.count === 0 ? (\n        <Row>\n            <Col className=\"p-2\">\n                <div className=\"rounded p-4 sdark-fg text-center\">\n                    <h3>No results found.</h3>\n                </div>\n            </Col>\n        </Row>\n    ) : (\n        <>\n            <PaginationThing header />\n            <Row className=\"row-cols-1\">\n                {data.results.map((card) => (\n                    <Col className=\"p-2\">\n                        <CardInfo card={card} link />\n                    </Col>\n                ))}\n            </Row>\n            <PaginationThing />\n        </>\n    );\n};\n\nexport default CardList;\n\ninterface CardListSidebarProps {\n    header?: ReactNode;\n    query?: object;\n    home?: boolean;\n    infoCol?: ReactNode;\n    sidebarCol?: ReactNode;\n}\n\nexport const CardListSidebar = ({ header, query, home, infoCol, sidebarCol }: CardListSidebarProps) => {\n    return (\n        <>\n            {header}\n\n            <div className=\"py-2\">\n                <Container>\n                    <Row>\n                        <Col xs={12} lg={8}>\n                            {infoCol}\n                            <CardList query={query} home={home} key={`${Date.now()}`} />\n                        </Col>\n                        <Col xs={4} className=\"d-none d-lg-block\">\n                            {sidebarCol}\n                            <PopularCategoriesSidebar />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </>\n    );\n};\n","import { Link, useParams } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { BingoCard, Category } from \"../types\";\nimport { CardListSidebar } from \"../components/cardlist\";\nimport { Header, parseDate } from \"../components/snippets\";\nimport debugLog from \"../debug\";\n\nconst HomePageView = () => {\n    return (\n        <>\n            <Helmet>\n                <title>Home</title>\n            </Helmet>\n            <CardListSidebar home header={<></>} />\n        </>\n    );\n};\n\nexport default HomePageView;\n","import { Link, useParams, useLocation, useHistory } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { BingoCard, Category } from \"../types\";\nimport CardList, { CardListSidebar } from \"../components/cardlist\";\nimport {\n    CategoryList,\n    centeredItem,\n    headerItem,\n    SubscribeButton,\n    parseDate,\n    HashtagButton,\n} from \"../components/snippets\";\n\nconst CategoryView = () => {\n    const { categoryName }: { categoryName: string } = useParams();\n\n    return <ApiRender apiCall={() => api.getCategory(categoryName)} component={CategoryHeader} key={categoryName} />;\n};\n\n//const bannerImg =\n//    \"https://yt3.ggpht.com/Cxw4AarF_wX_PqgBJ-BsK6C_toAsxVAyGnsHJFssO9D7B3H2LS4xq1a7p0VSV-GstyLxPEOR5g=w1707-fcrop64=1,00005a57ffffa5a8-k-c0xffffffff-no-nd-rj\";\n//const iconImg = \"https://yt3.ggpht.com/ytc/AKedOLQFVN7wLaJFbdPU56qOkNlbkrMneYpTmGpneRig=s88-c-k-c0x00ffffff-no-rj-mo\";\n//const iconImg = \"https://i.ytimg.com/vi/MPV2METPeJU/maxresdefault.jpg\";\n\n//const subCount = (num: number) => `${num} Subscriber${num === 1 ? \"\" : \"s\"}`;\n\nconst CategoryHeader = ({ data }: { data: Category }) => {\n    const searchParams = new URLSearchParams(useLocation().search);\n    const history = useHistory();\n    const hashtag = searchParams.get(\"hashtag\");\n    const hashtagParams = hashtag ? { hashtag: encodeURIComponent(hashtag) } : {};\n\n    const Header = () => (\n        <>\n            <div\n                className=\"banner\"\n                style={{\n                    backgroundImage: `url(\"${data.banner_url}\")`,\n                }}\n            ></div>\n\n            <Navbar className=\"sdark-fg p-3\" variant=\"dark\">\n                <Container>\n                    <Row>\n                        {/* Column with category icon and buttons */}\n                        <Col xs={12}>\n                            <Nav>\n                                <Nav.Item>\n                                    <div\n                                        className=\"rounded-circle p-2 sdark-fg\"\n                                        style={{\n                                            position: \"absolute\",\n                                            bottom: \"-10px\",\n                                            width: \"100px\",\n                                            height: \"100px\",\n                                        }}\n                                    >\n                                        <img\n                                            src={data.icon_url}\n                                            alt=\"\"\n                                            className=\"rounded-circle img-fluid w-100 h-100\"\n                                        />\n                                    </div>\n                                </Nav.Item>\n                                <Nav.Item style={{ marginLeft: \"120px\" }}></Nav.Item>\n                                <Nav.Item className=\"pe-4 d-none d-lg-block\">\n                                    <Col className=\"p-0\">\n                                        <h2 className=\"m-0\">{data.name}</h2>\n                                        {/*\n                                        <div>{subCount(data.subscribers)}</div>\n                                        */}\n                                    </Col>\n                                </Nav.Item>\n                                <Nav.Item className=\"pe-2\">\n                                    <SubscribeButton\n                                        subbed={data.is_subscribed}\n                                        apiCall={() => api.createSubscription({ id: data.id })}\n                                    />\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Button\n                                        variant=\"warning\"\n                                        onClick={() => history.push(`/categories/${data.name}/create/`)}\n                                        className=\"text-white rounded-pill\"\n                                    >\n                                        New\n                                    </Button>\n                                </Nav.Item>\n                                {hashtag && (\n                                    <Nav.Item className=\"ps-2\">\n                                        <Button\n                                            onClick={() => history.push(`/categories/${data.name}/`)}\n                                            variant=\"primary\"\n                                            className=\"text-white rounded-pill\"\n                                        >\n                                            #{hashtag}\n                                            <FaIcon icon={faTimes} className=\"ms-3\" />\n                                        </Button>\n                                    </Nav.Item>\n                                )}\n                            </Nav>\n                        </Col>\n                        {/* Info/mobile-collapse column */}\n                        <Col xs={12}>\n                            <Nav className=\"d-lg-none\">\n                                <Nav.Item className={`mt-3 ${data.name.length > 14 ? \"\" : \"mx-2\"}`}>\n                                    <Col className=\"p-0\">\n                                        {data.name.length > 14 ? (\n                                            <h3 className=\"m-0\">{data.name}</h3>\n                                        ) : (\n                                            <h2 className=\"m-0\">{data.name}</h2>\n                                        )}\n                                        {/*\n                                        <div>{subCount(data.subscribers)}</div>\n                                        */}\n                                    </Col>\n                                </Nav.Item>\n                                {/*\n                                <NavItem>\n                                    <SubscribeButton\n                                        subbed={data.subscribed}\n                                        apiCall={() => api.createSubscription({ category: { id: data.id } })}\n                                    />\n                                </NavItem>\n                                */}\n                            </Nav>\n                            {/*\n                            <p className=\"m-0 mx-2 mt-4\">\n                                Elit sit impedit velit temporibus eligendi. Distinctio non repellat asperiores?\n                            </p>\n                            */}\n                        </Col>\n                    </Row>\n                </Container>\n            </Navbar>\n        </>\n    );\n\n    const Sidebar = () => (\n        <>\n            <Row className=\"p-2\">\n                <Col className=\"p-3 sdark-fg rounded\">\n                    <div className=\"text-center\">\n                        <h4 className=\"mb-4\">About {data.name}</h4>\n                    </div>\n                    {/*\n                    <p className=\"mb-3\">{data.subscriber_count} Subscribers</p>\n                    <p className=\"mb-3\">Created on {parseDate(data.created_at)}</p>\n                */}\n                    <p className=\"mb-4\">{data.description}</p>\n                    <Row>\n                        <Col>\n                            <b>Subscribers</b>\n                            <p>{data.subscriber_count}</p>\n                        </Col>\n                        <Col>\n                            <b>Created At</b>\n                            <p>{parseDate(data.created_at)}</p>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n            <Row className=\"p-2\">\n                <Col className=\"p-3 sdark-fg rounded\">\n                    <h4 className=\"mb-4\">Popular hashtags</h4>\n                    {data.hashtags.map((hashtag) => (\n                        <HashtagButton category={data} name={hashtag.name} />\n                    ))}\n                </Col>\n            </Row>\n            <Row className=\"p-2\">\n                <Col className=\"p-3 sdark-fg rounded\">\n                    <Row>\n                        <Col>\n                            <h4 className=\"mb-4\">Related Categories</h4>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <CategoryList categories={data.related_categories} />\n                    </Row>\n                </Col>\n            </Row>\n        </>\n    );\n\n    return (\n        <>\n            <Helmet>\n                <title>{data.name}</title>\n            </Helmet>\n\n            <CardListSidebar\n                header={<Header />}\n                sidebarCol={<Sidebar />}\n                query={{ ...hashtagParams, category: data.name }}\n            />\n        </>\n    );\n};\nexport default CategoryView;\n\n/*\n*\nconst TopCardHeader = ({ data }: { data: BingoCard }) => (\n    <>\n        <div className=\"my-2\">\n            <h1>Top Bingo Card</h1>\n        </div>\n        <Row className=\"row-cols-5 p-1\">\n            {Object.entries(data)\n                .filter(([key, _]) => key.startsWith(\"tile_\"))\n                .map(([_, tileText]) => (\n                    <Col className=\"p-1\">\n                        <div className={`${headerItem} ${centeredItem}`}>{tileText}</div>\n                    </Col>\n                ))}\n        </Row>\n    </>\n);\n\nconst NavItem = ({ children, ...rest }: { children: any }) => (\n    <Nav.Item {...rest} className=\"pe-3\">\n        <div className={`${centeredItem} h-100`}>{children}</div>\n    </Nav.Item>\n);\n\nconst dummyTitle = <h3 className=\"m-0\">ABCDEFGHIJKLMNOPQRST</h3>;\n\n        <InfoHeader\n            subject={`${data.name}`}\n            info={[\n                `created on ${parseDate(data.created_at)}`,\n                <>\n                    by <Link to={`/users/${data.author.id}/`}>{data.author.name}</Link>\n                </>,\n                <SubscribeButton\n                    subbed={data.subscribed}\n                    apiCall={() => api.createSubscription({ category: { id: data.id } })}\n                />,\n            ]}\n        />\n    *\n                        {[\n                            <div\n                                className=\"rounded-circle p-2 sdark-fg\"\n                                style={{\n                                    position: \"absolute\",\n                                    bottom: \"4px\",\n                                    width: \"100px\",\n                                    height: \"100px\",\n                                    marginLeft: \"50px\",\n                                    marginRight: \"50px\",\n                                }}\n                            >\n                                <img src={iconImg} alt=\"\" className=\"rounded-circle img-fluid w-100 h-100\" />\n                            </div>,\n\n                            <h2 className=\"m-0\">{data.name}</h2>,\n\n                            <SubscribeButton\n                                subbed={data.subscribed}\n                                apiCall={() => api.createSubscription({ category: { id: data.id } })}\n                            />,\n                        ].map((item) => (\n                            <Nav.Item className=\"pe-3\">\n                                <div className={`${centeredItem} h-100`}>{item}</div>\n                            </Nav.Item>\n                        ))}\n*/\n","import { useParams } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { User } from \"../types\";\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport { CardListSidebar } from \"../components/cardlist\";\nimport { CategoryList, parseDate } from \"../components/snippets\";\n\ninterface UserId {\n    userId: string;\n}\n\nconst UserView = () => {\n    const { userId } = useParams<UserId>();\n\n    return <ApiRender apiCall={() => api.getUser(userId)} component={UserHeader} key={userId} />;\n};\n\nconst UserHeader = ({ data }: { data: User }) => (\n    <>\n        <Helmet>\n            <title>overview of {data.name}</title>\n        </Helmet>\n\n        <CardListSidebar\n            query={{ user: data.id }}\n            infoCol={\n                <Row className=\"p-2\">\n                    <Col>\n                        <div className=\"text-center\">\n                            <h4 className=\"my-2\">cards created by {data.name}</h4>\n                        </div>\n                    </Col>\n                </Row>\n            }\n            sidebarCol={\n                <>\n                    <Row className=\"p-2\">\n                        <Col>\n                            <Row>\n                                <Col className=\"bg-primary p-3 rounded-top\" style={{ height: \"50px\" }}></Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"sdark-fg p-3 rounded-bottom\">\n                                    <div className=\"text-center\">\n                                        <h3 className=\"mb-4\">{data.name}</h3>\n                                    </div>\n                                    <Row>\n                                        <Col>\n                                            <b>Score</b>\n                                            <p className={data.score >= 0 ? \"text-sdark-orange\" : \"text-sdark-violet\"}>\n                                                <div className=\"me-3\">\n                                                    <FaIcon icon={data.score >= 0 ? faArrowUp : faArrowDown} />{\" \"}\n                                                    {data.score}\n                                                </div>\n                                            </p>\n                                        </Col>\n                                        <Col>\n                                            <b>Created At</b>\n                                            <p>{parseDate(data.created_at)}</p>\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col></Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    {data.categories_created.length > 0 && (\n                        <Row className=\"p-2\">\n                            <Col className=\"rounded sdark-fg py-3\">\n                                <h4 className=\"mb-4\">Categories Created</h4>\n                                <Row>\n                                    <CategoryList categories={data.categories_created} />\n                                </Row>\n                            </Col>\n                        </Row>\n                    )}\n                </>\n            }\n        />\n    </>\n);\n\nexport default UserView;\n","import Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuestion, faHandPointDown, faHandPointUp, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\nexport type AppNavBarButtons = Array<[IconDefinition, string, () => void | undefined]>;\n\ninterface AppNavBarProps {\n  id?: string;\n  spacer?: boolean;\n  buttons?: AppNavBarButtons;\n}\n\nconst scrollToY = (y: number) => window.scrollTo({ top: y, behavior: \"smooth\" });\nconst scrollToTop = () => scrollToY(0);\nconst scrollToBottom = () => scrollToY(document.body.scrollHeight);\n\nconst NavBarUnit = ({ spacer, buttons }: AppNavBarProps) =>  {\n  const navItem = (\n    icon: IconDefinition,\n    text: string,\n    onclick?: () => void,\n  ) => (\n    <Nav.Item onClick={onclick}>\n      <Nav.Link>\n        <FontAwesomeIcon className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'} icon={icon} />\n        <br/>\n        <small className={spacer ? 'text-sdark-spacer' : 'text-sdark-fg'}>{text}</small>\n      </Nav.Link>\n    </Nav.Item>\n  )\n\n  return (\n    <Navbar\n      fixed={spacer ? undefined : 'bottom'}\n      className={spacer ? 'sdark-spacer py-0' : 'sdark-fg shadow py-1'}\n    >\n      <Container>\n        <Nav fill className='w-100'>\n          {\n            spacer\n              ?  navItem(faQuestion, 'Bottom of page')\n              : [\n                  navItem(faHandPointDown, 'Bottom', scrollToBottom),\n                  navItem(faHandPointUp, 'Top', scrollToTop),\n                ]\n          }\n          {\n            buttons?.length && buttons.map(things => navItem(...things))\n          }\n        </Nav>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport const AppNavBar = (props: AppNavBarProps) => (\n  <div id=\"navbars\" className='d-md-none'>\n    <NavBarUnit spacer/>\n    <NavBarUnit {...props}/>\n  </div>\n);\n","import { useState, useRef, ReactElement } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes, faExpandAlt, faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { AppNavBar, AppNavBarButtons } from \"../components/navbar\";\nimport CardInfo from \"../components/cardinfo\";\nimport { edgePadding } from \"../components/snippets\";\nimport { BingoTile, BingoCard } from \"../types\";\nimport ApiRender from \"../api/render\";\nimport api from \"../api/backend\";\nimport debugLog from \"../debug\";\n\n//=============================//\n// bingo card solution checker //\n//=============================//\n\nconst solutionIndexes = (() => {\n    let edge = Array(5)\n        .fill(0)\n        .map((_, i) => i);\n    let vert = edge.map((n) =>\n        Array(5)\n            .fill(0)\n            .map((_, i) => i * 5 + n)\n    );\n    let horiz = edge.map((n) =>\n        Array(5)\n            .fill(0)\n            .map((_, i) => i + 5 * n)\n    );\n    let diag1 = Array(5)\n        .fill(0)\n        .map((_, i) => i * 4 + 4);\n    let diag2 = Array(5)\n        .fill(0)\n        .map((_, i) => i * 6);\n    return [...vert, ...horiz, diag1, diag2];\n})();\n\ntype SolutionArray = BingoTile[];\n\nconst checkForBingo = (card: BingoCard): SolutionArray | undefined => {\n    if (solutionIndexes.some((line) => line.every((index) => card.tiles[index].clicked))) {\n        var solution = solutionIndexes.filter((line) => line.every((index) => card.tiles[index].clicked))[0];\n        return solution.map((index) => card.tiles[index]);\n    }\n};\n\n//==================//\n// cardview methods //\n//==================//\n\ntype CardSetter = (card: BingoCard) => void;\ntype SolutionSetter = (solution: SolutionArray) => void;\n\nconst tileHover = (tile: BingoTile, state: boolean, card: BingoCard, setCard: CardSetter) => {\n    if (!navigator.maxTouchPoints) {\n        const tiles = card.tiles;\n        const index = tiles.indexOf(tile);\n        tiles[index].hovered = state;\n        setCard({ ...card, tiles: tiles });\n    }\n};\n\nconst tileClick = (tile: BingoTile, card: BingoCard, setCard: CardSetter, setSolution: SolutionSetter) => {\n    const tiles = card.tiles;\n    const index = tiles.indexOf(tile);\n    tiles[index].clicked = !tiles[index].clicked;\n    setCard({ ...card, tiles: tiles });\n\n    var newSolution = checkForBingo(card);\n    if (newSolution) setSolution(newSolution);\n};\n\nconst resetBingo = (card: BingoCard | null, setCard: CardSetter, setSolution: SolutionSetter) => {\n    if (card) {\n        const tiles = card.tiles.map((tile) => {\n            tile.hovered = false;\n            tile.clicked = false;\n            return tile;\n        });\n        tiles[12].clicked = true;\n        setCard({ ...card, tiles: tiles });\n        setSolution([]);\n\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n};\n\nconst colorTheTile = (tile: BingoTile) => {\n    if (tile.clicked) return clickedColor;\n    else if (tile.hovered) return hoverColor;\n    else return \"sdark-fg\";\n};\n\n//====================//\n// cardview variables //\n//====================//\n\nconst clickedColor = \"bg-sdark-green text-white\";\nconst hoverColor = \"bg-sdark-magenta text-white\";\n\n//====================//\n// cardview component //\n//====================//\n\ninterface CardLayoutProps {\n    passedCard: BingoCard;\n    cardInfo: ReactElement;\n}\n\nconst CardLayout = ({ passedCard, cardInfo }: CardLayoutProps) => {\n    const [card, setCard] = useState(() => {\n        /*\n    let tileFields = Object.entries(passedCard).filter(([field, _]) =>\n      field.startsWith(\"tile_\")\n    );\n    let tiles = tileFields.map(([_, text], index) => ({\n      text: text,\n      hovered: false,\n      clicked: false,\n      id: index + 1,\n    }));\n    tileFields.forEach(([field, _]) =>\n      Reflect.deleteProperty(passedCard, field)\n    );\n    */\n\n        let tiles = passedCard.tiles.map((tile) => ({\n            ...tile,\n            hovered: false,\n            clicked: false,\n        }));\n        tiles[12].clicked = true;\n        passedCard.tiles = tiles;\n        debugLog({ CARD: \"init card\" });\n        return passedCard;\n    });\n    const [tileSearchQuery, setTileSearchQuery] = useState(\"\");\n    const [solution, setSolution] = useState<SolutionArray>([]);\n    const [topToggled, setTopToggled] = useState(true);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const solved = Boolean(solution.length);\n\n    const changeSearch = (e: any) => setTileSearchQuery(e.target.value);\n    const resetSearch = () => {\n        setTileSearchQuery(\"\");\n        setTopToggled(true);\n    };\n    const showTop = () => setTopToggled(true);\n    const hideTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\",\n        });\n        setTopToggled(false);\n        inputRef.current && inputRef.current.focus();\n    };\n    const buttons: AppNavBarButtons = [[faSearch, \"Search\", hideTop]];\n    if (!topToggled) buttons.push([faExpandAlt, \"Expand\", showTop]);\n\n    const filteredTiles = card.tiles.filter((tile) => {\n        return tile.text.toLowerCase().includes(tileSearchQuery.toLowerCase());\n    });\n\n    debugLog({ CARD: \"render\", query: tileSearchQuery, solution, topToggled });\n    //`\\nLAYOUT:\\n\\n    card: ${card.name}\\n    query: ${tileSearchQuery}\\n    solution: ${solution}\\n    topToggled: ${topToggled}\\n`\n\n    return (\n        <>\n            <Helmet>\n                <title>{card.name}</title>\n            </Helmet>\n            <Row className=\"pt-2\">\n                <Col id=\"info-and-indicators\" xs={12} md={6} lg={5} className=\"px-2\">\n                    <div id=\"card-info\" className={\"pb-2 \" + (topToggled ? \"\" : \"d-none d-md-block\")}>\n                        <div className=\"mb-2\">{cardInfo}</div>\n                        <Col id=\"indicators\" className=\"text-center\">\n                            <Row className=\"row-cols-5\">\n                                {card.tiles.map((tile, index) => (\n                                    <Col className={`p-0 ${edgePadding[index]}`}>\n                                        <Col className={`py-2 rounded ${colorTheTile(tile)}`}>{index + 1}</Col>\n                                    </Col>\n                                ))}\n                            </Row>\n                        </Col>\n                    </div>\n                    <div id=\"search-bar\" className=\"pb-2\">\n                        {!topToggled && (\n                            <div className=\"d-md-none text-sdark-bg p-0 pb-1\">\n                                <small>Card info hidden. Click on the expand button to show them.</small>\n                            </div>\n                        )}\n                        <InputGroup>\n                            <Form.Control\n                                placeholder=\"Search bingo tiles\"\n                                type=\"string\"\n                                className=\"slight-bg\"\n                                value={tileSearchQuery}\n                                style={{ cursor: \"pointer\" }}\n                                onChange={changeSearch}\n                                onFocus={hideTop}\n                                ref={inputRef}\n                            />\n                            {tileSearchQuery && (\n                                <InputGroup.Text onClick={resetSearch} style={{ cursor: \"pointer\" }}>\n                                    {/*\n                                    <Button variant=\"danger\" className=\"bg-sdark-red\" onClick={resetSearch}>\n                                    </Button>\n                                    */}\n                                    <FontAwesomeIcon icon={faTimes} />\n                                </InputGroup.Text>\n                            )}\n                        </InputGroup>\n                    </div>\n                </Col>\n                <Col id=\"tiles\" xs={12} md={6} lg={7} className=\"px-2\">\n                    {tileSearchQuery && (\n                        <div className={\"text-sdark-bg text-center p-0 \" + (filteredTiles.length ? \"pb-3\" : \"\")}>\n                            {filteredTiles.length\n                                ? `${filteredTiles.length} result` + (filteredTiles.length > 1 ? \"s\" : \"\")\n                                : \"No results\"}\n                        </div>\n                    )}\n                    <Row className=\"row-cols-1 row-cols-md-1\">\n                        {filteredTiles.map((tile, index) => (\n                            <Col className={index === 0 ? \"pb-1\" : \"py-1\"}>\n                                <Col\n                                    style={{ cursor: \"pointer\" }}\n                                    className={`rounded h-100 py-2 ${colorTheTile(tile)}`}\n                                    onClick={() => tileClick(tile, card, setCard, setSolution)}\n                                    onMouseEnter={() => tileHover(tile, true, card, setCard)}\n                                    onMouseLeave={() => tileHover(tile, false, card, setCard)}\n                                >\n                                    <Row>\n                                        <Col\n                                            xs={2}\n                                            lg={1}\n                                            className={\n                                                \"border\" +\n                                                (tile.hovered || tile.clicked ? \"\" : \"-sdark\") +\n                                                \"-right\" +\n                                                \" text-center\"\n                                            }\n                                        >\n                                            {index + 1}\n                                        </Col>\n                                        <Col>{tile.text}</Col>\n                                    </Row>\n                                </Col>\n                            </Col>\n                        ))}\n                    </Row>\n                    <hr className=\"sdark-hr\" />\n                </Col>\n\n                <Modal\n                    show={solved}\n                    dialogAs={(props) => (\n                        <div className=\"modal-dialog modal-dialog-centered\">\n                            <div {...{ ...props, className: \"modal-content rounded sdark-bg\" }}></div>\n                        </div>\n                    )}\n                >\n                    <Modal.Header>You got Bingo!</Modal.Header>\n                    <Modal.Body>\n                        <div className=\"text-center mb-4 mt-3\">\n                            <h3>{card.name}</h3>\n                        </div>\n                        <Row className=\"row-cols-1 p-1\">\n                            {solution.map((tile, index) => (\n                                <Col className=\"p-1\">\n                                    <Col className=\"rounded h-100 p-2 sdark-fg\">\n                                        <Row>\n                                            <Col xs={2} md={1} className=\"border-sdark-right text-center\">\n                                                {index + 1}\n                                            </Col>\n                                            <Col>{tile.text}</Col>\n                                        </Row>\n                                    </Col>\n                                </Col>\n                            ))}\n                        </Row>\n                        <div className=\"text-center mt-4 mb-3\">\n                            Link:{\" \"}\n                            <a href={window.location.href} className=\"sdark-bg\">\n                                {window.location.href}\n                            </a>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={() => resetBingo(card, setCard, setSolution)}>\n                            Start Over\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Row>\n\n            <AppNavBar id=\"card-navbar\" buttons={buttons} />\n        </>\n    );\n};\n\ninterface CardIdParam {\n    cardId: string;\n}\n\nconst CardView = () => {\n    const { cardId }: CardIdParam = useParams();\n    return (\n        <ApiRender\n            key={cardId}\n            apiCall={() => api.getCard(cardId)}\n            loadingMessage={`Loading bingo card ${cardId}`}\n            component={({ data }) => <CardLayout passedCard={data} cardInfo={<CardInfo card={data} />} />}\n        />\n    );\n};\n/*\n    const loc = useLocation();\n    const card = \n        loc.state\n            ? (loc.state as { card?: BingoCard }).card\n            : null;\n\n    return (\n        <>\n            {\n                card\n                    ? <CardLayout\n                            passedCard={card}\n                            cardInfo={<CardInfo card={card}/>}\n                        />\n\n                    : <ApiRender\n                            apiCall={() => api.getCard(cardId)}\n                            loadingMessage={`Loading bingo card ${cardId}`}\n                            component={({ data }) => (\n                                <CardLayout\n                                    passedCard={data}\n                                    cardInfo={<CardInfo card={data}/>}\n                                />\n                            )}\n                        />\n            }\n        </>\n    );\n}\n*/\n\nexport default CardView;\n","import Spinner from 'react-bootstrap/Spinner';\nimport React from 'react';\n\ninterface LoadingProps {\n  message: string | React.ReactElement;\n}\n\nconst Loading = ({ message }: LoadingProps) => (\n  <div className='text-center'>\n    <Spinner animation=\"border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </Spinner>\n    <div className=\"mt-2\">\n      {\n        typeof message === 'string'\n          ? <h4>{message}</h4>\n          : message\n      }\n    </div>\n  </div>\n);\n\nexport default Loading;\n","import { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n\nimport * as Yup from \"yup\";\nimport { Formik, Form as FormikForm, Field, ErrorMessage, FormikHelpers } from \"formik\";\n\nimport { Link } from \"react-router-dom\";\n\nimport Loading from \"../components/loading\";\nimport { Header } from \"../components/snippets\";\nimport { useAuth } from \"../auth\";\n\nconst stringField = () => Yup.string().default(\"\").required(\"Required\");\n\nconst LoginSchema = Yup.object().shape({\n    username: stringField(),\n    password: stringField(),\n});\n\ninterface LoginState {\n    done: boolean;\n    ok: boolean;\n    valid: boolean;\n}\n\nconst LoginForm = () => {\n    const { user, login, logout } = useAuth();\n\n    const [{ done, valid, ok }, setLoginState] = useState<LoginState>({\n        valid: false,\n        done: false,\n        ok: true,\n    });\n\n    const handleSubmit = async (values: any, { resetForm }: FormikHelpers<any>) => {\n        setLoginState({ done: false, valid, ok });\n\n        login({\n            credentials: values,\n            callback({ data, ok }) {\n                setLoginState({ done: true, valid: data ? data.valid : false, ok });\n                resetForm();\n            },\n        });\n    };\n\n    const FormView = () => (\n        <>\n            <div className=\"text-center\">\n                <h1>Login</h1>\n                {done && !ok && valid === false && <div className=\"text-danger mt-4\">Invalid credentials</div>}\n            </div>\n            <div className=\"mt-4\">\n                <FormikForm noValidate>\n                    <Row>\n                        <Col>\n                            <Form.Label>Username</Form.Label>\n                        </Col>\n                        <Col className=\"w-100 text-end\">\n                            <ErrorMessage name=\"username\" component=\"label\" className=\"text-danger\" />\n                        </Col>\n                        <Col xs={12}>\n                            <Field name=\"username\" className=\"form-control\" />\n                        </Col>\n                    </Row>\n                    <Row className=\"mt-2 mb-3\">\n                        <Col>\n                            <Form.Label>Password</Form.Label>\n                        </Col>\n                        <Col className=\"w-100 text-end\">\n                            <ErrorMessage name=\"password\" component=\"label\" className=\"text-danger\" />\n                        </Col>\n                        <Col xs={12}>\n                            <Field name=\"password\" type=\"password\" className=\"form-control\" />\n                        </Col>\n                    </Row>\n                    <button className=\"btn btn-primary text-white\" type=\"submit\">\n                        Login\n                    </button>\n                    <Link to=\"/signup/\">\n                        <button className=\"btn btn-warning text-white ms-2\">Signup</button>\n                    </Link>\n                </FormikForm>\n            </div>\n        </>\n    );\n\n    return (\n        <Formik validationSchema={LoginSchema} initialValues={LoginSchema.default(\"\")} onSubmit={handleSubmit}>\n            {({ isSubmitting, setSubmitting }) =>\n                isSubmitting ? (\n                    <Loading message={\"Logging \" + (user ? \"out\" : \"in\") + \"...\"} />\n                ) : user ? (\n                    <Header card>\n                        <div className=\"text-center\">\n                            <h1>Logged in as {user.name}!</h1>\n                            <button\n                                className=\"btn btn-primary\"\n                                onClick={() => {\n                                    setSubmitting(true);\n                                    logout({\n                                        callback() {\n                                            setSubmitting(false);\n                                        },\n                                    });\n                                }}\n                            >\n                                Logout\n                            </button>\n                        </div>\n                    </Header>\n                ) : (\n                    <FormView />\n                )\n            }\n        </Formik>\n    );\n};\n\nconst LoginView = () => (\n    <div className=\"py-4\">\n        <Row>\n            <Col xs={3} className=\"d-none d-lg-block\"></Col>\n            <Col xs={12} lg={6}>\n                <LoginForm />\n            </Col>\n            <Col xs={3} className=\"d-none d-lg-block\"></Col>\n        </Row>\n    </div>\n);\n\nexport default LoginView;\n","import { useState } from \"react\";\nimport { FormikHelpers, Formik, Form as FormikForm, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n\nimport Loading from \"../components/loading\";\nimport api from \"../api/backend\";\n\nconst SignupView = () => (\n    <div className=\"py-4\">\n        <div className=\"row\">\n            <div className=\"col-3 d-none d-lg-block\"></div>\n            <div className=\"col-12 col-lg-6\">\n                <SignupForm />\n            </div>\n            <div className=\"col-3 d-none d-lg-block\"></div>\n        </div>\n    </div>\n);\n\nexport default SignupView;\n\nconst stringField = () => Yup.string().default(\"\").required(\"Required\");\nconst SignupSchema = Yup.object().shape({\n    username: stringField().min(2, \"Too Short!\").max(50, \"Too Long!\"),\n    password: stringField().min(10, \"Too Short!\"),\n    confirmPassword: stringField().when(\"password\", {\n        is: (val: string) => (val && val.length > 0 ? true : false),\n        then: Yup.string().oneOf([Yup.ref(\"password\")], \"Needs to match password\"),\n    }),\n    email: stringField().email(\"Invalid email\"),\n});\n\nconst signupFields: Array<[string, string, string]> = [\n    // label               , name             , type\n    [\"Username\", \"username\", \"text\"],\n    [\"Email\", \"email\", \"email\"],\n    [\"Password\", \"password\", \"password\"],\n    [\"Confirm Password\", \"confirmPassword\", \"password\"],\n];\n\ntype APIResult = string[];\ninterface APIError {\n    email?: APIResult;\n    password?: APIResult;\n    username?: APIResult;\n}\n\nconst SignupForm = () => {\n    const [createdSuccess, setCreatedSuccess] = useState(false);\n    const [submitDone, setDone] = useState(false);\n\n    const submitUser = async (values: any, { resetForm, setErrors }: FormikHelpers<any>) => {\n        setDone(false);\n        let { data, ok } = await api.createUser({\n            username: values.username,\n            password: values.password,\n            email: values.email,\n        });\n\n        if (data && !ok) {\n            //\n            // backend validator sends errors in arrays\n            // since formik error message can only show one string, I'm opting to only show the first error string\n            // prob have to add a way to view multiple errors at some point\n            //\n            setErrors(Object.fromEntries(Object.entries(data as APIError).map(([field, err]) => [field, err[0]])));\n        } else if (ok) {\n            resetForm();\n            setCreatedSuccess(true);\n        }\n        setDone(true);\n        return;\n    };\n\n    const SignupFormLayout = ({ isSubmitting }: { isSubmitting: boolean }) => (\n        <>\n            <div className=\"text-center\">\n                <h1>Signup</h1>\n            </div>\n            {!createdSuccess && submitDone && (\n                <div className=\"text-danger text-center py-2\">\n                    <p>There was something wrong.</p>\n                </div>\n            )}\n            <FormikForm>\n                <div className=\"mt-4 mb-3\">\n                    {signupFields.map(([fieldLabel, fieldName, fieldType]) => (\n                        <Row className=\"mb-2\">\n                            <Col>\n                                <Form.Label>{fieldLabel}</Form.Label>\n                            </Col>\n                            <Col className=\"w-100 text-end\">\n                                <ErrorMessage name={fieldName} component=\"label\" className=\"text-danger\" />\n                            </Col>\n                            <Col xs={12}>\n                                <Field name={fieldName} type={fieldType} className=\"form-control\" />\n                            </Col>\n                        </Row>\n                    ))}\n                </div>\n                <button className=\"btn btn-primary text-white\" type=\"submit\" disabled={isSubmitting}>\n                    Signup\n                </button>\n                <Link to=\"/login/\">\n                    <button className=\"btn btn-warning text-white ms-2\">Back to Login</button>\n                </Link>\n            </FormikForm>\n        </>\n    );\n\n    const SignupSuccess = () => (\n        <div className=\"text-center\">\n            <div className=\"mb-2\">\n                <h1>Account creation successful!</h1>\n            </div>\n            <Link to=\"/login/\">\n                <button className=\"btn btn-warning ms-2\">Back to Login</button>\n            </Link>\n        </div>\n    );\n\n    return (\n        <Formik\n            validateOnBlur={true}\n            validateOnChange={false}\n            validationSchema={SignupSchema}\n            initialValues={SignupSchema.getDefault()}\n            onSubmit={submitUser}\n        >\n            {({ isSubmitting }) =>\n                isSubmitting ? (\n                    <Loading message=\"Creating new account...\" />\n                ) : createdSuccess ? (\n                    <SignupSuccess />\n                ) : (\n                    <SignupFormLayout {...{ isSubmitting }} />\n                )\n            }\n        </Formik>\n    );\n};\n","import { useLocation } from 'react-router-dom';\nimport { Helmet } from \"react-helmet\";\n\nimport CardList from '../components/cardlist';\nimport { Header } from '../components/snippets';\nimport debugLog from '../debug';\n\n//const headerPadding = 'rounded text-center sdark-fg p-4';\n\nconst SearchView = () => {\n    const urlParams = new URLSearchParams(useLocation().search);\n    const searchQuery = urlParams.get('q') || '';\n    const cardQuery = { search: encodeURIComponent(searchQuery) };\n \n    debugLog({ SEARCHVIEW: 1, searchQuery });\n    return (\n        <>\n            <Helmet>\n                <title>Search</title>\n            </Helmet>\n            <Header card>\n                <h3>\n                    Search results for \"{searchQuery}\"\n                </h3>\n            </Header>\n            <CardList query={cardQuery} key={`${Date.now()}`}/>\n        </>\n    );\n}\n\nexport default SearchView;\n","import { createContext, useContext, forwardRef, useState, useRef, useReducer } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FieldProps, FormikHelpers, Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { edgePadding, Header } from \"../components/snippets\";\nimport Loading from \"../components/loading\";\nimport { BingoCard, SearchResults, Category } from \"../types\";\nimport api from \"../api/backend\";\nimport ApiRender from \"../api/render\";\nimport debugLog from \"../debug\";\n\n//const capitalize = (str: string) => str.charAt(0).toUpperCase() + str.slice(1);\n//const interleave = (arr: any, thing: any) => [].concat(...arr.map((n: any) => [n, thing])).slice(0, -1);\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => <div ref={ref}>{children}</div>);\n\ninterface FormHelperProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    values: { [x: string]: any };\n    card?: BingoCard;\n    category?: Category;\n    isSubmitting?: boolean;\n}\n\nconst FormHelperContext = createContext<FormHelperProps>({\n    setFieldValue: () => {},\n    values: {},\n});\n\nconst CategorySearchBar = () => {\n    // 1. State Handling\n    // 2. Sub-Elements\n    // 3. Main Element\n\n    // ============================================================================\n    // ========================= 1. State Handling ================================\n    // ============================================================================\n\n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown bc category create OR get\n    onToggle should toggle dropdown\n\n    */\n\n    type Action =\n        | { type: \"query\"; payload: string }\n        | { type: \"dropdown\"; payload: boolean }\n        | { type: \"menuSelect\"; payload: { query: string; errors: Array<string> } }\n        | { type: \"category\"; payload: Category[] }\n        | { type: \"load\"; payload: boolean };\n\n    type State = {\n        query: string;\n        errors: Array<string>;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        categories: Category[];\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ CATEGORYSEARCHBAR: \"input check\", query, queryRef });\n            if (query && query === queryRef.current) {\n                debugLog(\"searching for categories...\");\n                getCategories();\n            }\n        }, 500);\n    };\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ CATEGORYSEARCHBAR: \"reducer\", state, action });\n        switch (action.type) {\n            case \"query\":\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                    errors: action.payload.length > 0 ? state.errors : [],\n                };\n            case \"dropdown\":\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case \"category\":\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    categories: action.payload,\n                };\n            case \"menuSelect\":\n                let categoryValue = action.payload.errors.length > 0 ? \"\" : action.payload.query;\n                setFieldValue(\"category\", categoryValue);\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                    errors: action.payload.errors,\n                };\n            case \"load\":\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const { setFieldValue, values, card, category } = useContext(FormHelperContext);\n    const categoryName: string = values.category;\n    const initState: State = {\n        query: categoryName,\n        showDropdown: false,\n        loading: false,\n        disabled: Boolean(categoryName.length > 0),\n        errors: [],\n        categories: [],\n    };\n\n    const [{ disabled, errors, query, showDropdown, loading, categories }, dispatch] = useReducer(\n        stateReducer,\n        initState\n    );\n    const valid = errors.length === 0;\n    const showQueryButton = disabled && valid;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({\n        CATEGORYSEARCHBAR: \"states\",\n        query,\n        disabled,\n        errors,\n        categoryName,\n    });\n\n    const getCategories = async () => {\n        dispatch({ type: \"load\", payload: true });\n        let { data, ok } = await api.getTopThreeCategories(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: \"category\", payload: data });\n        } else {\n            dispatch({ type: \"load\", payload: false });\n        }\n    };\n\n    const handleSelect = (eventKey: string | null) => {\n        let errs: Array<string> = [];\n\n        switch (eventKey) {\n            case null:\n                break;\n            case \"QUERY!\":\n                try {\n                    categorySchema.validateSync(query);\n                } catch (err) {\n                    errs = err.errors;\n                }\n                dispatch({ type: \"menuSelect\", payload: { query, errors: errs } });\n                break;\n            default:\n                dispatch({\n                    type: \"menuSelect\",\n                    payload: { query: eventKey, errors: errs },\n                });\n        }\n    };\n\n    // ============================================================================\n    // ========================= 2. Sub-Elements ==================================\n    // ============================================================================\n\n    const LoadingIndicator = () => (\n        <>\n            {loading && (\n                <div className=\"input-group-append\">\n                    <span className=\"input-group-text\">\n                        <div className=\"ps-2\">\n                            <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </div>\n                    </span>\n                </div>\n            )}\n        </>\n    );\n\n    const ClearButton = () => (\n        <>\n            {!showQueryButton && query.length > 0 && (\n                <div\n                    className=\"input-group-append\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => dispatch({ type: \"query\", payload: \"\" })}\n                >\n                    <span className=\"input-group-text clear\">\n                        <FontAwesomeIcon icon={faTimes} />\n                    </span>\n                </div>\n            )}\n        </>\n    );\n\n    const QueryButton = () => (\n        <>\n            {showQueryButton && (\n                <div className=\"input-group-append\">\n                    <span className=\"input-group-text clear p-1\">\n                        <div className=\"p-2 rounded text-white bg-sdark-violet align-items-center justify-content-center\">\n                            <Row>\n                                <Col className={card || category ? \"\" : \"pe-2\"}>{query}</Col>\n                                {!card && !category && (\n                                    <Col className=\"ps-2\">\n                                        <div\n                                            style={{ cursor: \"pointer\" }}\n                                            onClick={() =>\n                                                dispatch({\n                                                    type: \"menuSelect\",\n                                                    payload: { query: \"\", errors: [] },\n                                                })\n                                            }\n                                        >\n                                            <small>\n                                                <FontAwesomeIcon icon={faTimes} />\n                                            </small>\n                                        </div>\n                                    </Col>\n                                )}\n                            </Row>\n                        </div>\n                    </span>\n                </div>\n            )}\n        </>\n    );\n\n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className=\"slight-bg\" disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className=\"border-slight-top\" />\n            {categories.length > 0 ? (\n                categories.map((category) => (\n                    <Dropdown.Item className=\"slight-bg\" eventKey={category.name}>\n                        {category.name}\n                    </Dropdown.Item>\n                ))\n            ) : (\n                <Dropdown.Item className=\"slight-bg\" eventKey=\"QUERY!\">\n                    Create new category: {query}\n                </Dropdown.Item>\n            )}\n        </>\n    );\n\n    const CategoryErrors = () => (\n        <>\n            {errors.length > 0 &&\n                query.length > 0 &&\n                errors.map((err) => (\n                    <div className=\"text-sdark-red\">\n                        <small>{err}</small>\n                    </div>\n                ))}\n        </>\n    );\n\n    const SuccessIndicator = () => (\n        <div className=\"input-group-prepend\">\n            <span className={`input-group-text ${disabled ? (valid ? \"success\" : \"error\") : \"\"}`}>Category</span>\n        </div>\n    );\n\n    // ============================================================================\n    // ========================= 3. Main Element ==================================\n    // ============================================================================\n\n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: \"dropdown\", payload: !showDropdown })}\n            onSelect={handleSelect}\n        >\n            <div className=\"input-group slight-bg rounded\">\n                <SuccessIndicator />\n                <QueryButton />\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? \"\" : \"Search\"}\n                    value={showQueryButton ? \"\" : query}\n                    onChange={(e) => dispatch({ type: \"query\", payload: e.target.value })}\n                />\n                <ClearButton />\n                <LoadingIndicator />\n            </div>\n\n            <div>\n                <CategoryErrors />\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id=\"create-category\" />\n            <Dropdown.Menu className=\"w-100 slight-bg mt-1 px-2\">\n                <DropdownItems />\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\ninterface FormRowProps {\n    name: string;\n    label: string;\n    small?: boolean;\n    hidden?: boolean;\n    disabled?: boolean;\n}\n\nconst FormRowIndicator = ({ name, label }: FormRowProps) => (\n    <Field name={name}>\n        {({ meta }: FieldProps) =>\n            !meta.touched ? (\n                <div className=\"rounded text-center py-2 sdark-fg\">{label}</div>\n            ) : (\n                <div className={`rounded text-center py-2 text-white bg-sdark-${meta.error ? \"red\" : \"green\"}`}>\n                    {label}\n                </div>\n            )\n        }\n    </Field>\n);\n\nconst FormRow = ({ name, label, disabled }: FormRowProps) => (\n    <Field name={name}>\n        {({ field, meta }: FieldProps) => {\n            const prependColor = meta.touched ? (meta.error ? \"error\" : \"success\") : disabled ? \"disabled\" : \"\";\n\n            return (\n                <>\n                    <div className=\"input-group\">\n                        <div className=\"input-group-prepend\">\n                            <span className={`input-group-text ${prependColor}`}>{label}</span>\n                        </div>\n                        <input\n                            {...field}\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Empty\"\n                            disabled={disabled}\n                        />\n                    </div>\n                    {meta.touched && meta.error && (\n                        <div className=\"text-sdark-red\">\n                            <small>{meta.error}</small>\n                        </div>\n                    )}\n                </>\n            );\n        }}\n    </Field>\n);\nconst preventEnter = (keyEvent: React.KeyboardEvent<HTMLFormElement>) => {\n    if (keyEvent.key === \"Enter\") {\n        keyEvent.preventDefault();\n    }\n};\n\nconst CardForm = () => {\n    const { card, category, isSubmitting } = useContext(FormHelperContext);\n    const headerText = card\n        ? `Editing \"${card.name}\"`\n        : `Create New Bingo Card ${category ? `In ${category.name}` : \"\"}`;\n\n    return (\n        <Form onKeyDown={preventEnter}>\n            <Header card>\n                <h2>{headerText}</h2>\n            </Header>\n            <Row>\n                <Col xs={12} lg={5}>\n                    <div className=\"p-2\">\n                        <Col className=\"pb-2 px-0\">\n                            <Row className=\"pb-2 px-0\">\n                                <FormRow name=\"name\" label=\"Name\" disabled={Boolean(card)} />\n                            </Row>\n                            <Row>\n                                <Col className=\"w-100 px-0\">\n                                    <CategorySearchBar />\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Row className=\"row-cols-5 pt-2\">\n                            {tileFieldNames.map((field, index) => (\n                                <div className={edgePadding[index]}>\n                                    <FormRowIndicator name={field} label={`${index + 1}`} />\n                                </div>\n                            ))}\n                        </Row>\n                    </div>\n                </Col>\n\n                <Col xs={12} lg={7} className=\"p-0\">\n                    <div className=\"p-2\">\n                        {tileFieldNames.map((field, index) => (\n                            <div className={index !== 24 ? \"pb-2\" : \"\"}>\n                                <FormRow name={field} label={`Tile ${index + 1}`} />\n                            </div>\n                        ))}\n                    </div>\n                </Col>\n\n                <Col xs={12}></Col>\n            </Row>\n            <button className=\"btn btn-primary\" type=\"submit\" disabled={isSubmitting}>\n                Submit\n            </button>\n        </Form>\n    );\n};\n\n/*\nconst formFields = [...tileFields, \"name\", \"category\"];\n\nconst cardSchemaShape = Object.fromEntries(\n    ([] as any[]).concat(\n        tileFields.map((field) => [field, stringField(200)]),\n        Object.entries({\n            name: stringField(50),\n            category: categorySchema,\n        })\n    )\n);\n\nconst cardSchema = Yup.object().shape(cardSchemaShape);\n*/\n\nconst tileFieldNames = Array(25)\n    .fill(null)\n    .map((_, index) => `tile_${index + 1}`);\n\nconst stringField = (max: number) =>\n    Yup.string().default(\"\").required(\"Cannot be blank.\").max(max, `Cannot be longer than ${max} characters.`);\n\nconst categorySchema = stringField(20).matches(/^\\w+$/, {\n    message: \"Can only contain letters, numbers and underscores.\",\n    excludeEmptyString: true,\n});\n\ntype ObjectArray<T = any> = { [s: string]: T };\n\nconst CardCreateEditLayout = ({ card, category }: { card?: BingoCard; category?: Category }) => {\n    const [success, setSuccess] = useState(false);\n    const history = useHistory();\n\n    // create placeholder tile objects if form is in \"create mode\"\n    const tiles = card\n        ? card.tiles\n        : Array(25)\n              .fill(0)\n              .map((_, index) => ({ id: index, text: \"\" }));\n\n    // map tile field name to tile objects\n    const tileMapping = Object.fromEntries(tiles.map((tile, index) => [tileFieldNames[index], tile]));\n\n    // create tile fields with field names in tileMapping\n    const tileFields = Object.fromEntries(Object.entries(tileMapping).map(([label, _]) => [label, stringField(200)]));\n\n    const cardSchema = Yup.object().shape({\n        ...tileFields,\n        name: stringField(50),\n        category: categorySchema,\n    });\n\n    const defaultValues = card\n        ? {\n              ...Object.fromEntries(Object.entries(tileMapping).map(([label, tile]) => [label, tile.text])),\n              name: card.name,\n              category: card.category.name,\n          }\n        : cardSchema.getDefault();\n\n    if (category) defaultValues.category = category.name;\n\n    debugLog(defaultValues);\n\n    const submitCard = async (values: any, { setErrors, resetForm }: FormikHelpers<any>) => {\n        // map field name to form value\n        let tileValues = Object.entries(tileMapping).map(([label, _]) => [label, (values as ObjectArray)[label]]);\n\n        let formValues: any = {\n            // get previously defined tiles and create new tile list with form values\n            tiles: tileValues.map(([label, text]) => ({ ...(tileMapping as ObjectArray)[label], text })),\n            name: values.name,\n            category: { name: values.category },\n        };\n        formValues.tiles.forEach((tile: any) => debugLog(tile));\n\n        let apiCall = card ? (v: any) => api.editCard(card.id, v) : (v: any) => api.createCard(v);\n\n        let { data, ok } = await apiCall(formValues);\n\n        if (!ok && data) {\n            setErrors(\n                Object.fromEntries(Object.entries(data as ObjectArray<string[]>).map(([field, err]) => [field, err[0]]))\n            );\n        } else if (ok && !card) {\n            resetForm();\n        }\n\n        debugLog({ CARDCREATE: \"submitted card\", data, ok });\n        setSuccess(ok);\n        return;\n    };\n\n    debugLog({ CARDCREATE: \"layout render\" });\n\n    const formVerb = card ? \"edit\" : \"creat\";\n    const formVerbCap = formVerb.charAt(0).toUpperCase() + formVerb.slice(1);\n\n    return success ? (\n        <Header card>\n            <h2 className=\"mb-4\">Successfully {formVerb}ed bingo card!</h2>\n            <button className=\"btn btn-primary\" onClick={() => history.go(-1)}>\n                Go Back\n            </button>\n        </Header>\n    ) : (\n        <div className=\"px-2\">\n            <Formik validationSchema={cardSchema} initialValues={defaultValues} onSubmit={submitCard}>\n                {({ isSubmitting, setFieldValue, values }) => (\n                    <FormHelperContext.Provider value={{ setFieldValue, values, card, category, isSubmitting }}>\n                        {isSubmitting ? <Loading message={`${formVerbCap}ing new bingo card...`} /> : <CardForm />}\n                    </FormHelperContext.Provider>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\ninterface CardCreateParams {\n    cardId?: string;\n    categoryName?: string;\n}\n\nconst CardCreateView = () => {\n    const { cardId, categoryName } = useParams<CardCreateParams>();\n\n    return cardId ? (\n        <ApiRender\n            apiCall={() => api.getCard(cardId)}\n            component={({ data }) => <CardCreateEditLayout card={data} />}\n            key={cardId}\n        />\n    ) : categoryName ? (\n        <ApiRender\n            apiCall={() => api.getCategory(categoryName)}\n            component={({ data }) => <CardCreateEditLayout category={data} />}\n            key={categoryName}\n        />\n    ) : (\n        <CardCreateEditLayout />\n    );\n};\n\nexport default CardCreateView;\n","import { ReactElement, useReducer, useRef, forwardRef } from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownItem from \"react-bootstrap/DropdownItem\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { ApiResponse } from \"../api/backend\";\nimport debugLog from \"../debug\";\n\nconst DropdownContainer = forwardRef(({ children }: any, ref: any) => <div ref={ref}>{children}</div>);\n\ninterface SearchBarProps {\n    label: string;\n    apiCall: (query: string) => Promise<ApiResponse<any[]>>;\n    //resultMapper: (result: any) => ReactElement<DropdownItem>;\n    resultMapper: (result: any[], query: string) => ReactElement<any>[];\n}\n\nconst SearchBar = ({ label, apiCall, resultMapper }: SearchBarProps) => {\n    // 1. StateHandling\n    // 2. SubElements\n    // 3. MainElement\n\n    // ============================================================================\n    // ========================= 1. StateHandling ================================\n    // ============================================================================\n\n    /*\n     \n    if query is blank, hide dropdown\n    when typing is done, show dropdown after api call\n    onToggle should obv toggle dropdown\n\n    */\n\n    type Action =\n        | { type: \"query\"; payload: string }\n        | { type: \"dropdown\"; payload: boolean }\n        | { type: \"menuSelect\"; payload: { query: string } }\n        | { type: \"results\"; payload: any[] }\n        | { type: \"load\"; payload: boolean };\n\n    type State = {\n        query: string;\n        showDropdown: boolean;\n        loading: boolean;\n        disabled: boolean;\n        searchResults: any[];\n    };\n\n    // has to be defined before the reducer in order to work for some reason\n    const checkIfInputStopped = () => {\n        // hack that checks if input has stopped for at least 500 ms\n        setTimeout(() => {\n            debugLog({ SEARCHBAR: \"input check\", label, query, queryRef });\n            if (query && query === queryRef.current) {\n                debugLog(\"searching for searchResults...\");\n                getResults();\n            }\n        }, 500);\n    };\n\n    const stateReducer = (state: State, action: Action): State => {\n        debugLog({ SEARCHBAR: \"reducer\", label, state, action });\n        switch (action.type) {\n            case \"query\":\n                checkIfInputStopped();\n                return {\n                    ...state,\n                    query: action.payload,\n                    showDropdown: false,\n                    disabled: state.disabled ? action.payload.length > 0 : false,\n                };\n            case \"dropdown\":\n                return {\n                    ...state,\n                    showDropdown: action.payload,\n                };\n            case \"results\":\n                return {\n                    ...state,\n                    showDropdown: true,\n                    loading: false,\n                    searchResults: action.payload,\n                };\n            case \"menuSelect\":\n                return {\n                    ...state,\n                    disabled: Boolean(action.payload.query.length > 0),\n                    query: action.payload.query,\n                };\n            case \"load\":\n                return {\n                    ...state,\n                    showDropdown: !action.payload,\n                    loading: action.payload,\n                };\n        }\n    };\n\n    const initState: State = {\n        query: \"\",\n        showDropdown: false,\n        loading: false,\n        disabled: false,\n        searchResults: [],\n    };\n\n    const [{ disabled, query, showDropdown, loading, searchResults }, dispatch] = useReducer(stateReducer, initState);\n    const showQueryButton = disabled;\n    const queryRef = useRef(query);\n    queryRef.current = query;\n\n    debugLog({ SEARCHBAR: \"states\", label, query, disabled });\n\n    const getResults = async () => {\n        dispatch({ type: \"load\", payload: true });\n        let { data, ok } = await apiCall(query);\n        if (ok && data) {\n            debugLog(data);\n            dispatch({ type: \"results\", payload: data });\n        } else {\n            dispatch({ type: \"load\", payload: false });\n        }\n    };\n\n    // ============================================================================\n    // ========================= 2. SubElements ==================================\n    // ============================================================================\n\n    const LoadingIndicator = () => (\n        <>\n            {loading && (\n                <div className=\"input-group-append\">\n                    <span className=\"input-group-text\">\n                        <div className=\"ps-2\">\n                            <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </div>\n                    </span>\n                </div>\n            )}\n        </>\n    );\n\n    const ClearButton = () => (\n        <>\n            {!showQueryButton && query.length > 0 && (\n                <div\n                    className=\"input-group-append\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => dispatch({ type: \"query\", payload: \"\" })}\n                >\n                    <span className=\"input-group-text clear\">\n                        <FontAwesomeIcon icon={faTimes} />\n                    </span>\n                </div>\n            )}\n        </>\n    );\n\n    /*\n    const DropdownItems = () => (\n        <>\n            <Dropdown.Item className='slight-bg' disabled>\n                Select one\n            </Dropdown.Item>\n            <Dropdown.Divider className='border-slight-top'/>\n            {searchResults.length > 0\n                ?\n                    searchResults.map(resultMapper)\n\n                :  \n                    <Dropdown.Item className='slight-bg' disabled>\n                        No results found\n                    </Dropdown.Item>}\n        </>\n    );\n     */\n\n    const DropdownItems = () => <>{resultMapper(searchResults, query)}</>;\n\n    const SearchBarLabel = () => (\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{label}</span>\n        </div>\n    );\n\n    // ============================================================================\n    // ========================= 3. MainElement ==================================\n    // ============================================================================\n\n    return (\n        <Dropdown\n            show={showDropdown}\n            onToggle={() => dispatch({ type: \"dropdown\", payload: !showDropdown })}\n            onSelect={() => dispatch({ type: \"query\", payload: \"\" })}\n        >\n            <div className=\"input-group slight-bg rounded\">\n                <SearchBarLabel />\n                <input\n                    disabled={showQueryButton}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={showQueryButton ? \"\" : \"Search\"}\n                    value={showQueryButton ? \"\" : query}\n                    onChange={(e) => dispatch({ type: \"query\", payload: e.target.value })}\n                />\n                <ClearButton />\n                <LoadingIndicator />\n            </div>\n\n            <Dropdown.Toggle as={DropdownContainer} id={`search-bar-${label}`} />\n            <Dropdown.Menu className=\"w-100 slight-bg mt-1 px-2\">\n                <DropdownItems />\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nexport default SearchBar;\n","import { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\n\nimport { Link, BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { FontAwesomeIcon as FaIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    IconDefinition,\n    faSignOutAlt,\n    faSignInAlt,\n    faPencilAlt,\n    faTh,\n    //faPen,\n    faCog,\n    faUserCircle,\n    faTimes,\n    faSearch,\n    faUser,\n} from \"@fortawesome/free-solid-svg-icons\";\n\n//import HomeView from \"./views/homeview\";\nimport HomePageView from \"./views/homepageview\";\nimport CategoryView from \"./views/categoryview\";\nimport UserView from \"./views/userview\";\nimport CardView from \"./views/cardview\";\nimport LoginView from \"./views/loginview\";\nimport SignupView from \"./views/signupview\";\nimport SearchView from \"./views/searchview\";\nimport CardCreateView from \"./views/cardcreateview\";\nimport api from \"./api/backend\";\n//import { UserAuthContext, LogoutContext } from \"./context\";\nimport { BingoCard } from \"./types\";\nimport SearchBar from \"./components/searchbar\";\nimport { useAuth, ProvideAuth } from \"./auth\";\n//import Sidebar from \"./components/sidebar\";\n\nimport \"./scss/main.scss\";\nimport \"./scss/sidebar.scss\";\n\nconst DropdownContainer = ({ children }: any, ref: any) => <div ref={ref}>{children}</div>;\n\nconst Icon = ({ icon }: { icon: any }) => (\n    <h4 className=\"m-0\">\n        <FaIcon icon={icon} />\n    </h4>\n);\n\nconst LoginDropdown = () => {\n    const { user, logout } = useAuth();\n    const [showDropdown, setDropdown] = useState(false);\n\n    const toggleDropdown = () => setDropdown(!showDropdown);\n\n    interface IconRowProps {\n        label: string;\n        icon: IconDefinition;\n    }\n\n    const IconRow = ({ label, icon }: IconRowProps) => (\n        <Row>\n            <Col xs={3}>\n                <FaIcon icon={icon} />\n            </Col>\n            <Col xs={9}>{label}</Col>\n        </Row>\n    );\n\n    const UserItems = () => (\n        <>\n            <Dropdown.Item className=\"slight-bg\" disabled>\n                {user ? <IconRow label={user.name} icon={faUser} /> : \"Not Logged In\"}\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            {user ? (\n                <>\n                    <Dropdown.Item\n                        as={Link}\n                        to={{\n                            pathname: `/users/${user.id}/`,\n                            state: { userId: user.id },\n                        }}\n                    >\n                        <IconRow label=\"Profile\" icon={faCog} />\n                    </Dropdown.Item>\n\n                    <Dropdown.Item onClick={() => logout({})}>\n                        <IconRow label=\"Logout\" icon={faSignOutAlt} />\n                    </Dropdown.Item>\n                </>\n            ) : (\n                <Dropdown.Item className=\"slight-bg\" as={Link} to=\"/login/\">\n                    <IconRow label=\"Login\" icon={faSignInAlt} />\n                </Dropdown.Item>\n            )}\n        </>\n    );\n\n    return (\n        <Dropdown show={showDropdown} onToggle={toggleDropdown}>\n            <div onClick={toggleDropdown} style={{ cursor: \"pointer\" }} className=\"hover-white\">\n                <Icon icon={faUserCircle} />\n            </div>\n            <Dropdown.Toggle as={DropdownContainer} id=\"login-dropdown\" />\n            <Dropdown.Menu align=\"end\" className=\"slight-bg\">\n                <UserItems />\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n};\n\nconst TopNavBar = () => {\n    const [showSearch, setSearch] = useState(false);\n    //const { user } = useAuth();\n\n    const UserItems = () => (\n        <>\n            {/*\n            {user && (\n                <Nav.Item className=\"pr-3\">\n                    <Nav.Link as={Link} to=\"/create/card/\">\n                        <Icon icon={faPen} />\n                    </Nav.Link>\n                </Nav.Item>\n            )}\n            */}\n            <Nav.Item>\n                <LoginDropdown />\n            </Nav.Item>\n        </>\n    );\n\n    const searchbar = (\n        <SearchBar\n            label=\"Search\"\n            apiCall={(query) => api.getTopThreeCards(query)}\n            resultMapper={(result: BingoCard[], query: string) =>\n                result.length > 0\n                    ? [\n                          ...result.map((card) => (\n                              <Dropdown.Item as={Link} to={`/cards/${card.id}/`}>\n                                  <FaIcon icon={faTh} /> <FaIcon icon={faPencilAlt} /> {card.name}\n                              </Dropdown.Item>\n                          )),\n\n                          <Dropdown.Item as={Link} to={`/search/?q=${query}`}>\n                              <FaIcon icon={faSearch} /> Search bingo cards for \"{query}\"\n                          </Dropdown.Item>,\n                      ]\n                    : [\n                          <Dropdown.Item className=\"slight-bg\" disabled>\n                              No results found\n                          </Dropdown.Item>,\n                      ]\n            }\n        />\n    );\n\n    return (\n        <>\n            <Navbar id=\"desktop-topnav\" className=\"sdark-fg d-none d-lg-block\" variant=\"dark\">\n                <Container>\n                    <Col xs={3}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/\">\n                                    BingoMemes\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <div className=\"align-items-center justify-content-center\">{searchbar}</div>\n                    </Col>\n                    <Col xs={3}>\n                        <Nav className=\"align-items-center justify-content-end\">\n                            <UserItems />\n                        </Nav>\n                    </Col>\n                </Container>\n            </Navbar>\n\n            <Navbar id=\"mobile-topnav\" className=\"sdark-fg d-lg-none\" variant=\"dark\">\n                <Container id=\"topnav-buttons\" className={\"w-100 \" + (!showSearch ? \"\" : \"d-none\")}>\n                    <Col xs={6}>\n                        <Nav>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/\">\n                                    BingoMemes\n                                </Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <Nav className=\"align-items-center justify-content-end\">\n                            <Nav.Item onClick={() => setSearch(true)} className=\"pe-3\">\n                                <Nav.Link>\n                                    <Icon icon={faSearch} />\n                                </Nav.Link>\n                            </Nav.Item>\n                            <UserItems />\n                        </Nav>\n                    </Col>\n                </Container>\n                <Container id=\"topnav-search\" className={\"py-1 \" + (showSearch ? \"\" : \"d-none\")}>\n                    <Col xs={1} className=\"px-2\">\n                        <div onClick={() => setSearch(false)} style={{ cursor: \"pointer\" }}>\n                            <Icon icon={faTimes} />\n                        </div>\n                    </Col>\n                    <Col xs={11} className=\"px-2\">\n                        {searchbar}\n                    </Col>\n                </Container>\n            </Navbar>\n        </>\n    );\n};\n\nconst App = () => {\n    const containerRoutes: { [s: string]: React.FC } = {\n        \"/categories/:categoryName/create/\": CardCreateView,\n        \"/cards/:cardId/edit/\": CardCreateView,\n        \"/signup/\": SignupView,\n        \"/login/\": LoginView,\n        \"/cards/:cardId/\": CardView,\n    };\n\n    return (\n        <div className=\"sdark-bg\">\n            <TopNavBar />\n            <Switch>\n                {/* CARD LIST ROUTES; DOESN'T NEED CONTAINER */}\n                <Route exact path=\"/categories/:categoryName/\">\n                    <CategoryView />\n                </Route>\n                <Route exact path=\"/users/:userId/\">\n                    <UserView />\n                </Route>\n                <Route exact path=\"/search/\">\n                    <SearchView />\n                </Route>\n                <Route exact path=\"/profile/\">\n                    <UserView />\n                </Route>\n                <Route exact path=\"/\" component={HomePageView}></Route>\n\n                {/* CONTAINER ROUTES */}\n                {Object.entries(containerRoutes).map(([url, View]) => (\n                    <Route exact path={url}>\n                        <div className=\"py-2\">\n                            <Container>\n                                <View />\n                            </Container>\n                        </div>\n                    </Route>\n                ))}\n\n                {/* GENERIC ERROR */}\n                <Route>\n                    <h2 className=\"text-sdark-red text-center\">Page Not Found.</h2>\n                </Route>\n            </Switch>\n        </div>\n    );\n};\n\nReactDOM.render(\n    <Router>\n        <ProvideAuth>\n            <App />\n        </ProvideAuth>\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}